class ZCSpecialsArgsInfoPanel: ZCBaseInfoPanelPart {
	override void OnCreate( void ) {
		optionCVarName = "mcm_zchecker_info_args";
		optionLabel = "Args, special & TIDs";
	}

	override String GetInfo( Actor thing, ZCheckerField thingfield ) {
		String outStr = "Special: " .. thing.special .. OLIVE .. "\n\\_ args [" .. N;

		for ( int arg = 0; arg < 4; arg++ )
			outStr = outStr .. thing.Args[ arg ] .. OLIVE .. ", " .. N;

		outStr = outStr .. thing.Args[ 4 ] .. OLIVE .. "]; \n" ..
				DARKGRAY .. "TID: " .. ( thing.TID? N : "" ) .. thing.TID .. "; \n" ..
				DARKGRAY .. "TID to hate: " .. ( thing.TIDtoHate? N : "" ) .. thing.TIDtoHate .. ".";

		return outStr;
	}
} // of class ZCSpecialsArgsInfoPanel: ZCBaseInfoPanelPart {}

class ZCPlayersInfoPanel: ZCBaseInfoPanelPart {
	override void OnCreate( void ) {
		optionCVarName = "mcm_zchecker_info_players";
		optionLabel = "Players & teams";
	}

	protected String getPlayerString( int playernum ) {
		String str = "";

		if ( playernum < 0 || playernum > MAXPLAYERS ) {
			str = DARKGRAY .. "no player (" .. playernum .. ")";
		} else {
			str = DARKGRAY .. "player " .. ( playeringame[ playernum ]? ( WHITE .. players[ playernum ].GetUserName() ) : "not in game" ) .. DARKGRAY .. " (" .. playernum .. ")";
		}

		return str;
	}

	override String GetInfo( Actor thing, ZCheckerField thingfield ) {
		String outStr = "";
		int friendPlayer = thing.FriendPlayer;
		int team = thing.DesignatedTeam;

		if ( friendPlayer && friendPlayer - 1 != thing.PlayerNumber() )
			outStr = outStr .. "Friend of " .. getPlayerString( friendPlayer - 1 ) .. ";\n";

		if ( team != Teams[ 0 ].NoTeam ) {
			outStr = outStr .. DARKGRAY .. "Team " .. WHITE .. team .. DARKGRAY .. " (\"" .. GRAY .. Teams[ team ].mName .. DARKGRAY .. "\");\n  Teammate players: " .. GRAY;

			bool foundTeammates = false;
			for ( int i = 0; i < MAXPLAYERS; i++ )
				if ( playeringame[ i ] && i != thing.PlayerNumber() && players[ i ].GetTeam() == team ) {
					outStr = i .. " ";
					foundTeammates = true;
				}

			outStr = outStr .. ( ( !foundTeammates )? DARKGRAY .. "none" : "\c-" ) .. ";\n  Teammate testees: " .. GRAY;

			int curFieldPos = thingfield.GetFieldPos();
			foundTeammates = false;

			for ( int i = 0; i < MaxTestee; i++ )
				if ( curFieldPos != i && handler.Testee[ i ].mo && handler.Testee[ i ].mo.DesignatedTeam ) {
					outStr = i .. " ";
					foundTeammates = true;
				}

			outStr = outStr .. ( ( !foundTeammates )? DARKGRAY .. "none" : "\c-" ) .. ".";
		} else {
			outStr = outStr .. DARKGRAY .. "Not in any team (" .. team .. ")\c-.";
		}

		return outStr;
	}
} // of class ZCPlayersInfoPanel: ZCBaseInfoPanelPart {}


class ZCSoundDefinitionsInfoPanel: ZCBaseInfoPanelPart 
{
	// [McM] This class is being developed by @Mud, so I decided not to alter it heavily.

	override void OnCreate( void ) 
	{
		optionCVarName = "mcm_zchecker_info_sounddefs";
		optionLabel = "Sound definitions";
		optionSubmenuName = "mcm_ZCheckerSubmenu_sound";
	}

		String FormatSoundName( Sound sndname ) 
		{
			if ( sndname == "" || sndname == " No sound " )
				return "-";

			return sndname;
		}

	override String GetInfo( Actor thing, ZCheckerField thingfield ) 
	{
		String info = "";
		
		int SoundsVariantMode = CVar.GetCVar( "mcm_zchecker_info_sounddefs", players[ consoleplayer ] ).GetInt();

		if ( SoundsVariantMode == 2 )
		{
			info = info .. TEXTCOLOR_WHITE .. "Sounds:";
			info = info .. TEXTCOLOR_RED .. "\n Attack: " .. TEXTCOLOR_ORANGE .. FormatSoundName(Thing.AttackSound);
			info = info .. TEXTCOLOR_RED .. "\n Pain: " .. TEXTCOLOR_ORANGE .. FormatSoundName(Thing.PainSound);
			info = info .. TEXTCOLOR_RED .. "\n Death: " .. TEXTCOLOR_ORANGE .. FormatSoundName(Thing.DeathSound);
			info = info .. TEXTCOLOR_SAPPHIRE .. "\n See: " .. TEXTCOLOR_TEAL .. FormatSoundName(Thing.SeeSound);
			info = info .. TEXTCOLOR_SAPPHIRE .. "\n Active: " .. TEXTCOLOR_TEAL .. FormatSoundName(Thing.ActiveSound);
			info = info .. TEXTCOLOR_DARKGRAY .. "\n Use: " .. TEXTCOLOR_TAN .. FormatSoundName(Thing.UseSound);
			info = info .. TEXTCOLOR_DARKGRAY .. "\n Bounce: " .. TEXTCOLOR_TAN .. FormatSoundName(Thing.BounceSound);
			info = info .. TEXTCOLOR_DARKGRAY .. "\n Wall bounce: " .. TEXTCOLOR_TAN .. FormatSoundName(Thing.WallBounceSound);
			info = info .. TEXTCOLOR_DARKGRAY .. "\n Crush pain: " .. TEXTCOLOR_TAN .. FormatSoundName(Thing.CrushPainSound);
			info = info .. TEXTCOLOR_DARKGRAY .. "\n Howl: " .. TEXTCOLOR_TAN .. FormatSoundName(Thing.HowlSound);
		}
		
		if ( SoundsVariantMode == 1 )
		{
			info = info .. TEXTCOLOR_WHITE .. "Sounds:";
			info = info .. TEXTCOLOR_RED .. "\n Attack: " .. TEXTCOLOR_ORANGE .. FormatSoundName(Thing.AttackSound);
			info = info .. TEXTCOLOR_RED .. "\n Pain: " .. TEXTCOLOR_ORANGE .. FormatSoundName(Thing.PainSound);
			info = info .. TEXTCOLOR_RED .. "\n Death: " .. TEXTCOLOR_ORANGE .. FormatSoundName(Thing.DeathSound);
			info = info .. TEXTCOLOR_SAPPHIRE .. "\n See: " .. TEXTCOLOR_TEAL .. FormatSoundName(Thing.SeeSound);
			info = info .. TEXTCOLOR_SAPPHIRE .. "\n Active: " .. TEXTCOLOR_TEAL .. FormatSoundName(Thing.ActiveSound);
		}

		return info;
	}
} // of class ZCSoundDefinitionsInfoPanel: ZCBaseInfoPanelPart {}


class ZCCheatsDefinitionsInfoPanel: ZCBaseInfoPanelPart {

	// [McM] This class is being developed by @InfernalSky, so I decided not to alter it heavily.

	override void OnCreate( void ) {
		optionCVarName = "mcm_zchecker_info_cheatsdefs";
		optionLabel = "Cheats definitions";
	}

	override String GetInfo( Actor thing, ZCheckerField thingfield ) {
		String outStr = "";

		if ( thing.player ) {

			static const String cheatcodes_1[] = {
				"No clipping", "Godmode", "No velocity", "No Target", "",
				"Chasecam", "Frozen", "Revertplease", "", "Stepleft", "Frightening",
				"Instant Weapon Switch", "Totally Frozen", "Predicting",  "Interpview"
			};
			static const String cheatcodes_2[] = {
				"ExtremelyDead", "", "Buddha 2", "Godmode 2", "", "Buddha", "", "", "No clipping 2"
			}; // array of string descriptions with the corresponding indexes

			outStr = outStr .. TEXTCOLOR_WHITE .. "Cheats:";
			outStr.AppendFormat(TEXTCOLOR_CYAN .. "\n  cheats mask = " .. TEXTCOLOR_DARKGRAY .. "0x" .. TEXTCOLOR_WHITE .. "%X", thing.player.cheats);

			for ( int i = 0; i < cheatcodes_1.Size(); i++ ) {
				if ( thing.player.cheats & ( 1 << i ) ) {
					outStr.AppendFormat(TEXTCOLOR_RED .. "\n  %s: " .. TEXTCOLOR_DARKGRAY .. "(1 << %d)", cheatcodes_1[i], i);
				}
			}
			for ( int i = 0; i < cheatcodes_2.Size(); i++ ) {
				if ( thing.player.cheats & ( 1 << ( i + 22 ) ) ) {
					outStr.AppendFormat(TEXTCOLOR_RED .. "\n  %s: " .. TEXTCOLOR_DARKGRAY .. "(1 << %d)", cheatcodes_2[i], i+24);
				}
			}
			if ( thing.bFLYCHEAT ){
				outStr.AppendFormat(TEXTCOLOR_RED .. "\n  Fly: " .. TEXTCOLOR_DARKGRAY .. "(%X)", thing.bFLYCHEAT);
			}
		} // of if ( thing.player ) {}

		return outStr;
	} // of override String GetInfo( Actor thing, ZCheckerField thingfield ) {}

} // of class ZCCheatsDefinitionsInfoPanel: ZCBaseInfoPanelPart {}
