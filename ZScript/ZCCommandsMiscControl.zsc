//
// Miscellaneous control CCMDs.
//	 1) Internal variables;
//	 2) Thinkers;
//	 3) Panels;
//	 4) External interface.
//

class ZCThinkersControlCommand: ZCConsoleCommand {
	enum EThinkersControlStatNums {
		TCSN_Error = -2,
		TCSN_ListTypes = -1,
		TCSN_First = 0
	};

	enum EThinkersControlActions {
		TCA_Error = 0,
		TCA_Skip,
		TCA_List,
		TCA_PanelAdd,
		TCA_RemoveThinker,
		TCA_RemoveThinkerRawName,
		TCA_Track,
		TCA_StopTracking
	};

	int zcStatNumType;
	EThinkersControlActions zcAction;
	int zcActionArg;
	bool zcActionListThinkers;

	int specifiedIndex;
	class<Thinker> specifiedClass;
	String specifiedClassRawString;

	private String helpListStr;
	private String helpListValuesColor;

	override void InitCCMD() {
		SetupCCMDInterface(
			"zc_thinkerscontrol",
			"$ZCTHINKERS_HELP_TITLE",
			"$ZCTHINKERS_HELP_DESC",
			'ZCTooltipThinkersControlCommand'
		);
	}

	override bool HandleArguments() {
		zcStatNumType = TCSN_Error;
		zcAction = TCA_Error;

		int ccmdArgsSize = ccmd.args.Size();

		// List all of the possible types (help):
		if ( ccmdArgsSize == 0 ) {
			zcStatNumType = TCSN_ListTypes;
			return true;
		}

		if ( ccmdArgsSize > 3 )
			return false;


		String origarg0 = ccmd.args[ 0 ];
		origarg0.ToLower();

		if ( ccmdArgsSize == 1 && ( origarg0 == "list" || origarg0 == "l" || origarg0 == "types" || origarg0 == "t" ) ) {
			zcStatNumType = TCSN_ListTypes;
			return true;
		}


		// Determining StatNum by string parameter:
		String arg = origarg0;

		if ( origarg0.Mid( origarg0.Length() - 1, 1 ) == "s" )
			arg = origarg0.Left( origarg0.Length() - 1 ); // Truncating the "s" plural postfix.

		if ( arg == "default" || arg == "def" || arg == "actor" || arg == "a" )
			zcStatNumType = Thinker.STAT_DEFAULT;
		else if ( arg == "decal" || arg == "dec" )
			zcStatNumType = Thinker.STAT_DECAL;
		else if ( arg == "autodecal" || arg == "decalsauto" || arg == "decalauto" || arg == "da" || arg == "ad" )
			zcStatNumType = Thinker.STAT_AUTODECAL;
		else if ( arg == "corpsepointer" || arg == "hexencorpse" )
			zcStatNumType = Thinker.STAT_CORPSEPOINTER;
		else if ( arg == "travelling" || arg == "trinv" )
			zcStatNumType = Thinker.STAT_TRAVELLING;
		else if ( arg == "static" || origarg0 == "st" || origarg0 == "s" )
			zcStatNumType = Thinker.STAT_STATIC;
		else if ( arg == "info" || arg == "information" )
			zcStatNumType = Thinker.STAT_INFO;
		else if ( arg == "scroller" )
			zcStatNumType = Thinker.STAT_SCROLLER;
		else if ( arg == "player" || arg == "pl" )
			zcStatNumType = Thinker.STAT_PLAYER;
		else if ( arg == "bosstarget" )
			zcStatNumType = Thinker.STAT_BOSSTARGET;
		else if ( arg == "lightning" )
			zcStatNumType = Thinker.STAT_LIGHTNING;
		else if ( arg == "decalthinker" || arg == "dect" )
			zcStatNumType = Thinker.STAT_DECALTHINKER;
		else if ( arg == "inventory" || arg == "inv" || arg == "i" )
			zcStatNumType = Thinker.STAT_INVENTORY;
		else if ( arg == "sectorlight" || arg == "seclight" || arg == "sl" )
			zcStatNumType = Thinker.STAT_LIGHT;
		else if ( arg == "sectorlighttransfer" || arg == "slt" )
			zcStatNumType = Thinker.STAT_LIGHTTRANSFER;
		else if ( arg == "earthquake" || arg == "quake" )
			zcStatNumType = Thinker.STAT_EARTHQUAKE;
		else if ( arg == "mapmarker" || arg == "marker" || arg == "automapmarker" || arg == "automap" )
			zcStatNumType = Thinker.STAT_MAPMARKER;
		else if ( arg == "dynlight" || arg == "dl" )
			zcStatNumType = Thinker.STAT_DLIGHT;
		else if ( arg == "sectoreffect" || arg == "seceffect" || arg == "sectormover" || arg == "secmover" || arg == "secmov" || arg == "se" || arg == "sm" )
			zcStatNumType = Thinker.STAT_SECTOREFFECT;
		else if ( arg == "actormover" || arg == "mover" )
			zcStatNumType = Thinker.STAT_ACTORMOVER;
		else if ( origarg0 == "acs" || arg == "acsscript" )
			zcStatNumType = Thinker.STAT_SCRIPTS;
		else if ( arg == "bot" )
			zcStatNumType = Thinker.STAT_BOT;

		else if ( str2int_Ptr( ccmd.args[ 0 ], +zcStatNumType ) ) {
			bool inlimits = ( zcStatNumType >= 0 && zcStatNumType <= Thinker.MAX_STATNUM );

			if ( !inlimits ) {
				ZCGlobal.Log( LL_Main, String.Format( ZCGlobal.Locz( "ZCTHINKERS_WRONGSTATNUM" ), Thinker.MAX_STATNUM ) );
				zcStatNumType = TCSN_Error;
			}
		}

		if ( zcStatNumType == TCSN_Error )
			return false;

		if ( ccmdArgsSize == 1 ) {
			zcAction = TCA_List;
			return true;
		}


		// Action determining:
		String actstr = ccmd.args[ 1 ];
		actstr.ToLower();

		specifiedClass = "";
		specifiedClassRawString = "";
		specifiedIndex = -1;
		zcActionArg = -1;
		zcActionListThinkers = false;

		if ( ccmdArgsSize == 2 ) {
			if ( actstr == "l" || actstr == "list" ) {
				zcAction = TCA_List;
			} else if ( actstr == "track" ) {
				zcAction = TCA_Track;
			} else if ( actstr == "untrack" ) {
				zcAction = TCA_StopTracking;
			}
		}

		int colonIndex = actstr.IndexOf( ":" );

		if ( colonIndex == -1 )
			colonIndex = actstr.IndexOf( "=" );

		if ( colonIndex == -1 )
			colonIndex = actstr.IndexOf( "," );

		if ( colonIndex != -1 ) {
			arg = actstr.Mid( colonIndex + 1, actstr.Length() - colonIndex - 1 );
			actstr.Truncate( colonIndex );
		} else {
			arg = "";
		}

		String actstrLeft3 = actstr.Left( 3 );


		if ( actstr == "rm" || actstrLeft3 == "rem" || actstrLeft3 == "del" ) {
			if ( ccmdArgsSize == 3 ) {
				// Command: "zcthinkers <type> rem:i <index|class>".
				if ( arg == "i" || arg.Left( 3 ) == "int" || arg == "r" || arg == "raw" )
					zcActionArg = 1;

				arg = ccmd.args[ 2 ];

				if ( !str2int_Ptr( arg, +specifiedIndex ) ) {
					// Removing thinker by classname:
					specifiedIndex = -1;

					if ( zcActionArg != 1 ) {
						specifiedClass = arg;

						if ( specifiedClass == NULL )
							specifiedClass = ParseSpecialActorName( arg );

						if ( specifiedClass == NULL )
							LogLocalize2Str( LL_Main, "ZCTHINKERS_NOTTHCLASS", arg );

						zcAction = ( specifiedClass? TCA_RemoveThinker : TCA_Skip );
					} else {
						specifiedClassRawString = arg;
						zcAction = TCA_RemoveThinkerRawName;
					}

				} else if ( specifiedIndex <= 0 ) {
					// Wrong index specified:
					ZCGlobal.Log( LL_Main, "$ZCTHINKERS_WRONGSELECT" );

				} else {
					// Removing thinker by index:
					zcAction = TCA_RemoveThinker;
				}

			} else {
				zcAction = TCA_RemoveThinker;
				zcActionListThinkers = true;
			}

		} else if ( actstr == "add" ) {
			if ( ccmdArgsSize == 2 ) {
				// "zcthinkers <type> add".
				zcAction = TCA_PanelAdd;
				zcActionListThinkers = true;

			} else {
				if ( arg == "" ) {
					// "zcthinkers <type> add <index>" or "zcthinkers <type> add: <index>".
					zcAction = TCA_PanelAdd;
					zcActionArg = -1;

				} else {
					// "zcthinkers <type> add:<panelpos> <index>".
					zcAction = TCA_Skip;

					if ( !str2int_Ptr( arg, +zcActionArg ) ) {
						LogLocalize2Str( LL_Main, "ZCTHINKERS_WRONGPANEL", arg );
					} else if ( !checkTesteePlace( --zcActionArg ) ) {
						ZCGlobal.Log( LL_Main, String.Format( ZCGlobal.Locz( "ZCTHINKERS_WRONGPANELRANGE" ), MaxTestee ) );
					} else {
						zcAction = TCA_PanelAdd;
					}

				}

				if ( zcAction != TCA_Error ) {
					if ( !str2int_Ptr( ccmd.args[ 2 ], +specifiedIndex ) || ( specifiedIndex <= 0 ) ) {
						ZCGlobal.Log( LL_Main, "$ZCTHINKERS_WRONGSELECT" );
						zcAction = TCA_Skip;
					}
				}

			} // of else of if ( ccmdArgsSize == 2 ) {}

		} else if ( zcAction == TCA_Error ) {
			LogLocalize2Str( LL_Main, "ZCTHINKERS_UNKNOWNACTION", actstr );
		}

		return ( zcAction != TCA_Error );
	} // of override bool HandleArguments() {}


	protected void AddListSection( String sectionname, String nodescolor ) {
		helpListValuesColor = nodescolor;
		helpListStr = helpListStr .. "\n" .. nodescolor .. "<" .. ZCGlobal.Locz( "ZCTHINKERS_" .. sectionname ) .. ">" .. CCMDCOLOR_DESC .. ": ";
	}

	protected void AddListValue( String node ) {
		node.Replace( "|", TEXTCOLOR_DARKGRAY .. "|" .. helpListValuesColor );
		node.Replace( "[", TEXTCOLOR_DARKGRAY .. "[" .. helpListValuesColor );
		node.Replace( "]", TEXTCOLOR_DARKGRAY .. "]" .. helpListValuesColor );
		helpListStr = helpListStr .. helpListValuesColor .. node .. CCMDCOLOR_DESC .. "; ";
	}

	private void CommandAddActorToPanel( void ) {
		ThinkerIterator it = ThinkerIterator.Create( "Thinker", zcStatNumType );
		Thinker curThinker;

		if ( specifiedIndex != -1 ) {
			do {
				specifiedIndex--;
				curThinker = it.Next( false );
			} while ( curThinker && specifiedIndex > 0 );

			if ( !curThinker ) {
				ZCGlobal.Log( LL_Main, "$ZCTHINKERSADD_SELECTBOUNDS" );

			} else if ( curThinker is "Actor" ) {
				// Find next free testee place ("-1" if not found):
				if ( -1 == zcActionArg && -1 == ZCAddCommand.FindFreeTesteePlace( ccmd ) ) {
					ZCGlobal.Log( LL_Normal, String.Format( ZCGlobal.Locz( "ZCTHINKERSADD_INSUFFPLACE" ), MaxTestee ) );

				} else {
					class<Actor> locatedActorClass = Actor( curThinker ).GetClass();

					if ( ZCGlobal.SpecialZCActorsHandling() && ( locatedActorClass == "ZCheckerActorInfo" ) ) {
						LogLocalize2Str( LL_Normal, "GETACTOR_SKIPPEDSPECIAL", curThinker.GetClassName() .. "" );
					} else {
						int newPanelPos = ZCAddCommand.HandleDuplicateActorFields( ccmd, Actor( curThinker ), zcActionArg );

						if ( newPanelPos == -1 )
							newPanelPos = ZCAddCommand.FindFreeTesteePlace( ccmd );

						ZCheckerField field = ccmd.handler.Testee[ newPanelPos ];

						field.mo = Actor( curThinker );
						field.UpdateActorMetainformation( ccmd );

						LogLocalize2Str( LL_Detailed, "ZCTHINKERSADD_SUCCESS", field.mo.GetClassName() .. " <" .. field.mo .. ">" );
					}

				} // of else of if ( -1 == zcActionArg && -1 == ZCAddCommand.FindFreeTesteePlace( ccmd ) ) {}

			} else {
				LogLocalize2Str( LL_Main, "ZCTHINKERSADD_NOTACTOR", curThinker.GetClassName() );
			}

		} else {
			ZCGlobal.Log( LL_Main, "$ZCTHINKERSADD_NOSELECTION" );
		}
	} // of private void CommandAddActorToPanel( void ) {}

	private void CommandRemoveFromWorld( void ) {
		ThinkerIterator it = ThinkerIterator.Create( "Thinker", zcStatNumType );
		Thinker curThinker;

		if ( specifiedIndex != -1 ) {
			// Removing by index:

			do {
				specifiedIndex--;
				curThinker = it.Next( false );
			} while ( curThinker && specifiedIndex > 0 );

			if ( !curThinker )
				ZCGlobal.Log( LL_Main, "$ZCTHINKERSRM_SELECTBOUNDS" );
			else
				RemoveWorldThinker( curThinker );

		} else if ( specifiedClass != NULL ) {
			// Removing by class<Thinker>:
			int destroyedAmount = 0;
			curThinker = it.Next( false );

			while ( curThinker ) {
				if ( curThinker.GetClass() == specifiedClass ) {
					if ( RemoveWorldThinker( curThinker ) )
						destroyedAmount++;
				}

				curThinker = it.Next( false );
			}

			ZCGlobal.Log( LL_Main, String.Format( ZCGlobal.Locz( "ZCTHINKERSRM_SUCCESS" ), destroyedAmount, specifiedClass.GetClassName() ) );

		} else if ( specifiedClassRawString != "" ) {
			// Removing by raw classname:
			int destroyedAmount = 0;
			curThinker = it.Next( false );

			while ( curThinker ) {
				if ( ( curThinker.GetClassName() .. "" ) ~== specifiedClassRawString ) {
					if ( RemoveWorldThinker( curThinker ) )
						destroyedAmount++;
				}

				curThinker = it.Next( false );
			}

			ZCGlobal.Log( LL_Main, String.Format( ZCGlobal.Locz( "ZCTHINKERSRM_SUCCESSRAW" ), destroyedAmount, specifiedClassRawString ) );

		} else {
			ZCGlobal.Log( LL_Emergency, GetClassName() .. "::DoCommand(). Neither the index nor the classname nor the raw classname not specified." );
		}
	} // of private void CommandRemoveFromWorld( void ) {}


	override void DoCommand() {
		if ( zcAction == TCA_Skip )
			return;

		if ( zcStatNumType == TCSN_ListTypes ) {
			helpListStr = helpListValuesColor = "";

			AddListSection( "SECTIONACTORS", TEXTCOLOR_SAPPHIRE );
			AddListValue( "a[ctors]|def[ault]" );
			AddListValue( "dynlights|dl" );
			AddListValue( "i[nv[entory]]" );
			AddListValue( "mapmarkers|markers|automap[markers]" );
			AddListValue( "bosstargets" );
			AddListSection( "SECTIONSTATIC", TEXTCOLOR_TEAL );
			AddListValue( "static|s" );
			AddListValue( "info[rmation]" );
			AddListValue( "decals|dec" );
			AddListValue( "autodecals|decalsauto|da|ad" );
			AddListValue( "corpsepointers|hexencorpses" );
			AddListValue( "travelling|trinv" );
			AddListSection( "SECTIONSECTORS", TEXTCOLOR_BRICK );
			AddListValue( "sec[tor]mov[ers]|sec[tor]effects|sm|se" );
			AddListValue( "sec[tor]lights|sl" );
			AddListValue( "sectorlighttransfers|slt" );
			AddListSection( "SECTIONOTHER", TEXTCOLOR_DARKGREEN );
			AddListValue( "acs|acsscripts" );
			AddListValue( "lightnings" );
			AddListValue( "pl[ayers]" );
			AddListValue( "bots" );
			AddListValue( "[actor]movers" );
			AddListValue( "[earth]quakes" );
			AddListValue( "scrollers" );
			AddListValue( "decalthinkers|dect" );

			console.printf( ZCGlobal.Locz( "ZCTHINKERS_HELPLISTPOSTFIX" ), helpListStr, Thinker.STAT_USER, Thinker.STAT_USER_MAX );

		} else if ( zcStatNumType >= TCSN_First && zcStatNumType <= Thinker.MAX_STATNUM ) {

			switch ( zcAction ) {
				case TCA_PanelAdd:
					CommandAddActorToPanel();
					break;

				case TCA_RemoveThinker:
				case TCA_RemoveThinkerRawName:
					if ( zcActionListThinkers ) {
						ZCGlobal.Log( LL_Main, "$ZCTHINKERSRM_NOSELECTION" );
					} else {
						CommandRemoveFromWorld();
					}
					break;

				case TCA_List:
					zcActionListThinkers = true;
					break;

				case TCA_Track:
				case TCA_StopTracking:
					ZCGlobal.Log( LL_Main, "[Tracking system not released yet]." );
					break;

				default:
					ZCGlobal.Log( LL_Emergency, GetClassName() .. "::DoCommand(). Unknown action type " .. zcAction );
					break;
			}


			if ( zcActionListThinkers ) {
				ThinkerIterator it = ThinkerIterator.Create( "Thinker", zcStatNumType );
				Thinker curThinker = NULL;

				String str_NOSECTOR = ZCGlobal.Locz( "ZCTHINKERS_LISTFLAGNOSECTOR" );
				String str_ATPOS = ZCGlobal.Locz( "ZCTHINKERS_LISTATPOS" ) .. " ";
				String str_INVOWNERIS = ZCGlobal.Locz( "ZCTHINKERS_LISTINVOWNER" ) .. " ";

				uint thinkersAmount = 0;

				while ( curThinker = it.Next( false ) ) {
					thinkersAmount++;

					// Check if Thinker class is accessible via ZScript (== is it internal):
					String curThinkerName = curThinker.GetClassName() .. "";
					class<Object> accessTestClass = curThinkerName;

					bool isInternalThinker = ( accessTestClass == NULL );


					String extrainfo; // Initialized with "" by default.

					if ( curThinker is "Actor" ) {
						Actor curActor = Actor( curThinker );

						if ( curActor is "Inventory" && Inventory( curActor ).owner ) {
							Actor invowner = Inventory( curActor ).owner;

							extrainfo = String.Format( "%s" .. LLCOLOR_MAIN .. "%s%s",
														str_INVOWNERIS,
														"" .. invowner.GetClassName(),
														invowner.bNOSECTOR? str_NOSECTOR : TEXTCOLOR_DARKGRAY .. " " .. str_ATPOS .. ZCGlobal.squeezeVector3( invowner.pos ) );

						} else {
							extrainfo = str_ATPOS .. ZCGlobal.squeezeVector3( curActor.pos );
						}

						if ( curActor.bNOSECTOR )
							extrainfo = extrainfo .. str_NOSECTOR;

					} else if ( curThinker is "SectorEffect" ) {
						extrainfo = String.Format( ZCGlobal.Locz( "ZCTHINKERS_LISTSECTORNUM" ), SectorEffect( curThinker ).GetSector().Index() );

					} // of else of if ( curThinker is "" ) {}

					class<Object> parentClass = curThinker.GetParentClass();
					String parentClassName = parentClass.GetClassName();
					accessTestClass = parentClassName;

					if ( isInternalThinker )
						curThinkerName = TEXTCOLOR_BLACK .. "[" .. TEXTCOLOR_TEAL .. curThinkerName .. TEXTCOLOR_BLACK .. "]";

					if ( accessTestClass == NULL )
						parentClassName = TEXTCOLOR_BLACK .. "[" .. TEXTCOLOR_TEAL .. parentClassName .. TEXTCOLOR_BLACK .. "]";

					console.printf( TEXTCOLOR_DARKGRAY .. "%2i. " .. ( isInternalThinker? TEXTCOLOR_BRICK .. "%-21s" : TEXTCOLOR_WHITE .. "%-15s" )
										.. TEXTCOLOR_GRAY .. ": %s" .. ( extrainfo != ""? TEXTCOLOR_DARKGRAY .. extrainfo : "" ),
									thinkersAmount, curThinkerName, parentClassName );

				} // of while ( curThinker = it.Next( false ) ) {}

				if ( zcAction == TCA_List )
					console.printf( ZCGlobal.Locz( "ZCTHINKERS_LISTTOTAL" ), thinkersAmount, zcStatNumType );

			} // of if ( zcActionListThinkers ) {}

		} else {
			ZCGlobal.Log( LL_Emergency, GetClassName() .. "::DoCommand(). Impossible StatNum " .. zcStatNumType );
		}
	}
} // of class ZCThinkersControlCommand: ZCConsoleCommand {}


class ZCInfoPanelControlAliasNode {
	String aliasname;
	Actor thing;
}

class ZCInfoPanelControlCommand: ZCConsoleCommand {
	const GRAY = TEXTCOLOR_GRAY;
	const DARKGRAY = TEXTCOLOR_DARKGRAY;

	enum EPanelControlTypes {
		PCT_Error = 0,
		PCT_Save,
		PCT_Load,
		PCT_Move,
		PCT_Copy,
		PCT_Info
	};

	EPanelControlTypes zcPanelControlType;
	int zcPos, zcNewPos;
	String zcAliasName;

	Array<ZCInfoPanelControlAliasNode> aliases;

	override void InitCCMD() {
		SetupCCMDInterface(
			"zc_infopanelcontrol",
			"$ZCPANELCTL_HELP_TITLE",
			"$ZCPANELCTL_HELP_DESC",
			'ZCTooltipPanelsControlCommand'
		);
	}

	private int FindAliasIndex( String aliasname ) {
		int outValue = -1;

		if ( aliasname != "" ) {
			for ( int i = 0; i < aliases.Size(); i++ ) {
				if ( aliases[ i ].aliasname == aliasname ) {
					outValue = i;
					break;
				}
			}
		}

		return outValue;
	} // of private int FindAliasIndex( String aliasname ) {}

	override bool HandleArguments() {
		zcPos = zcNewPos = -1;
		zcAliasName = "";
		zcPanelControlType = PCT_Error;

		int ccmdArgsSize = ccmd.args.Size();
		bool outValue = false;

		if ( ccmdArgsSize == 1 && ccmd.args[ 0 ] ~== "info" ) {
			zcPanelControlType = PCT_Info;
			outValue = true;

		} else if ( ccmdArgsSize == 2 ) {
			zcPanelControlType = PCT_Info;

			for ( int i = 0; i < 2; i++ ) {
				if ( ccmd.args[ i ] ~== "info" && str2int_Ptr( ccmd.args[ i ^ 1 ], +zcPos ) ) {
					outValue = checkTesteePlace( --zcPos );
					break;
				}
			}

		} else if ( ccmdArgsSize == 3 ) {
			String argOperation = ccmd.args[ 1 ];
			argOperation.ToLower();
			bool parsingError = false;
			bool parsePosArg = true;
			bool parsePosNewArg = false;

			if ( argOperation == "save" || argOperation == "store" || argOperation == "load" ) {
				zcAliasName = ccmd.args[ 2 ];
				zcPanelControlType = ( argOperation == "load"? PCT_Load : PCT_Save );
			} else if ( argOperation == "move" || argOperation == "m" || argOperation == "copy" || argOperation == "c" ) {
				parsePosNewArg = true;
				zcPanelControlType = ( argOperation.Left( 1 ) == "c"? PCT_Copy : PCT_Move );
			} else {
				parsePosArg = false;
			}

			if ( parsePosArg ) {
				if ( str2int_Ptr( ccmd.args[ 0 ], +zcPos ) )
					outValue = checkTesteePlace( --zcPos );

				if ( parsePosNewArg && outValue && str2int_Ptr( ccmd.args[ 2 ], +zcNewPos ) )
					outValue = checkTesteePlace( --zcNewPos );
			}
		}

		return outValue;
	}

	override void DoCommand( void ) {
		if ( zcPos != -1 ) {
			ZCheckerHandler handler = ccmd.handler;

			switch ( zcPanelControlType ) {
			case PCT_Save:
				if ( handler.Testee[ zcPos ].mo ) {
					int index = FindAliasIndex( zcAliasName );
					bool continueFlag = true;

					if ( index != -1 ) {
						if ( aliases[ index ].thing ) {
							ZCGlobal.Log( LL_Main, String.Format( ZCGlobal.Locz( "ZCPANELSAVE_ALIASEXISTS" ), zcAliasName, aliases[ index ].thing.GetClassName() ) );
							continueFlag = false;
						} else {
							LogLocalize2Str( LL_Detailed, "ZCPANELSAVE_RELINKINGALIAS", zcAliasName );
						}
					} 

					if ( continueFlag ) {
						ZCInfoPanelControlAliasNode aliasnode = ZCInfoPanelControlAliasNode( new( 'ZCInfoPanelControlAliasNode' ) );

						aliasnode.aliasname = zcAliasName;
						aliasnode.thing = handler.Testee[ zcPos ].mo;
						aliases.Push( aliasnode );

						ZCGlobal.Log( LL_Detailed, String.Format( ZCGlobal.Locz( "ZCPANELSAVE_SUCCESS" ), aliasnode.thing.GetClassName() .. " <" .. aliasnode.thing .. ">", zcAliasName ) );
					}
				} else {
					LogLocalize2Str( LL_Main, "ZCPANELSAVE_NOPANEL", "" .. ( zcPos + 1 ) );
				}
				break;

			case PCT_Load:
				int index = FindAliasIndex( zcAliasName );

				if ( index != -1 ) {
					if ( aliases[ index ].thing ) {
						Actor thing = aliases[ index ].thing;
						handler.Testee[ zcPos ].mo = thing;
						ccmd.handler.UpdateInternalClassnameByField( zcPos );

						ZCGlobal.Log( LL_Detailed, String.Format( ZCGlobal.Locz( "ZCPANELLOAD_SUCCESS" ), thing.GetClassName() .. " <" .. thing .. ">", zcAliasName ) );
					} else {
						LogLocalize2Str( LL_Detailed, "ZCPANELLOAD_ACTORDESTROYED", zcAliasName );
					}
				} else {
					LogLocalize2Str( LL_Main, "ZCPANELLOAD_WRONGALIAS", zcAliasName );
				}
				break;

			case PCT_Move:
			case PCT_Copy:
				if ( handler.Testee[ zcPos ].mo ) {
					if ( zcNewPos != -1 )
						handler.Testee[ zcNewPos ].mo = handler.Testee[ zcPos ].mo;

					if ( zcPanelControlType == PCT_Move )
						handler.Testee[ zcPos ].mo = NULL;

					ccmd.handler.UpdateInternalClassnameByField( zcPos );
					ccmd.handler.UpdateInternalClassnameByField( zcNewPos );
				} else {
					ZCGlobal.Log( LL_Main, String.Format( ZCGlobal.Locz( "ZCPANEL_NOACTORINPOS" ), zcPos + 1 ) );
				}
				break;

			case PCT_Info:
				Actor mo = handler.Testee[ zcPos ].mo;

				if ( mo ) {
					LogLocalize2Str( LL_Main | LL_NoDot, "ZCPANELINFO_ZCCLASSINFO", mo.GetClassName() );
					EventHandler.SendNetworkEvent( "zc_classinfo@@" .. mo.GetClassName() );

				} else {
					ZCGlobal.Log( LL_Main, String.Format( ZCGlobal.Locz( "ZCPANEL_NOACTORINPOS" ), zcPos + 1 ) );
				}
				break;
			default:
				ZCGlobal.Log( LL_Emergency, "Unknown panel control type " .. zcPanelControlType .. " (with position " .. zcPos .. ")" );
				break;
			}

		} else if ( zcPanelControlType == PCT_Info ) {
			if ( aliases.Size() == 0 ) {
				ZCGlobal.ClearscopeLog( LL_Main, "$ZCPANELINFO_NOALIASES" );
			} else {
				ZCGlobal.ClearscopeLog( LL_Main | LL_NoDot, String.Format( ZCGlobal.Locz( "ZCPANELINFO_LISTHEADER" ), aliases.Size() ) );

				for ( int i = 0; i < aliases.Size(); i++ ) {
					if ( aliases[ i ].thing )
						ZCGlobal.ClearscopeLog( LL_Main, String.Format( ZCGlobal.Locz( "ZCPANELINFO_ALIASLINKED" ), aliases[ i ].aliasname, aliases[ i ].thing.GetClassName() .. DARKGRAY .. " <" .. aliases[ i ].thing .. ">", ZCGlobal.squeezeVector3( aliases[ i ].thing.pos ) ) );
					else
						ZCGlobal.ClearscopeLog( LL_Main, String.Format( ZCGlobal.Locz( "ZCPANELINFO_ALIASGONE" ), aliases[ i ].aliasname ) );
				}
			}

		} else {
			ZCGlobal.Log( LL_Emergency, "Unknown panel control type " .. zcPanelControlType .. " (without defined position)." );
		}
	} // of override void DoCommand( void ) {}

} // of class ZCInfoPanelControlCommand: ZCConsoleCommand {}

class ZCClassInfoCommand: ZCConsoleCommand {
	override void InitCCMD() {
		SetupCCMDInterface(
			"zc_classinfo",
			"$ZCCLASSINFO_HELP_TITLE",
			"$ZCCLASSINFO_HELP_DESC"
		);
	}

	class infoclass;


	override bool HandleArguments() {
		if ( ccmd.args.Size() != 1 )
			return false;

		infoclass = ParseSpecialActorName( ccmd.args[ 0 ] );

		return true;
	}

	override void DoCommand() {
		if ( !infoclass ) {
			LogLocalize2Str( LL_Main, "ZCCLASSINFO_NOCLASS", ccmd.args[ 0 ] );
			return; // Wrong class provided.
		}


		ZCGlobal.ClearscopeLog( LL_Main | LL_NoPrefix, String.Format( ZCGlobal.Locz( "ZCCLASSINFO_HEADER" ), infoclass.GetClassName(), "" .. infoclass ) );

		class parentClass = infoclass.GetParentClass();

		while ( parentClass != NULL ) {
			ZCGlobal.ClearscopeLog( LL_Main | LL_NoPrefix | LL_NoDot, String.Format( ZCGlobal.Locz( "ZCCLASSINFO_INHERITANCE" ), parentClass.GetClassName(), "" .. parentClass ) );
			parentClass = parentClass.GetParentClass();
		}

		// Replacement chain:
		if ( infoclass is 'Actor' ) {
			class<Actor> actorclass = (class<Actor>)( infoclass );
			class<Actor> replacee = Actor.GetReplacee( actorclass );
			class<Actor> replacement = Actor.GetReplacement( actorclass );

			String outstr = "";

			if ( replacee == replacement ) {
				outstr = ZCGlobal.Locz( "ZCCLASSINFO_NOREPLACEMENTCHAIN" );

			} else {
				String nicearrow = ZCGlobal.Locz( "ZCCLASSINFO_REPLACEMENTCHAINSEPARATOR" );
				outstr = ZCGlobal.Locz( "ZCCLASSINFO_REPLACEMENTCHAIN" ) .. "\n";

				if ( replacee != actorclass )
					outstr = outstr .. TEXTCOLOR_DARKGRAY .. replacee.GetClassName() .. nicearrow;

				outstr.AppendFormat( TEXTCOLOR_WHITE .. infoclass.GetClassName() );

				if ( replacement != actorclass )
					outstr = outstr .. TEXTCOLOR_DARKGRAY .. nicearrow .. replacee.GetClassName();
			}

			ZCGlobal.ClearscopeLog( LL_Main | LL_NoPrefix, outstr );
		} // of if ( infoclass is 'Actor' ) {}

	} // of override void DoCommand() {}

} // of class ZCClassInfoCommand: ZCConsoleCommand {}



class ZCVariablesControlCommand: ZCConsoleCommand {
	const GRAY = TEXTCOLOR_GRAY;
	const DARKGRAY = TEXTCOLOR_DARKGRAY;

	enum EVarsControlTypes {
		VCT_Error = 0,
		VCT_Set,
		VCT_Delete,
		VCT_Info,
		VCT_InfoForStdoutFile,
		VCT_LoadFromFile
	};

	EVarsControlTypes zcSubcommand;

	override void InitCCMD() {
		SetupCCMDInterface(
			"zc_variablescontrol",
			"$ZCVARSCTL_HELP_TITLE",
			"$ZCVARSCTL_HELP_DESC"
		);
	}

	override bool HandleArguments() {
		int ccmdArgsSize = ccmd.args.Size();
		zcSubcommand = VCT_Error;

		if ( ccmdArgsSize == 3 && ( ccmd.args[ 0 ] ~== "set" || ccmd.args[ 0 ] ~== "new" ) ) {
			zcSubcommand = VCT_Set;
		} else if ( ccmdArgsSize > 0 && ccmdArgsSize < 3 ) {
			String argOperation = ccmd.args[ 0 ];
			argOperation.ToLower();

			String argOperationLeft3 = argOperation.Left( 3 );

			if ( ccmdArgsSize > 1 && ( argOperationLeft3 == "del" || argOperation == "rm" || argOperationLeft3 == "rem" ) ) {
				zcSubcommand = VCT_Delete;

			} else if ( argOperation == "l" || argOperation == "list" || argOperation == "i" || argOperation == "info" ) {
				if ( ccmdArgsSize == 2 ) {
					argOperation = ccmd.args[ 1 ];
					argOperation.ToLower();

					if ( argOperation == "stdout" || argOperation == "porcelain" )
						zcSubcommand = VCT_InfoForStdoutFile;
				} else {
					zcSubcommand = VCT_Info;
				}

			} else if ( argOperation == "loadfrom" ) {
				zcSubcommand = VCT_LoadFromFile;
			}
		}

		return ( zcSubcommand != VCT_Error );
	} // of override bool HandleArguments() {}

	override void DoCommand() {
		ZCGlobal global = ZCGlobal.Get();

		switch ( zcSubcommand ) {
			case VCT_Set:
				String classnameVarName = ccmd.args[ 1 ];
				String newVarValue = ccmd.args[ 2 ];

				if ( SetGlobalClassnameVariable( classnameVarName, newVarValue ) )
					ZCGlobal.Log( LL_Detailed, String.Format( ZCGlobal.Locz( "ZCVARSCTL_SETSUCCESS" ), classnameVarName.Left( 63 ), GetGlobalClassnameVariable( classnameVarName ) ) );
				break;
			case VCT_Delete:
				String arg1 = ccmd.args[ 1 ];

				if ( arg1 ~== "all" )
					global.ClearAllClassnameVariables();
				else
					global.DeleteClassnameVariable( arg1 );

				break;
			case VCT_Info:
				ZCGlobal.ClearscopeLog( LL_Main | LL_NoDot, String.Format( ZCGlobal.Locz( "ZCVARSCTL_LISTHEADER" ), global.savedClassnameVariables.Size() ) );

				// Well, field "ZCGlobal::savedClassnameVariables" is close to be private...
				for ( int i = 0; i < global.savedClassnameVariables.Size(); i++ ) {
					ZCInternalStringDictionaryCell curcell = global.savedClassnameVariables[ i ];
					ZCGlobal.ClearscopeLog( LL_Main, DARKGRAY .. "  \"" .. GRAY .. curcell.key .. DARKGRAY .. "\" == \"" .. GRAY .. curcell.value .. DARKGRAY .. "\"." );
				}
				break;
			case VCT_InfoForStdoutFile:
				ZCGlobal.Log( LL_Main | LL_NoDot, TEXTCOLOR_BRICK .. "Note that load from file command not released yet and may not be released at all.\n" );

				// It is advisable to use a "SystemTime.Format()".
				console.printf( "\n# Configuration file automatically generated by ZChecker v" .. ZCheckerVersion .. ".\n\n" );

				for ( int i = 0; i < global.savedClassnameVariables.Size(); i++ ) {
					ZCInternalStringDictionaryCell curnode = global.savedClassnameVariables[ i ];
					console.printf( curnode.key .. "=" .. curnode.value );
				}

				console.printf( "\n" );
				break;
			case VCT_LoadFromFile:
				ZCGlobal.Log( LL_Main, DARKGRAY .. "[Load from file command not released yet and may not be released at all]." );
				break;
			default:
				ZCGlobal.Log( LL_Emergency, GetClassName() .. "::DoCommand(). Unknown control type " .. zcSubcommand .. "." );
				break;
		}
	} // of override void DoCommand() {}

} // of class ZCVariablesControlCommand: ZCConsoleCommand {}


class ZCExternalInterfaceCommand: ZCConsoleCommand {
	transient CVar interfaceCVar;
	const const_interfaceCVarName = "mcm_zchecker_var_interface";

	enum EInterfaceControlTypes {
		ICT_Error = 0,

		// Returns 0 or 1:
		ICT_StringsEqual,
		ICT_InternalVar,
		ICT_PanelNotEmpty,
		ICT_PanelInheriting,
		ICT_PanelEqual,
		ICT_ValidPlacePos,
		ICT_ValidRawPos,
		ICT_LinetargetCheck,

		// Returns 1..MaxTestee:
		ICT_FindInPanels,
		ICT_FindFreePanel,
	};

	EInterfaceControlTypes zcSubcommand;
	int zcPos;
	Actor testeePos1, testeePos2; // For the actors comparing ("ICT_PanelEqual").

	override void InitCCMD() {
		SetupCCMDInterface(
			"zc_external_interface",
			"$ZCIF_HELP_TITLE",
			String.Format( ZCGlobal.Locz( "ZCIF_HELP_DESC" ), const_interfaceCVarName ),
			'ZCTooltipExternalInterfaceCommand'
		);
	}

	override void ResetCachedHelpString( void ) {
		Super.ResetCachedHelpString();
		ccmdInterfaceData.helpDesc = String.Format( ZCGlobal.Locz( "ZCIF_HELP_DESC" ), const_interfaceCVarName );
	}


	override bool HandleArguments() {
		int ccmdArgsSize = ccmd.args.Size();
		if ( ccmdArgsSize == 0 || ccmdArgsSize > 3 )
			return false;

		bool outval = false;
		zcSubcommand = ICT_Error;

		String argcmd = ccmd.args[ 0 ];
		argcmd.ToLower();

		ccmdArgsSize--;

		if ( argcmd == "strequal" ) {
			if ( ccmdArgsSize == 2 ) {
				outval = true;
				zcSubcommand = ICT_StringsEqual;
			}

		} else if ( argcmd == "dangerccmds" || argcmd == "dangerousccmds" || argcmd.Left( 2 ) == "ev" ) {
			if ( ccmdArgsSize == 0 ) {
				outval = true;
				zcSubcommand = ICT_InternalVar;
			}

		} else if ( argcmd == "panel" ) {
			if ( ccmdArgsSize == 1 ) {
				if ( str2int_Ptr( ccmd.args[ 1 ], +zcPos ) )
					outval = checkTesteePlace( --zcPos );

				zcSubcommand = ICT_PanelNotEmpty;
			}

		} else if ( argcmd == "panelinherit" ) {
			if ( ccmdArgsSize == 2 ) {
				if ( str2int_Ptr( ccmd.args[ 1 ], +zcPos ) )
					outval = checkTesteePlace( --zcPos );

				zcSubcommand = ICT_PanelInheriting;
			}

		} else if ( argcmd == "panelequal" || argcmd == "panelsequal" ) {
			if ( ccmdArgsSize == 2 ) {
				zcPos = getPlaceTestee( testeePos1, 1 );

				if ( zcPos != PPS_WrongPos && zcPos != PPS_Error )
					zcPos = getPlaceTestee( testeePos2, 2 );

				if ( zcPos != PPS_Error && zcPos != PPS_WrongPos ) {
					outval = true;
					zcSubcommand = ICT_PanelEqual;
				}
			}

		} else if ( argcmd == "validplacepos" || argcmd == "validpos" ) {
			if ( ccmdArgsSize == 1 ) {
				outval = true;
				zcSubcommand = ( argcmd == "validpos"? ICT_ValidRawPos : ICT_ValidPlacePos );
			}

		} else if ( argcmd == "lt" || argcmd == "linetarget" || argcmd == "linetrace" ) {
			if ( ccmdArgsSize == 0 ) {
				outval = true;
				zcSubcommand = ICT_LinetargetCheck;
			}

		} else if ( argcmd == "panelfind" ) {
			if ( ccmdArgsSize == 1 ) {
				outval = true;
				zcSubcommand = ICT_FindInPanels;
			}

		} else if ( argcmd == "panelfindfree" ) {
			if ( ccmdArgsSize == 0 ) {
				outval = true;
				zcSubcommand = ICT_FindFreePanel;
			}

		}

		return outval && ( zcSubcommand != ICT_Error );
	} // of override bool HandleArguments() {}

	void InterfaceDebugLog( String message ) {
		ZCGlobal.Log( LL_Interface, ZCGlobal.Locz( "ZCIF_TRACEPREFIX" ) .. message );
	}

	override void DoCommand() {
		if ( !interfaceCVar )
			interfaceCVar = CVar.GetCVar( const_interfaceCVarName, players[ ccmd.e.Player ] );

		int outval = 0;
		ZCheckerHandler zchandler = ccmd.handler;
		Actor testeeInPos;

		switch ( zcSubcommand ) {
			case ICT_InternalVar:
				if ( ccmd.args[ 0 ].Left( 2 ) == "ev" ) {
					outval = ZCGlobal.IsEverythingLevel();
					InterfaceDebugLog( "Is current level Everything: " .. outval );
				} else {
					outval = ZCGlobal.DangerousCCMDsAllowed( "" );
					InterfaceDebugLog( "Is dangerous CCMDs allowed: " .. outval );
				}

				break;
			case ICT_StringsEqual:
				bool parsedSuccessfully = true;

				String str1, str2;

				str1 = ParseSpecialActorName( ccmd.args[ 1 ] );
				parsedSuccessfully = ( classnameParseStatus != CPS_RegexFailed && classnameParseStatus != CPS_EmptyVariable );

				if ( parsedSuccessfully ) {
					str2 = ParseSpecialActorName( ccmd.args[ 2 ] );
					parsedSuccessfully = ( classnameParseStatus != CPS_RegexFailed && classnameParseStatus != CPS_EmptyVariable );
				}

				if ( parsedSuccessfully ) {
					outval = ( str1 ~== str2 );
					InterfaceDebugLog( "Comparing strings: \"" .. str1 .. "\" and \"" .. str2 .. "\"." );
				} else {
					outval = false;
					InterfaceDebugLog( "Comparing strings " .. TEXTCOLOR_BRICK .. "failed, returning 0" .. LLCOLOR_MAIN .. "." );
				}
				break;
			case ICT_PanelNotEmpty:
				outval = !!( zchandler.Testee[ zcPos ].mo );
				InterfaceDebugLog( "Actor in position " .. zcPos .. ( outval
							? TEXTCOLOR_GREEN .. " exists" .. LLCOLOR_MAIN .. " (true)."
							: TEXTCOLOR_BRICK .. " not exists" .. LLCOLOR_MAIN .. " (false)." ) );
				break;
			case ICT_PanelInheriting:
				class<Actor> ancestorClass = ParseSpecialActorName( ccmd.args[ 2 ] );
				testeeInPos = zchandler.Testee[ zcPos ].mo;
				outval = 0;

				if ( !testeeInPos ) {
					InterfaceDebugLog( "There's no actor in pos " .. zcPos .. "." );

				} else if ( !ancestorClass ) {
					InterfaceDebugLog( "Name \"" .. ccmd.args[ 2 ] .. "\" is not an Actor class." );

				} else {
					outval = ( testeeInPos is ancestorClass );

					InterfaceDebugLog( "Actor \"" .. testeeInPos.GetClassName() .. "\" in position " .. zcPos .. ( outval
							? TEXTCOLOR_GREEN .. " inherits " .. LLCOLOR_MAIN .. " (true)"
							: TEXTCOLOR_BRICK .. " not inherits" .. LLCOLOR_MAIN .. " (false)" )
						.. " from the \"" .. ancestorClass.GetClassName() .. "\"." );
				}
				break;
			case ICT_PanelEqual:
				outval = ( testeePos1 == testeePos2 );
				InterfaceDebugLog( "Actors in positions " .. ccmd.args[ 1 ] .. " and " .. ccmd.args[ 2 ] .. ( outval
							? TEXTCOLOR_GREEN .. " are same" .. LLCOLOR_MAIN .. " (true)."
							: TEXTCOLOR_BRICK .. " are different" .. LLCOLOR_MAIN .. " (false)." ) );
				break;
			case ICT_ValidRawPos:
				outval = str2int_Ptr( ccmd.args[ 1 ], +zcPos );
				InterfaceDebugLog( "Panel position validation: \"" .. ccmd.args[ 1 ] .. "\" is" .. ( outval
							? TEXTCOLOR_GREEN .. " valid" .. LLCOLOR_MAIN .. " (true)."
							: TEXTCOLOR_BRICK .. " not valid" .. LLCOLOR_MAIN .. " (false)." ) );
				break;
			case ICT_ValidPlacePos:
				zcPos = getPlaceTestee( testeeInPos, 1 );
				outval = ( zcPos != PPS_Error && zcPos != PPS_WrongPos );
				InterfaceDebugLog( "Place validation: \"" .. ccmd.args[ 1 ] .. "\" is" .. ( outval
							? TEXTCOLOR_GREEN .. " valid" .. LLCOLOR_MAIN .. " (true)."
							: TEXTCOLOR_BRICK .. " not valid" .. LLCOLOR_MAIN .. " (false)." ) );
				break;
			case ICT_LinetargetCheck:
				outval = !!LinetraceActor( quiet: true );
				InterfaceDebugLog( "Linetarget actor " .. ( outval
							? TEXTCOLOR_GREEN .. " exists" .. LLCOLOR_MAIN .. " (true)."
							: TEXTCOLOR_BRICK .. " not exists" .. LLCOLOR_MAIN .. " (false)." ) );
				break;
			case ICT_FindInPanels:
				class<Actor> compareClass = ParseSpecialActorName( ccmd.args[ 1 ] );

				if ( !compareClass ) {
					InterfaceDebugLog( "Name \"" .. ccmd.args[ 1 ] .. "\" is not an Actor class." );
				} else {
					for ( int i = 0; i < MaxTestee; i++ ) {
						if ( zchandler.Testee[ i ].mo && ( zchandler.Testee[ i ].mo.GetClass() == compareClass ) ) {
							outval = ( i + 1 );
							break;
						}
					}
					InterfaceDebugLog( "Actor class \"" .. compareClass.GetClassName() .. "\" " .. ( outval
								? TEXTCOLOR_GREEN .. "found" .. LLCOLOR_MAIN .. " in panel " .. outval
								: TEXTCOLOR_BRICK .. "not found" .. LLCOLOR_MAIN .. " (false)" ) );
				}
				break;
			case ICT_FindFreePanel:
				outval = ( ZCAddCommand.FindFreeTesteePlace( ccmd ) + 1 );
				InterfaceDebugLog( "Empty place " .. ( outval
							? TEXTCOLOR_GREEN .. "found" .. LLCOLOR_MAIN .. " in panel " .. outval
							: TEXTCOLOR_BRICK .. "not found" .. LLCOLOR_MAIN .. " (false)" ) );
				break;
			default:
				ZCGlobal.Log( LL_Emergency, GetClassName() .. "::DoCommand(). Unknown external interface command type " .. zcSubcommand .. "." );
				break;
		}

		// [McM]: Multiplayer and *ZDoom compatibility...
		interfaceCVar.SetInt( outval );
		ACS_ExecuteAlways( -int( 'ZChecker_SetExternalInterfaceCVar' ), 0, consoleplayer );

		InterfaceDebugLog( "CVar will be set to " .. TEXTCOLOR_BLUE .. outval .. LLCOLOR_MAIN .. " in next tic" .. LLCOLOR_MAIN );
	} // of override void DoCommand() {}

} // of class ZCExternalInterfaceCommand: ZCConsoleCommand {}
