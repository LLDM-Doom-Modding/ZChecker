class ZCCommonPointersInfoPanel: ZCBaseInfoPanelPart {
	Actor testeething;

	override void OnCreate( void ) {
		optionCVarName = "mcm_zchecker_info_mainpointers";
		optionLabel = "Common pointers";
	}

	static clearscope String DecoratePointerString( Actor testee, ZCheckerHandler zchandler, Actor ptr, String desc, String ptrcolor = WHITE ) {
		String str = DARKGRAY .. desc .. "\c-: " .. ptrcolor;

		if ( ptr ) {
			str = str .. ptr.GetClassName() .. DARKGRAY .. " ";

			if ( ptr == players[ consoleplayer ].mo ) {
				str = str .. "(you)";
			} else if ( ptr == testee ) {
				str = str .. "(self)";
			} else {
				bool found = false;

				for ( int i = 0; i < MAXPLAYERS; i++ ) {
					if ( playeringame[ i ] && ptr == players[ i ].mo ) {
						str = str .. "(pl" .. ( i + 1 ) .. ")";
						found = true;
						break;
					}
				}

				if ( !found ) {
					for ( int i = 0; i < MaxTestee; i++ ) {
						if ( ptr == zchandler.Testee[ i ].mo ) {
							str = str .. "(" .. ( i + 1 ) .. ")";
							break;
						}
					}
				}
			} // of else of if ( ptr == testeething ) {}
		} else {
			str = str .. DARKGRAY .. "NULL";
		}

		return str;
	} // of static clearscope String DecoratePointerString( Actor testee, ZCheckerHandler zchandler, Actor ptr, String desc, String ptrcolor = WHITE ) {}

	protected ui String decoratePointerStringUI( Actor ptr, String desc, String ptrcolor = WHITE ) {
		return DecoratePointerString( testeething, handler, ptr, desc, ptrcolor );
	}

	override String GetInfo( Actor thing, ZCheckerField thingfield ) {
		testeething = thing;
		String outstr = "";

		outstr = 
			decoratePointerStringUI( thing.target, "Target", RED ) .. "\n" ..
			decoratePointerStringUI( thing.master, "Master", TEAL ) .. "\n" ..
			decoratePointerStringUI( thing.tracer, "Tracer", ORANGE );

		if ( Inventory( thing ) )
			outstr = outstr .. "\n" .. decoratePointerStringUI( Inventory( thing ).owner, BLACK .. "Inv." .. DARKGRAY .. "Owner", DARKGREEN ) .. "\n";

		return outstr;
	}
} // of class ZCCommonPointersInfoPanel: ZCBaseInfoPanelPart {}

class ZCInteractionPointersInfoPanel: ZCBaseInfoPanelPart_PlayScope {
	override void OnCreate_play( void ) {
		optionCVarName = "mcm_zchecker_info_levelpointers";
		optionLabel = "Interaction pointers";
	}

	override String GetInfo_play( Actor thing, ZCheckerField thingfield ) {
		Actor linetargeted = thing.GetPointer( thing.player? AAPTR_PLAYER_GETTARGET : AAPTR_LINETARGET );

		return
			ZCCommonPointersInfoPanel.DecoratePointerString( thing, handler, linetargeted, "Linetarget", ICE ) .. "\n" ..
			ZCCommonPointersInfoPanel.DecoratePointerString( thing, handler, thing.BlockingMobj, "Blocking" );
	}
}

class ZCDeferredLinksPointersInfoPanel: ZCCommonPointersInfoPanel {
	override void OnCreate( void ) {
		optionCVarName = "mcm_zchecker_info_dfrlinkpointers";
		optionLabel = "Deferred link pointers";
	}

	override String GetInfo( Actor thing, ZCheckerField thingfield ) {
		testeething = thing;

		return
			decoratePointerStringUI( thing.LastHeard, "LastHeard", OLIVE ) .. "\n" ..
			decoratePointerStringUI( thing.LastEnemy, "LastEnemy", RED ) .. "\n" ..
			decoratePointerStringUI( thing.LastLookActor, "LastLook", OLIVE ) .. "\n" ..
			decoratePointerStringUI( thing.Poisoner, "Poisoner", GREEN );
	}
}

class ZCOtherPointersInfoPanel: ZCCommonPointersInfoPanel {
	override void OnCreate( void ) {
		optionCVarName = "mcm_zchecker_info_otherpointers";
		optionLabel = "Other pointers";
	}

	override String GetInfo( Actor thing, ZCheckerField thingfield ) {
		testeething = thing;
		String outstr = "";

		if ( Weapon( thing ) ) {
			outstr =
				decoratePointerStringUI( Weapon( thing ).Ammo1, BLACK .. "Weap." .. DARKGRAY .. "Ammo1", GRAY ) .. "\n" ..
				decoratePointerStringUI( Weapon( thing ).Ammo2, BLACK .. "Weap." .. DARKGRAY .. "Ammo2", GRAY ) .. "\n" ..
				decoratePointerStringUI( Weapon( thing ).SisterWeapon, BLACK .. "Weap." .. DARKGRAY .. "SisterWeap", BRICK ) .. "\n";
		}

		return outstr ..
			decoratePointerStringUI( thing.Alternative, "Alternative", BRICK ) .. "\n" ..
			decoratePointerStringUI( thing.Goal, "Goal", FIRE ) .. "\n" ..
			decoratePointerStringUI( thing.Inv, "Inv&", GRAY ) .. "\n" ..
			decoratePointerStringUI( thing.snext, "SecNext&", BROWN );
	}
}
