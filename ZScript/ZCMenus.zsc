//

class ZCOptionMenuPanels: OptionMenu {
	enum EPanelMenuActionTypes {
		PMAT_None			= -1,
		PMAT_EnterSubmenu	= 0,
		PMAT_MoveItemUp,
		PMAT_MoveItemDown,

		PMAT_Quantity
	};

	transient CVar panelsorder;
	//transient CVar firstPanelItemPosCVar, lastPanelItemPosCVar;
	int firstPanelItemPos, lastPanelItemPos;

	const DARKGRAY = TEXTCOLOR_DARKGRAY;
	const GRAY = TEXTCOLOR_GRAY;
	const GOLD = TEXTCOLOR_GOLD;


	private OptionMenuItemStaticText AddStaticText( String label = " " ) {
		return new( "OptionMenuItemStaticText" ).Init( label );
	}

	private OptionMenuItemOption AddOption( String label, Name command, Name values ) {
		return new( "OptionMenuItemOption" ).Init( label, command, values );
	}

	private void ReinitMenuHeaderPart( OptionMenuDescriptor desc ) {
        desc.mItems.Clear();

		desc.mItems.Push( AddStaticText() );
		desc.mItems.Push( AddStaticText( GOLD .. "Information panels settings:" ) );
		desc.mItems.Push( AddStaticText( DARKGRAY .. "Enter sumbenu with " .. GRAY .. "<F4>" .. DARKGRAY .. ", " .. GRAY .. "<space>" .. DARKGRAY .. ", '" .. GRAY .. "E" .. DARKGRAY .. "' or " .. GRAY .. "<tab>" .. DARKGRAY .. ":" ) );
		desc.mItems.Push( AddStaticText() );
	}

	private void ReinitMenuLastPart( OptionMenuDescriptor desc ) {
		desc.mItems.Push( AddStaticText() );
		desc.mItems.Push( AddStaticText( GOLD .. "General settings:" ) );
		desc.mItems.Push( new( "OptionMenuItemSubmenu" ).Init( "Information panel settings", "mcm_ZChecker_InfoPanelControl" ) );
		desc.mItems.Push( AddOption( "Log level", "mcm_zchecker_loglevel", "mcm_zchecker_LogLevels" ) );

		desc.mItems.Push( AddStaticText() );
		desc.mItems.Push( AddStaticText( GOLD .. "\"Everything\" map settings:" ) );
		desc.mItems.Push( AddOption( "Spawn +STEALTH actors: ", "mcm_zchecker_ev_spawnstealth", "YesNo" ) );
		desc.mItems.Push( AddOption( "Spawn +INVISIBLE actors: ", "mcm_zchecker_ev_spawninvisible", "YesNo" ) );
		desc.mItems.Push( AddOption( "Spawn actors with sprite \"PLYC*\": ", "mcm_zchecker_ev_spawnplyc", "YesNo" ) );
		desc.mItems.Push( AddOption( "Spawn actors with sprite \"TNT1A0\": ", "mcm_zchecker_ev_spawntnt1a0", "YesNo" ) );
	}
	
	void SetPanelOptionsOrder( OptionMenuDescriptor desc ) {
		String curorder = "";

		if ( !panelsorder )
			panelsorder = CVar.GetCVar( "mcm_zchecker_infopanelsorder", players[ consoleplayer ] );

		for ( int i = firstPanelItemPos; i < lastPanelItemPos; i++ ) {
			ZCOptionMenuItemInfopanel paneloption = ZCOptionMenuItemInfopanel( desc.mItems[ i ] );

			if ( paneloption ) {
				curorder = curorder .. paneloption.panelclass.GetClassName() .. ",";
				ZCGlobal.UILog( LL_Detailed, GetClassName() .. "::SetPanelOptionsOrder(). Saved \"" .. TEXTCOLOR_GREEN .. paneloption.panelclass.GetClassName() .. "\c-\"." );
			}
		}

		panelsorder.SetString( curorder );
	}

	private int InsertMenuPanelPart( ZCBaseInfoPanelPart panel, OptionMenuDescriptor desc ) {
		ZCOptionMenuItemInfopanel item = new( "ZCOptionMenuItemInfopanel" );
		ZCOptionMenuItemInfopanelSubmenu submenuItem = NULL;

		if ( panel.optionSubmenuName ) {
			submenuItem = new( "ZCOptionMenuItemInfopanelSubmenu" );
			submenuItem.Init( item, panel );
		}

		// [McM]: I think it's much easier to pass only a "ZCBaseInfoPanelPart *panel".
		item.Init( panel.optionLabel, panel.optionCVarName, panel.optionSubmenuName, panel.GetClass() );
		desc.mItems.Push( item );

		if ( panel.optionSubmenuName ) {
			desc.mItems.Push( submenuItem );
			return 2; // Items offset (+2, option and its submenu);
		}

		return 1; // Items offset (+1, option only).
	}

	void ReinitMenuPanels( OptionMenuDescriptor desc, ZCheckerHandler handler ) {
		Array<String> neworder;
		uint warningsAmount = 0;
		uint addedItemsAmount = 0;

		if ( !panelsorder )
			panelsorder = CVar.GetCVar( "mcm_zchecker_infopanelsorder", players[ consoleplayer ] );

		panelsorder.GetString().Split( neworder, ",", TOK_SKIPEMPTY );

		// [McM]: It mustn't be here, it must take panels order from something correlating with real visual panels (!!!).
		for ( int i = 0; i < neworder.Size(); i++ ) {
			class<Object> curclass = neworder[ i ];

			if ( curclass is "ZCBaseInfoPanelPart" ) {
				if ( !warningsAmount ) {
					bool found = false;

					for ( int j = 0; j < handler.zcInfoPanelClasses.Size(); j++ ) {
						if ( handler.zcInfoPanelClasses[ j ].GetClass() == curclass ) {
							addedItemsAmount += InsertMenuPanelPart( handler.zcInfoPanelClasses[ j ], desc );
							found = true;
							ZCGlobal.ClearscopeLog( LL_Main, GetClassName() .. "::GetPanelOptionsOrder(). " .. TEXTCOLOR_GREEN .. "Added Panel class \"" .. neworder[ i ] .. "\"." );
							break;
						}
					}

					if ( !found )
						ZCGlobal.UILog( LL_Detailed, GetClassName() .. "::GetPanelOptionsOrder(). " .. DARKGRAY .. "Class \"" .. GRAY .. neworder[ i ] .. DARKGRAY .. "\" vanished." );
				}
			} else if ( curclass ) {
				warningsAmount++;
				ZCGlobal.UILog( LL_Detailed, GetClassName() .. "::GetPanelOptionsOrder(). " .. DARKGRAY .. "Class \"" .. GRAY .. neworder[ i ] .. DARKGRAY .. "\" isn't a Panel." );
			} else {
				warningsAmount++;
				ZCGlobal.UILog( LL_Detailed, GetClassName() .. "::GetPanelOptionsOrder(). " .. DARKGRAY .. "Cannot find Panel class \"" .. GRAY .. neworder[ i ] .. DARKGRAY .. "\"." );
			}
		}

		if ( warningsAmount )
			ZCGlobal.UILog( LL_Main, GetClassName() .. "::GetPanelOptionsOrder(). It seems like data was corrupted (" .. TEXTCOLOR_FIRE .. warningsAmount .. " warnings\c-). Reinitialization..." );

		// Reinitialization (if neccesary):
		if ( addedItemsAmount == 0 || warningsAmount > 0 ) {
			ZCGlobal.UILog( LL_Debug, GetClassName() .. "::GetPanelOptionsOrder(). Reinitialization." );

			desc.mItems.Delete( desc.mItems.Size() - addedItemsAmount, addedItemsAmount );

    		for ( int i = 0; i < handler.zcInfoPanelClasses.Size(); i++ ) {
				lastPanelItemPos += InsertMenuPanelPart( handler.zcInfoPanelClasses[ i ], desc );
			}

			//firstPanelItemPosCVar.SetInt( firstPanelItemPos );
			//lastPanelItemPosCVar.SetInt( lastPanelItemPos );
		}
	}

	override void Init( Menu parent, OptionMenuDescriptor desc ) {
		ZCheckerHandler handler = ZCheckerHandler( StaticEventHandler.Find( "ZCheckerHandler" ) );

		//firstPanelItemPosCVar = CVar.GetCVar( "mcm_zcheckerinternal_ui_firstinfopanelpos", players[ consoleplayer ] );
		//lastPanelItemPosCVar = CVar.GetCVar( "mcm_zcheckerinternal_ui_lastinfopanelpos", players[ consoleplayer ] );

		ReinitMenuHeaderPart( desc );

		firstPanelItemPos = 4;
		lastPanelItemPos = 4;

		if ( !handler ) {
			ZCGlobal.ClearscopeLog( LL_Emergency, GetClassName() .. "::Init(). Cannot locate ZChecker static event handler." );
			desc.mItems.Push( AddStaticText( TEXTCOLOR_FIRE .. "Cannot locate ZChecker static event handler." ) );
		} else {
			ReinitMenuPanels( desc, handler );
		}

		ReinitMenuLastPart( desc );

		Super.Init( parent, desc );
	} // of override void Init( Menu parent, OptionMenuDescriptor desc ) {}


	override bool OnUIEvent( UIEvent e ) {
		int curpos = mDesc.mSelectedItem;
		ZCOptionMenuItemInfopanel curitem = NULL;
		if ( curpos > 0 )
			curitem = ZCOptionMenuItemInfopanel( mDesc.mItems[ curpos ] );

		//console.printf( "e.Type: " .. e.Type .. ", e.KeyChar: " .. e.KeyChar .. ", e.KeyString: \"" .. e.KeyString .. "\" (len " .. e.KeyString.Length() .. ")" );

		EPanelMenuActionTypes actiontype = PMAT_None;
		int key = e.KeyChar;

		if ( e.Type == e.Type_KeyDown ) {
			if ( key == e.Key_F3 || key == e.Key_F4 || key == e.Key_Tab )
				actiontype = PMAT_EnterSubmenu;

		} else if ( e.Type == e.Type_Char ) {
			if ( key == 0x45 || key == 0x65 || key == 0x20 )
				actiontype = PMAT_EnterSubmenu;
			else if ( key == 0x2D )
				actiontype = PMAT_MoveItemUp;
			else if ( key == 0x2B )
				actiontype = PMAT_MoveItemDown;
		} else if ( e.Type == e.Type_WheelUp ) {
			actiontype = PMAT_MoveItemUp;
		} else if ( e.Type == e.Type_WheelDown ) {
			actiontype = PMAT_MoveItemDown;
		}

		if ( curitem && actiontype != PMAT_None && curpos < lastPanelItemPos && curpos >= firstPanelItemPos ) {
			int moveOffset = ( curitem.mSubmenu? 2 : 1 );

			if ( actiontype == PMAT_MoveItemUp || actiontype == PMAT_MoveItemDown ) {
				bool movePrepared = false;

				if ( actiontype == PMAT_MoveItemUp ) {
					int newpos = curpos - ( 1 + !!( mDesc.mItems[ curpos - 1 ] is "ZCOptionMenuItemInfopanelSubmenu" ) );

					curitem = ZCOptionMenuItemInfopanel( mDesc.mItems[ newpos ] );
					moveOffset = ( curitem && curitem.mSubmenu? 2 : 1 );

					movePrepared = ( curpos - moveOffset >= firstPanelItemPos );

					curpos = newpos;
				} else {
					movePrepared = ( curpos + moveOffset < lastPanelItemPos );
				}

				if ( movePrepared ) {
					OptionMenuItem movingitem = NULL;

					int curMoveOffset = moveOffset;

					if ( ZCOptionMenuItemInfopanel( mDesc.mItems[ curpos + moveOffset ] ).mSubmenu )
						moveOffset++;

					while ( curMoveOffset --> 0 ) {
						movingitem = mDesc.mItems[ curpos ];
						mDesc.mItems.Delete( curpos, 1 );
						mDesc.mItems.Insert( curpos + moveOffset, movingitem );
					}

					Menu.GetCurrentMenu().MenuEvent( ( actiontype == PMAT_MoveItemUp? MKEY_Up : MKEY_Down ), false );
					Menu.MenuSound( "menu/change" );
				}

			} else if ( curitem.mSubmenu && ( actiontype == PMAT_EnterSubmenu ) ) {
				// Tab, F4, 'e', 'E' and space opens a submenu (if any).
				Menu.MenuSound( "menu/choose" );
				Menu.SetMenu( curitem.mSubmenu );
				return true;
			}
		} // of if ( curitem && actiontype != PMAT_None && curpos < lastPanelItemPos && curpos >= firstPanelItemPos ) {}

		return Super.OnUIEvent( e );
	} // of override bool OnUIEvent( UIEvent e ) {}

	override void OnDestroy() {
		SetPanelOptionsOrder( mDesc );
	}

} // of class ZCOptionMenuPanels: OptionMenu {}


class ZCOptionMenuItemInfopanel: OptionMenuItemOption {
	Name mSubmenu;
	class<ZCBaseInfoPanelPart> panelclass;

	ZCOptionMenuItemInfopanel Init( String label, Name command, Name submenuName, class<ZCBaseInfoPanelPart> initPanelClass ) {
		Super.Init( label, command, 'OnOff' );
		mSubmenu = submenuName;
		panelclass = initPanelClass;

		return self;
	}
}

class ZCOptionMenuItemInfopanelSubmenu: OptionMenuItemStaticText {
	ZCOptionMenuItemInfopanel masterMenuItem;
	ZCBaseInfoPanelPart masterInfoPanel;
	ZCOptionMenuPanels masterMenu;

	OptionMenuDescriptor subdesc;

	ZCOptionMenuItemInfopanelSubmenu Init( ZCOptionMenuItemInfopanel masteritem, ZCBaseInfoPanelPart infopanel ) {
		masterMenuItem = masteritem;
		masterInfoPanel = infopanel;
		mLabel = "";

		masterMenu = ZCOptionMenuPanels( Menu.GetCurrentMenu() );
		subdesc = OptionMenuDescriptor( MenuDescriptor.GetDescriptor( infopanel.optionSubmenuName ) );	

		return self;
	}

	override int Draw( OptionMenuDescriptor desc, int y, int indent, bool selected ) {
		bool masterItemSelected = false;

		if ( desc && desc.mSelectedItem > 0 ) {
			mLabel = masterInfoPanel.GetSubmenuLabel( masterMenuItem, subdesc );
			masterItemSelected = ( desc.mItems[ desc.mSelectedItem ] == masterMenuItem );
		}

		drawLabel( indent, y, masterItemSelected? OptionMenuSettings.mFontColorSelection : Font.CR_DARKGRAY );

		return indent;
	}

	/*override bool MouseEvent( int type, int x, int y ) {
		if ( type == Menu.MOUSE_Click && masterMenu ) {
			for ( int i = masterMenu.firstInfoPanelPos; i < masterMenu.lastInfoPanelPos; i++ ) {
				if ( desc.mItems[ i ] == masterMenuItem ) {
					desc.mSelectedItem = i;
					break;
				}
			}

			return Menu.GetCurrentMenu().MenuEvent( Menu.MKEY_Enter, true );
		}

		return true;
	}*/
}
