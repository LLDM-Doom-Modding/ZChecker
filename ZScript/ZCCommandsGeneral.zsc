//
// General ZChecker console commands: "zchelp", "zcadd" and "zcrem".
//

class ZCHelpCommand: ZCConsoleCommand {
	const HEADERCOLOR = ZCTooltipClass.HEADER;

	bool verboseHelp;
	ZCConsoleCommand infoclass;

	override void InitCCMD() {
		SetupCCMDInterface(
			"zc_help",
			"$ZCHELP_HELP_TITLE",
			"$ZCHELP_HELP_DESC"
		);
	}

	override bool HandleArguments() {
		verboseHelp = false;
		infoclass = NULL;
		bool outValue = ( ccmd.args.Size() == 0 );

		if ( ccmd.args.Size() == 1 ) {
			String arg = ccmd.args[ 0 ];
			arg.ToLower();

			if ( arg == "a" || arg == "all" || arg == "-a" || arg == "-v" || arg == "-all" || arg == "--all" ) {
				verboseHelp = outValue = true;
			} else {

				if ( arg.Left( 2 ) == "zc" )
					arg = arg.Mid( 2, arg.Length() - 1 );

				for ( int i = 0; i < ccmd.handler.zcConsoleHandleClasses.Size() && !outValue; i++ ) {
					ZCConsoleCommand curccmd = ZCConsoleCommand( ccmd.handler.zcConsoleHandleClasses[ i ] );

					if ( curccmd ) {
						Array<String> aliases;
						aliases.Clear();

						curccmd.ccmdInterfaceData.helpHeader.Split( aliases, ";", TOK_SKIPEMPTY );

						for ( int j = 0; j < aliases.Size(); j++ ) {
							String curalias = aliases[ j ];
							int firstSpaceIndex = curalias.IndexOf( " " );

							if ( firstSpaceIndex >= 0 )
								curalias.Truncate( firstSpaceIndex );
							if ( curalias.Length() > 2 )
								curalias = curalias.Mid( 2, curalias.Length() - 1 );

							ZCGlobal.Log( LL_Debug, GetClassName() .. "::HandleArguments(). Arg \"" .. arg .. "\" compare alias \"" .. curalias .. "\"." );

							if ( arg ~== curalias ) {
								ZCGlobal.Log( LL_Debug, GetClassName() .. "::HandleArguments(). Usage search for \"" .. arg .. "\": found CCMD " .. curccmd.GetClassName() .. "." );
								infoclass = curccmd;
								outValue = true;
								break;
							}
						} // of for ( int j = 0; j < aliases.Size(); j++ ) {}

					} // of if ( curccmd ) {}
				} // of for ( int i = 0; i < ccmd.handler.zcConsoleHandleClasses.Size() && !outValue; i++ ) {}

				if ( !outValue )
					LogLocalize2Str( LL_Main | LL_NoDot, "ZCHELP_CANNOTFIND", ccmd.args[ 0 ] );
			}
		}

		return outValue;
	}

	override void DoCommand( void ) {
		// Description and credits:
		if ( verboseHelp ) {
			console.printf( ZCGlobal.Locz( "ZCHELP_VERBOSETITLE" ), ZCheckerVersion );

			//console.printf( HEADERCOLOR .. "ZChecker " .. TEXTCOLOR_BLUE .. "v" .. ZCheckerVersion .. HEADERCOLOR .. ".\n" ..
			//		"  (c) " .. TEXTCOLOR_WHITE .. "JSO_x" .. HEADERCOLOR .. " a.k.a. " .. TEXTCOLOR_WHITE .. "Morthimer McMare" .. HEADERCOLOR .. ";\n" ..
			//		"  (c) " .. TEXTCOLOR_WHITE .. "LLDM-Doom-modding" .. HEADERCOLOR .. " team" .. ".\n\n" );
		}

		if ( infoclass ) {
			String helpstr = infoclass.GetHelpString();

			helpstr.Replace( "\n", "\n" .. HEADERCOLOR .. "| " .. LLCOLOR_MAIN );
			console.printf( HEADERCOLOR .. "| " .. LLCOLOR_MAIN .. helpstr );

			if ( infoclass.ccmdInterfaceData.helpTooltip ) {
				console.printf( HEADERCOLOR .. "|\n" .. HEADERCOLOR .. "| ".. infoclass.ccmdInterfaceData.helpTooltip.GetHelpString() );
				console.printf( "\n" .. HEADERCOLOR .. "\\-= =-------------\n" .. HEADERCOLOR .. "| " .. LLCOLOR_MAIN .. helpstr .. HEADERCOLOR .. "\n/--=--=--=--=--=--\n\n" );
			} else {
				console.printf( "\n" );
			}

		} else {
			console.printf( ZCGlobal.Locz( verboseHelp? "ZCHELP_HEADERALLCCMDS" : "ZCHELP_HEADERCOMMONCCMDS" ) );

			ZCConsoleClass curCC = NULL; // Also separators.

			for ( int i = 0; i < ccmd.handler.zcConsoleHandleClasses.Size(); i++ ) {
				curCC = ccmd.handler.zcConsoleHandleClasses[ i ];

				if ( verboseHelp || ( curCC.zcFlags & CCF_Important ) )
					console.printf( curCC.GetHelpString() .. "\n\n" );
			}
		} // of else of if ( infoclass ) {}

	} // of override void DoCommand( void ) {}

} // of class ZCHelpCommand: ZCConsoleCommand {}


class ZCAddCommand: ZCConsoleCommand {
	enum ESpecialAddTypes {
		SAT_Error = 0,
		SAT_Normal,
		SAT_Self,
		SAT_Weapon,
		SAT_Camera,
		SAT_Force
	};

	ESpecialAddTypes zcSpecialAddType;
	int zcPos;

	override void InitCCMD() {
		SetupCCMDInterface(
			"zc_add",
			"$ZCADD_HELP_TITLE",
			"$ZCADD_HELP_DESC",
			'ZCTooltipAddCommand'
		);
	}

	// Finds next free testee place ("-1" if not found):
	static int FindFreeTesteePlace( ZCheckerCCMDInfo fccmd ) {
		int outpos = -1;

		for ( int i = 0; i < MaxTestee; i++ ) {
			if ( fccmd.handler.Testee[ i ].mo == NULL ) {
				outpos = i;
				break;
			}
		}

		return outpos;
	} // of static int FindFreeTesteePlace( ZCheckerCCMDInfo fccmd ) {}


	// Handles (removes/warns about) all of the duplicates of the specified 
	//actor, excluding the "newSupposedPlace" position.
	//
	// Returns new place (panel position):
	// - If all is OK, in range [0; (MaxTestee - 1)];
	// - Returns "newSupposedPlace" if no duplicates found.
	static int HandleDuplicateActorFields( ZCheckerCCMDInfo fccmd, Actor testthing, int newSupposedPlace ) {
		int newplace = newSupposedPlace;
		int sameActorBehaviourSetting = CVar.GetCVar( "mcm_zchecker_zcadd_sameactor_behaviour" ).GetInt();

		bool isFirstDup = false;

		// Search for duplicates:
		for ( int i = 0; i < MaxTestee; i++ ) {
			ZCheckerField field = fccmd.handler.Testee[ i ];

			if ( field.mo == testthing && i != newSupposedPlace ) {
				// Warn cases (2 and 3):
				if ( sameActorBehaviourSetting >= 2 )
					ZCGlobal.Log( LL_Main, String.Format( ZCGlobal.Locz( "ADD_DUPLICATELINK" ), testthing.GetClassName(), i + 1 ) );

				// Move (preserve unique pointer) cases (0 and 2):
				if ( !( sameActorBehaviourSetting & 1 ) ) {
					if ( newSupposedPlace != -1 || isFirstDup ) {
						field.mo = NULL;
						field.UpdateActorMetainformation( fccmd );
					} else {
						newplace = i;
						isFirstDup = true;
					}
				}
			}
		} // of for ( int i = 0; i < MaxTestee; i++ ) {}

		return newplace;
	} // of static int HandleDuplicateActorFields( ZCheckerCCMDInfo fccmd, Actor testthing, int newSupposedPlace ) {}


	override bool HandleArguments() {
		zcSpecialAddType = SAT_Normal;
		int ccmdArgsSize = ccmd.args.Size();

		// For 0 args: zcPos == "-1" (to check it later).
		bool outValue = ( ccmdArgsSize == 0 );
		zcPos = -1;

		// Next lines ("if {}" block) are hard to understand, but they're right.
		if ( ccmdArgsSize > 0 && ccmdArgsSize <= 2 ) {
			String arg0 = ccmd.args[ 0 ];
			arg0.ToLower();
			String arg0left1 = arg0.Left( 1 );

			zcSpecialAddType = SAT_Error;

			if ( arg0left1 == "s" )
				zcSpecialAddType = SAT_Self;
			else if ( arg0left1 == "w" )
				zcSpecialAddType = SAT_Weapon;
			else if ( arg0left1 == "f" )
				zcSpecialAddType = SAT_Force;
			else if ( arg0.Left( 3 ) == "cam" )
				zcSpecialAddType = SAT_Camera;

			if ( zcSpecialAddType != SAT_Error ) {
				// "zcadd self|weap[on]|force [pos]":

				if ( ccmdArgsSize == 2 ) {
					if ( str2int_Ptr( ccmd.args[ 1 ], +zcPos ) )
						outValue = checkTesteePlace( --zcPos );
				} else {
					outValue = true;
				}
			} else {
				// "zcadd [pos]":

				zcSpecialAddType = SAT_Normal;
				if ( str2int_Ptr( arg0, +zcPos ) )
					outValue = checkTesteePlace( --zcPos );
			}
		} // of if ( ccmd.args.Size() > 0 && ccmd.args.Size() <= 2 ) {

		return outValue;
	}

	override void DoCommand( void ) {
		if ( -1 == zcPos && -1 == FindFreeTesteePlace( ccmd ) ) {
			ZCGlobal.Log( LL_Normal, String.Format( ZCGlobal.Locz( "ZCADD_ADDINSUFFPLACE" ), MaxTestee ) );
			return;
		}

		PlayerInfo player = players[ ccmd.e.Player ];
		Actor newtestee = NULL;

		switch ( zcSpecialAddType ) {
			case SAT_Normal:
				Actor linetracedActor = LinetraceActor( player.mo );

                if ( linetracedActor )
					newtestee = linetracedActor;
				break;

			case SAT_Self:
				newtestee = player.mo;
				break;

			case SAT_Weapon:
				if ( player.ReadyWeapon )
					newtestee = player.ReadyWeapon;
				else
					ZCGlobal.Log( LL_Main, "$ZCADD_NOWEAPON" );
				break;

			case SAT_Force:
				ThinkerIterator it = ThinkerIterator.Create( "Actor" );
				Actor locatedActor = NULL, cur = NULL;
				double mindist = 1e9; // Can't be larger than 65536 * sqrt(3) in GZDoom anyway --N00b

				while ( ( cur = Actor( it.Next() ) ) ) {
					// Skip next actor if it:
					//1) Is the caller (player) himself;
					//2) Is too close to the player's 3D position;
					//3) Has a very small radius;
					//4) Is an item in someone's inventory.

					// [McM] "DVector3::SquaredLength()" is absent in the GZDooms up to v4.5.0.
					if ( cur == player.mo || cur.radius < 1.0 || ( cur.pos - player.mo.pos ).Length() < 1.0 || ( Inventory( cur ) && Inventory( cur ).owner ) )
						continue;
					
					// The following will not work with portals, portal-specific functions will need to be used. --N00b
					vector2 diff = cur.pos.xy - player.mo.pos.xy; // Radius vector of 'cur' in the player's coordinate system, projected on the XY plane.
					double l = diff.length();
					if ( l >= mindist ) { continue; } // If the actor is more distant than 'locatedActor' (the already recorded one), stop calculations & discard the new actor right away.

					vector2 perp = (-diff.y, diff.x) / l; // Unit plane vector normal to 'diff'.

					vector2 a1 = diff + perp * cur.radius, a2 = diff - perp * cur.radius; // Boundary points on the circular 2D hitbox of 'cur'.
					
					// Since points 2) and 3) of the above conditional do not hold, 'a1' and 'a2' form a basis.
					// Using Cramer's formula, find an expression of the player's 2D view ray as a linear combination of 'a1' and 'a2'.
					vector2 coeff = ZCGlobal.BasisCoefficients2( a1, a2, ( cos( player.mo.angle ), sin( player.mo.angle ) ) );
					// Now a1 * coeff.x + a2 * coeff.y = (cos alpha, sin alpha).
					
					// Also check whether 'cur' as a segment parallel to Z intersects the ray or not in the lateral projection. This is more simple.
					double dh = l * tan( -player.mo.pitch ) + ( player.mo.pos.z + player.viewheight /*this does not account for e.g. crouching*/ ) - cur.pos.z;
					
					// To intersect the hitbox diameter (the segment from 'a1' to 'a2'), the view ray must have nonnegative coefficients.
					if ( coeff.x >= 0 && coeff.y >= 0 && dh >= 0 && dh <= cur.height + 4.0 ) {
						locatedActor = cur;
						mindist = l;
						ZCGlobal.Log( LL_Debug, GetClassName() .. "::DoCommand(). Force. " .. TEXTCOLOR_GREEN .. "Actor updated to " .. cur.GetClassName() );
					}
				}

                if ( locatedActor ) {
					if ( ZCGlobal.SpecialZCActorsHandling() ) {
						class<Actor> locatedActorClass = locatedActor.GetClass();

						if ( locatedActorClass == "ZCheckerActorInfo" ) {
							locatedActor = locatedActor.master;
						}
					}

					newtestee = locatedActor;
				} else {
					ZCGlobal.Log( LL_Main, "$ZCADD_FORCENOTFOUND" );
				}

				break;

			case SAT_Camera:
				if ( player.Camera == player.mo )
					ZCGlobal.Log( LL_Detailed, "$ZCADD_CAMERAISPLAYER" );

				newtestee = player.Camera;
				break;

			default:
				ZCGlobal.Log( LL_Emergency, GetClassName() .. "::DoCommand(). Unknown add type \"" .. zcSpecialAddType .. "\" (no actor identifier)." );
				break;
		}

		if ( newtestee ) {
			int newPanelPos = HandleDuplicateActorFields( ccmd, newtestee, zcPos );

			if ( newPanelPos == -1 )
				newPanelPos = FindFreeTesteePlace( ccmd );

			ZCheckerField field = ccmd.handler.Testee[ newPanelPos ];

			String testeeIdentifier = newtestee.GetClassName() .. " <" .. newtestee .. ">";

			if ( field.mo != newtestee ) {
				field.mo = newtestee;
				field.UpdateActorMetainformation( ccmd );

				switch ( zcSpecialAddType ) {
					case SAT_Normal:
						LogLocalize2Str( LL_Detailed, "ZCADD_SUCCESSCOMMON", testeeIdentifier );
						break;
					case SAT_Self:
						LogLocalize2Str( LL_Detailed, "ZCADD_SUCCESSPLAYER", testeeIdentifier );
						break;
					case SAT_Weapon:
						LogLocalize2Str( LL_Detailed, "ZCADD_SUCCESSWEAPON", testeeIdentifier );
						break;
					case SAT_Force:
						LogLocalize2Str( LL_Detailed, "ZCADD_SUCCESSFORCED", testeeIdentifier );
						break;
					case SAT_Camera:
						LogLocalize2Str( LL_Detailed, "ZCADD_SUCCESSCAMERA", testeeIdentifier );
						break;
					default:
						ZCGlobal.Log( LL_Emergency, GetClassName() .. "::DoCommand(). Unknown add type \"" .. zcSpecialAddType .. "\". Identifier \"" .. testeeIdentifier .. "\"" );
						break;
				}
			} else {
				ZCGlobal.Log( LL_Detailed, String.Format( ZCGlobal.Locz( "ZCADD_USINGPREVLINK" ), newPanelPos + 1, testeeIdentifier ) );
			}

		} // of if ( newtestee ) {}
	} // of override void DoCommand( void ) {}

} // of class ZCAddCommand: ZCConsoleCommand {}

class ZCRemCommand: ZCConsoleCommand {
	int zcPos;

	override void InitCCMD() {
		SetupCCMDInterface(
			"zc_rem",
			"$ZCREM_HELP_TITLE",
			"$ZCREM_HELP_DESC"
		);
	}

	override bool HandleArguments() {
		int ccmdArgsSize = ccmd.args.Size();
		zcPos = -1;

		bool outValue = ( ccmdArgsSize == 0 );

		if ( ccmdArgsSize == 1 ) {
			if ( str2int_Ptr( ccmd.args[ 0 ], +zcPos ) )
				outValue = checkTesteePlace( --zcPos );
		}

		return outValue;
	}

	override void DoCommand( void ) {
		if ( zcPos != -1 ) {
			Actor testee = ccmd.handler.Testee[ zcPos ].mo;
			if ( testee ) {
				ZCGlobal.Log( LL_Detailed, String.Format( ZCGlobal.Locz( "ZCREM_SUCCESS" ), testee.GetClassName(), "" .. testee, zcPos + 1 ) );
				ccmd.handler.Testee[ zcPos ].mo = NULL;

				ccmd.handler.UpdateInternalClassnameByField( zcPos );
			} else {
				ZCGlobal.Log( LL_Detailed, String.Format( ZCGlobal.Locz( "ZCREM_EMPTYPOS" ), zcPos + 1 ) );
			}
		} else {
			for ( int i = 0; i < MaxTestee; i++ )
				ccmd.handler.Testee[ i ].mo = NULL;

			ZCGlobal.Log( LL_Detailed, "$ZCREM_SUCCESSTOTAL" );
		}
	}
} // of class ZCRemCommand: ZCConsoleCommand {}

