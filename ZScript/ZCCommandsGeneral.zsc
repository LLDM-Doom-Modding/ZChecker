class ZCHelpCommand: ZCConsoleCommand {
	bool verboseHelp;
	ZCConsoleCommand infoclass;

	override void InitCCMD() {
		SetupCCMDInterface(
			"zc_help",
			"zchelp [<command> | a[ll]|-a|-v]",
			"This help. If <command> is provided, prints out a help for a specific command (in most cases with examples). Else, if <all> output is enabled, displays general complete help."
		);
	}

	override bool HandleArguments() {
		verboseHelp = false;
		infoclass = NULL;
		bool outValue = ( ccmd.args.Size() == 0 );

		if ( ccmd.args.Size() == 1 ) {
			String arg = ccmd.args[ 0 ];
			arg.ToLower();

			if ( arg == "a" || arg == "all" || arg == "-a" || arg == "-v" ) {
				verboseHelp = outValue = true;
			} else {

				if ( arg.Left( 2 ) == "zc" )
					arg = arg.Mid( 2, arg.Length() - 1 );

				for ( int i = 0; i < ccmd.handler.zcConsoleHandleClasses.Size() && !outValue; i++ ) {
					ZCConsoleCommand curccmd = ZCConsoleCommand( ccmd.handler.zcConsoleHandleClasses[ i ] );

					if ( curccmd ) {
						Array<String> aliases;
						aliases.Clear();

						curccmd.ccmdInterfaceData.helpHeader.Split( aliases, ";", TOK_SKIPEMPTY );

						for ( int j = 0; j < aliases.Size(); j++ ) {
							String curalias = aliases[ j ];
							int firstSpaceIndex = curalias.IndexOf( " " );

							if ( firstSpaceIndex >= 0 )
								curalias.Truncate( firstSpaceIndex );
							if ( curalias.Length() > 2 )
								curalias = curalias.Mid( 2, curalias.Length() - 1 );

							ZCGlobal.Log( LL_Debug, GetClassName() .. "::HandleArguments(). Arg \"" .. arg .. "\" compare alias \"" .. curalias .. "\"." );

							if ( arg ~== curalias ) {
								ZCGlobal.Log( LL_Debug, GetClassName() .. "::HandleArguments(). Usage search for \"" .. arg .. "\": found CCMD " .. curccmd.GetClassName() .. "." );
								infoclass = curccmd;
								outValue = true;
								break;
							}
						} // of for ( int j = 0; j < aliases.Size(); j++ ) {}

					} // of if ( curccmd ) {}
				} // of for ( int i = 0; i < ccmd.handler.zcConsoleHandleClasses.Size() && !outValue; i++ ) {}

				if ( !outValue )
					ZCGlobal.Log( LL_Main | LL_NoDot, TEXTCOLOR_TEAL .. "ZChecker help: " .. TEXTCOLOR_FIRE .. "cannot find ZChecker console command " .. LLCOLOR_MAIN .. "\"" .. ccmd.args[ 0 ] .. "\"." );

				/*ZCGlobal.Log( LL_Main | LL_NoDot, TEXTCOLOR_TEAL .. "ZChecker help: " .. ( outValue
						? TEXTCOLOR_SAPPHIRE .. " === Visual " .. TEXTCOLOR_DARKRED .. "separator ===" .. "\n\n"
						: TEXTCOLOR_FIRE .. "cannot find ZChecker console command " .. LLCOLOR_MAIN .. "\"" .. ccmd.args[ 0 ] .. "\"."
					) );*/
			}
		}

		return outValue;
	}

	override void DoCommand( void ) {
		// Description and credits:
		if ( verboseHelp ) {
			console.printf( TEXTCOLOR_SAPPHIRE .. "ZChecker " .. TEXTCOLOR_BLUE .. "v" .. ZCheckerVersion
					.. "\c- by " .. TEXTCOLOR_WHITE .. "JSO_x\c- a.k.a. " .. TEXTCOLOR_WHITE .. "Morthimer McMare\c-.\n\n" );
		}

		if ( infoclass ) {
			String helpstr = infoclass.GetHelpString();

			helpstr.Replace( "\n", TEXTCOLOR_SAPPHIRE .. "\n| " .. LLCOLOR_MAIN );
			console.printf( TEXTCOLOR_SAPPHIRE .. "| " .. LLCOLOR_MAIN .. helpstr );

			if ( infoclass.ccmdInterfaceData.helpTooltip ) {
				console.printf( infoclass.ccmdInterfaceData.helpTooltip.GetHelpString() );
				console.printf( TEXTCOLOR_SAPPHIRE .. "\\-= =-------------\n| " .. LLCOLOR_MAIN .. helpstr .. TEXTCOLOR_SAPPHIRE .. "\n/--=--=--=--=--=--\n\n" );
			}
		} else {
			console.printf( TEXTCOLOR_WHITE .. "Available commands, " .. ( verboseHelp ? "complete list" : "common used" ) .. ":\n\n" );

			ZCConsoleClass curCC = NULL; // Also separators.

			for ( int i = 0; curCC = ccmd.handler.GetZCConsoleClass( i ); i++ )
				if ( verboseHelp || ( curCC.zcFlags & CCF_Important ) )
					console.printf( curCC.GetHelpString() .. "\n\n" );
		}
	}
} // of class ZCHelpCommand: ZCConsoleCommand {}


class ZCAddCommand: ZCConsoleCommand {
	enum ESpecialAddTypes {
		SAT_Error = 0,
		SAT_Normal,
		SAT_Self,
		SAT_Weapon,
		SAT_Force
	};

	ESpecialAddTypes zcSpecialAddType;
	int zcPos;

	override void InitCCMD() {
		SetupCCMDInterface(
			"zc_add",
			"zcadd [self|weap[on]|force] [<pos>];zcaddself [<pos>];zcaddweap [<pos>];zcaddf [<pos>];zcaddlistget [<index>] [<pos>]",
			"Add a linetarget/current player/current weapon/non-solid linetarget into list. [<pos>] is a place number to set to; if omitted, first empty slot will be used.",
			'ZCTooltipAddCommand'
		);
	}

	override bool HandleArguments() {
		zcSpecialAddType = SAT_Normal;

		// For 0 args: zcPos == "-1" (to check it later).
		bool outValue = ( ccmd.args.Size() == 0 );
		zcPos = -1;

		// Next lines ("if {}" block) are hard to understand, but they're right.
		if ( ccmd.args.Size() > 0 && ccmd.args.Size() <= 2 ) {
			String arg0 = ccmd.args[ 0 ];

			zcSpecialAddType = SAT_Error;

			if ( arg0 ~== "self" )
				zcSpecialAddType = SAT_Self;
			else if ( arg0 ~== "weap" || arg0 ~== "weapon" )
				zcSpecialAddType = SAT_Weapon;
			else if ( arg0 ~== "force" )
				zcSpecialAddType = SAT_Force;

			if ( zcSpecialAddType != SAT_Error ) {
				// "zcadd self|weap[on]|force [pos]":

				if ( ccmd.args.Size() == 2 ) {
					if ( str2int_Ptr( ccmd.args[ 1 ], +zcPos ) )
						outValue = checkTesteePlace( --zcPos );
				} else {
					outValue = true;
				}
			} else {
				// "zcadd [pos]":

				zcSpecialAddType = SAT_Normal;
				if ( str2int_Ptr( arg0, +zcPos ) )
					outValue = checkTesteePlace( --zcPos );
			}
		} // of if ( ccmd.args.Size() > 0 && ccmd.args.Size() <= 2 ) {

		// Find next free testee place ("-1" if not found):
		if ( outValue && zcPos == -1 ) {
			for ( int i = 0; i < MaxTestee && zcPos == -1; i++ )
				if ( ccmd.handler.Testee[ i ].mo == NULL )
					zcPos = i;
		}

		return outValue;
	}

	override void DoCommand( void ) {
		if ( zcPos != -1 ) {
			PlayerInfo player = players[ ccmd.e.Player ];

			ZCheckerField field = ccmd.handler.Testee[ zcPos ];

			switch ( zcSpecialAddType ) {
				case SAT_Normal:
					Actor linetracedActor = LinetraceActor( player.mo );

	                if ( linetracedActor ) {
						field.mo = linetracedActor;
						ZCGlobal.Log( LL_Detailed, "Added actor " .. field.mo.GetClassName() .. " <" .. field.mo .. ">." );
					}
					break;
				case SAT_Self:
					field.mo = player.mo;
					ZCGlobal.Log( LL_Detailed, "Added PlayerPawn actor " .. field.mo.GetClassName() .. " <" .. field.mo .. ">." );
					break;
				case SAT_Weapon:
					if ( player.ReadyWeapon ) {
						field.mo = player.ReadyWeapon;
						ZCGlobal.Log( LL_Detailed, "Added StateProvider actor " .. field.mo.GetClassName() .. " <" .. field.mo .. ">." );
					} else {
						ZCGlobal.Log( LL_Main, "No weapon, cannot add." );
					}
					break;
				case SAT_Force:
					ZCGlobal.Log( LL_Main, "[Work-in-progress command, may behave strangely]." );

					ThinkerIterator it = ThinkerIterator.Create( "Actor" );
					Actor locatedActor = NULL, cur = NULL;

					while ( ( cur = Actor( it.Next() ) ) ) {
						// Skip next actor if it:
						//1) A caller (player) himself;
						//2) Is not in the player field of view; and
						//3) Is an item in someone's inventory.
						if ( cur == player.mo || ( abs( player.mo.AngleTo( cur ) - player.mo.angle ) >= 45.0 ) || ( Inventory( cur ) && Inventory( cur ).owner ) )
							continue;

						// Grab the potential testee actor if the line of 
						//sight intersects or touches its radius (circle).
						// Funny, but right now I haven't written the 
						//Z-exclusion despite of the realisation easiness.
						vector2 plpos = player.mo.pos.xy;
						vector2 curpos = cur.pos.xy;
						double k = tan( player.mo.angle );
						double r = cur.radius;

						double kk = k * k;
						double rr = r * r;
						vector2 plpos2 = ( plpos.x * plpos.x, plpos.y * plpos.y );
						vector2 curpos2 = ( curpos.x * curpos.x, curpos.y * curpos.y );

						//sqrt( k^2 r^2 - k^2 x_c^2 - k^2 x_p^2 + 2 k^2 x_c x_p + 2 k (x_p - x_c) y_p + 2 y_c (k (x_c - x_p) + y_p) + r^2 - y_c^2 - y_p^2 )
						double underSqrt = ( kk * rr - kk * curpos2.x - kk * plpos2.x + 2 * kk * curpos.x * plpos.x + 2 * k * ( plpos.x - curpos.x ) * plpos.y + 2 * curpos.y * ( k * ( curpos.x - plpos.x ) + plpos.y ) );

						if ( ZCGlobal.Get().zcCurLogLevel >= LL_Debug ) {
							ZCGlobal.Log( LL_Debug, "Cur " .. TEXTCOLOR_OLIVE .. cur.GetClassName() .. LLCOLOR_DEBUG .. ": " ..
									String.Format( "plr.pos %s, cur.pos %s, plr.angle %.3f, k %.3f, cur.radius %.3f;  = sqrt( " .. TEXTCOLOR_GRAY .. "%+.3f" .. LLCOLOR_DEBUG .. " ), prev& " .. locatedActor,
									ZCGlobal.squeezeVector2( plpos ), ZCGlobal.squeezeVector2( curpos ), player.mo.angle, k, r, underSqrt )
								);
						}

						if ( underSqrt >= 0 && ( !locatedActor || ( cur.Distance3D( player.mo ) < locatedActor.Distance3D( player.mo ) ) ) ) {
							locatedActor = cur;
							ZCGlobal.Log( LL_Debug, GetClassName() .. "::DoCommand(). Force. " .. TEXTCOLOR_GREEN .. "Actor updated to " .. cur.GetClassName() );
						}
					}

	                if ( locatedActor ) {
						field.mo = locatedActor;
						ZCGlobal.Log( LL_Detailed, "Added an arbitrary actor " .. field.mo.GetClassName() .. " <" .. field.mo .. ">." );
					} else {
						ZCGlobal.Log( LL_Detailed, "Cannot find any suitable actors." );
					}
					break;
				default:
					ZCGlobal.Log( LL_Emergency, GetClassName() .. "::DoCommand(). Unknown add type \"" .. zcSpecialAddType .. "\"." );
					break;
			}

			if ( field.mo ) {
				SetInternalZCheckerString( "$last", field.mo.GetClassName() );
				ccmd.handler.UpdateInternalClassnameByField( zcPos );

				field.UpdateHash( ccmd.e.Player );
			}

		} else {
			ZCGlobal.Log( LL_Normal, "Cannot add target to list, insufficient place. Try set target to list directly via \"zcadd [1.." .. MaxTestee .. "]\"." );
		} // of else of if ( zcPos != -1 ) {}
	}
} // of class ZCAddCommand: ZCConsoleCommand {}

class ZCRemCommand: ZCConsoleCommand {
	int zcPos;

	enum ERemoveSpecial {
		RMSPC_Error = -3,
		RMSPC_Skip = -2,
		RMSPC_All = -1,
		RMSPC_PosFirst = 0,
		RMSPC_PosLast = MaxTestee - 1
	};

	override void InitCCMD() {
		SetupCCMDInterface(
			"zc_rem",
			"zcrem <pos>|a[ll];zcclear [<pos>]",
			"Remove testee from <pos>. Removes whole list if keyword \"all\" is presented in the \"zcrem\"; or if argument is omitted in the \"zcclear\"."
		);
	}

	override bool HandleArguments() {
		zcPos = -1;
		bool outValue = ( ccmd.args.Size() == 0 );

		if ( ccmd.args.Size() == 1 ) {
			if ( str2int_Ptr( ccmd.args[ 0 ], +zcPos ) )
				outValue = checkTesteePlace( --zcPos );
		}

		return outValue;
	}

	override void DoCommand( void ) {
		if ( zcPos != -1 ) {
			Actor testee = ccmd.handler.Testee[ zcPos ].mo;
			if ( testee ) {
				ZCGlobal.Log( LL_Detailed, "Removed actor \"" .. testee.GetClassName() .. "\" <" .. testee .. "> from position " .. zcPos + 1 .. "." );
				ccmd.handler.Testee[ zcPos ].mo = NULL;

				ccmd.handler.UpdateInternalClassnameByField( zcPos );
			} else {
				ZCGlobal.Log( LL_Detailed, "Cannot remove, there's no actor in position " .. zcPos + 1 .. "." );
			}
		} else {
			for ( int i = 0; i < MaxTestee; i++ )
				ccmd.handler.Testee[ i ].mo = NULL;

			ZCGlobal.Log( LL_Detailed, "All actors cleared from the hotbar." );
		}
	}
} // of class ZCRemCommand: ZCConsoleCommand {}

