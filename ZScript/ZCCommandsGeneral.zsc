class ZCHelpCommand: ZCConsoleCommand {
	bool verboseHelp;

	override String GetCommand() {
		return "zc_help";
	}

	override String GetHelpNameString() {
		return "zchelp [all|a|full|-a|-v]";
	}

	override String GetHelpDescString() {
		return "this help. If argument is provided, displays complete help.";
	}

	override bool HandleArguments( ZCheckerCCMDInfo initCCMD ) {
		ccmd = initCCMD;
		verboseHelp = false;
		bool outValue = ( ccmd.args.Size() == 0 );

		if ( ccmd.args.Size() == 1 ) {
			String arg = ccmd.args[ 0 ];

			if ( arg ~== "a" || arg ~== "all" || arg ~== "full" || arg ~== "-a" || arg ~== "-v" )
				verboseHelp = outValue = true;
		}

		return outValue;
	}

	override void DoCommand( void ) {
		// Description and credits:
		if ( verboseHelp ) {
			console.printf( TEXTCOLOR_SAPPHIRE .. "ZChecker " .. TEXTCOLOR_BLUE .. "v" .. ZCheckerVersion
					.. "\c- by " .. TEXTCOLOR_WHITE .. "JSO_x\c- a.k.a. " .. TEXTCOLOR_WHITE .. "Morthimer McMare\c-.\n\n" );
		}

		console.printf( TEXTCOLOR_WHITE .. "Available commands, " .. ( verboseHelp ? "complete list" : "common used" ) .. ":\n\n" );

		ZCConsoleClass curCC = NULL;

		for ( int i = 0; curCC = ccmd.handler.GetZCConsoleClass( i ); i++ )
			if ( verboseHelp || ( curCC.zcFlags & CCF_Important ) )
				console.printf( curCC.GetHelpString() .. "\n\n" );
	}
} // of class ZCHelpCommand: ZCConsoleCommand {}


class ZCAddCommand: ZCConsoleCommand {
	enum ESpecialAddTypes {
		SAT_Error = 0,
		SAT_Normal,
		SAT_Self,
		SAT_Weapon,
		SAT_Force
	};

	ESpecialAddTypes zcSpecialAddType;
	int zcPos;

	override String GetCommand() {
		return "zc_add";
	}

	override String GetHelpNameString() {
		return "zcadd [self|weap[on]|force] [<pos>];zcaddself [<pos>];zcaddweap [<pos>];zcaddf [<pos>]";
	}

	override String GetHelpDescString() {
		return "add a linetarget/current player/current weapon/non-solid linetarget into list. [<pos>] is a place number to set to; if omitted, first empty slot will be used.";
	}

	override bool HandleArguments( ZCheckerCCMDInfo initCCMD ) {
		ccmd = initCCMD;
		zcSpecialAddType = SAT_Normal;

		// For 0 args: zcPos == "-1" (to check it later).
		bool outValue = ( ccmd.args.Size() == 0 );
		zcPos = -1;

		// Next lines ("if {}" block) are hard to understand, but they're right.
		if ( ccmd.args.Size() > 0 && ccmd.args.Size() <= 2 ) {
			String arg0 = ccmd.args[ 0 ];

			zcSpecialAddType = SAT_Error;

			if ( arg0 ~== "self" )
				zcSpecialAddType = SAT_Self;
			else if ( arg0 ~== "weap" || arg0 ~== "weapon" )
				zcSpecialAddType = SAT_Weapon;
			else if ( arg0 ~== "force" )
				zcSpecialAddType = SAT_Force;

			if ( zcSpecialAddType != SAT_Error ) {
				// "zcadd self|weap[on]|force [pos]":

				if ( ccmd.args.Size() == 2 ) {
					if ( str2int_Ptr( ccmd.args[ 1 ], +zcPos ) )
						outValue = checkTesteePlace( --zcPos );
				} else {
					outValue = true;
				}
			} else {
				// "zcadd [pos]":

				zcSpecialAddType = SAT_Normal;
				if ( str2int_Ptr( arg0, +zcPos ) )
					outValue = checkTesteePlace( --zcPos );
			}
		} // of if ( ccmd.args.Size() > 0 && ccmd.args.Size() <= 2 ) {

		// Find next free testee place ("-1" if not found):
		if ( outValue && zcPos == -1 ) {
			for ( int i = 0; i < MaxTestee && zcPos == -1; i++ )
				if ( ccmd.handler.Testee[ i ].mo == NULL )
					zcPos = i;
		}

		return outValue;
	}

	override void DoCommand( void ) {
		if ( zcPos != -1 ) {
			PlayerInfo player = players[ ccmd.e.Player ];

			switch ( zcSpecialAddType ) {
				case SAT_Normal:
					Actor linetracedActor = LinetraceActor( player.mo );

	                if ( linetracedActor ) {
						ccmd.handler.Testee[ zcPos ].mo = linetracedActor;
						ZCGlobal.Log( LL_Detailed, "Added actor " .. ccmd.handler.Testee[ zcPos ].mo.GetClassName() .. " <" .. ccmd.handler.Testee[ zcPos ].mo .. ">." );
					}
					break;
				case SAT_Self:
					ccmd.handler.Testee[ zcPos ].mo = player.mo;
					ZCGlobal.Log( LL_Detailed, "Added PlayerPawn actor " .. ccmd.handler.Testee[ zcPos ].mo.GetClassName() .. " <" .. ccmd.handler.Testee[ zcPos ].mo .. ">." );
					break;
				case SAT_Weapon:
					if ( player.ReadyWeapon ) {
						ccmd.handler.Testee[ zcPos ].mo = player.ReadyWeapon;
						ZCGlobal.Log( LL_Detailed, "Added StateProvider actor " .. ccmd.handler.Testee[ zcPos ].mo.GetClassName() .. " <" .. ccmd.handler.Testee[ zcPos ].mo .. ">." );
					}
					break;
				case SAT_Force:
					ZCGlobal.Log( LL_Main, "[Work-in-progress command, may behave strangely]." );

					ThinkerIterator it = ThinkerIterator.Create( "Actor" );
					Actor locatedActor = NULL, cur = NULL;

					while ( ( cur = Actor( it.Next() ) ) ) {
						// Skip next actor if it:
						//1) A caller (player) himself;
						//2) Is not in the player field of view; and
						//3) Is an item in someone's inventory.
						if ( cur == player.mo || ( abs( player.mo.AngleTo( cur ) - player.mo.angle ) >= 45.0 ) || ( Inventory( cur ) && Inventory( cur ).owner ) )
							continue;

						// Grab the potential testee actor if the line of 
						//sight intersects or touches its radius (circle).
						// Funny, but right now I haven't written the 
						//Z-exclusion despite of the realisation easiness.
						vector2 plpos = player.mo.pos.xy;
						vector2 curpos = cur.pos.xy;
						double k = tan( player.mo.angle );
						double r = cur.radius;

						double kk = k * k;
						double rr = r * r;
						vector2 plpos2 = ( plpos.x * plpos.x, plpos.y * plpos.y );
						vector2 curpos2 = ( curpos.x * curpos.x, curpos.y * curpos.y );

						//sqrt( k^2 r^2 - k^2 x_c^2 - k^2 x_p^2 + 2 k^2 x_c x_p + 2 k (x_p - x_c) y_p + 2 y_c (k (x_c - x_p) + y_p) + r^2 - y_c^2 - y_p^2 )
						double underSqrt = ( kk * rr - kk * curpos2.x - kk * plpos2.x + 2 * kk * curpos.x * plpos.x + 2 * k * ( plpos.x - curpos.x ) * plpos.y + 2 * curpos.y * ( k * ( curpos.x - plpos.x ) + plpos.y ) );

						if ( underSqrt >= 0 && ( !locatedActor || cur.Distance3D( player.mo ) < locatedActor.Distance3D( player.mo ) ) )
							locatedActor = cur;
					}

	                if ( locatedActor ) {
						ccmd.handler.Testee[ zcPos ].mo = locatedActor;
						ZCGlobal.Log( LL_Detailed, "Added an arbitrary actor " .. ccmd.handler.Testee[ zcPos ].mo.GetClassName() .. " <" .. ccmd.handler.Testee[ zcPos ].mo .. ">." );
					} else {
						ZCGlobal.Log( LL_Detailed, "Cannot find any suitable actors." );
					}
					break;
				default:
					ZCGlobal.Log( LL_Emergency, GetClassName() .. "::DoCommand(). Unknown add type \"" .. zcSpecialAddType .. "\"." );
					break;
			}

		} else {
			ZCGlobal.Log( LL_Normal, "Cannot add target to list, insuffienty place. Try set target to list directly with \"zcadd [1.." .. MaxTestee .. "]\"." );
		} // of else of if ( zcPos != -1 ) {}
	}
} // of class ZCAddCommand: ZCConsoleCommand {}

class ZCRemCommand: ZCConsoleCommand {
	int zcPos;

	override String GetCommand() {
		return "zc_rem";
	}

	override String GetHelpNameString() {
		return "zcrem [<pos>]";
	}

	override String GetHelpDescString() {
		return "remove testee(s) from <pos> or from whole list if omitted.";
	}

	override bool HandleArguments( ZCheckerCCMDInfo initCCMD ) {
		ccmd = initCCMD;
		zcPos = -1;
		bool outValue = ( ccmd.args.Size() == 0 );

		if ( ccmd.args.Size() == 1 ) {
			if ( str2int_Ptr( ccmd.args[ 0 ], +zcPos ) )
				outValue = checkTesteePlace( --zcPos );
		}

		return outValue;
	}

	override void DoCommand( void ) {
		if ( zcPos != -1 ) {
			Actor testee = ccmd.handler.Testee[ zcPos ].mo;
			if ( testee ) {
				ZCGlobal.Log( LL_Detailed, "Removed actor \"" .. testee.GetClassName() .. "\" <" .. testee .. "> from position " .. zcPos + 1 .. "." );
				ccmd.handler.Testee[ zcPos ].mo = NULL;
			} else {
				ZCGlobal.Log( LL_Detailed, "Cannot remove, there's no actor in position " .. zcPos + 1 .. "." );
			}
		} else {
			for ( int i = 0; i < MaxTestee; i++ )
				ccmd.handler.Testee[ i ].mo = NULL;

			ZCGlobal.Log( LL_Detailed, "All actors cleared from the hotbar." );
		}
	}
} // of class ZCRemCommand: ZCConsoleCommand {

class ZCInfoPanelControlAliasNode {
	String aliasname;
	Actor thing;
}

class ZCInfoPanelControlCommand: ZCConsoleCommand {
	const GRAY = TEXTCOLOR_GRAY;
	const DARKGRAY = TEXTCOLOR_DARKGRAY;

	enum EPanelControlTypes {
		PCT_Error = 0,
		PCT_Save,
		PCT_Load,
		PCT_Move,
		PCT_Copy,
		PCT_Info
	};

	EPanelControlTypes zcPanelControlType;
	int zcPos, zcNewPos;
	String zcAliasName;

	Array<ZCInfoPanelControlAliasNode> aliases;

	private int FindAliasIndex( String aliasname ) {
		int outValue = -1;

		if ( aliasname != "" ) {
			for ( int i = 0; i < aliases.Size(); i++ ) {
				if ( aliases[ i ].aliasname == aliasname ) {
					outValue = i;
					break;
				}
			}
		}

		return outValue;
	} // of private int FindAliasIndex( String aliasname ) {}

	override String GetCommand() {
		return "zc_infopanelcontrol";
	}

	override String GetHelpNameString() {
		return "zcpanelclt <pos> move|copy <newpos>;zcpanelclt <pos> save|store <aliasname>;zcpanelctl <pos> load <aliasname>;zcpanelctl general|list|<pos> info";
	}

	override String GetHelpDescString() {
		return "Perform extra operations with the information panels.";
	}

	override bool HandleArguments( ZCheckerCCMDInfo initCCMD ) {
		ccmd = initCCMD;
		zcPos = zcNewPos = -1;
		zcAliasName = "";
		zcPanelControlType = PCT_Error;

		int ccmdArgsSize = ccmd.args.Size();
		bool outValue = false;

		if ( ccmdArgsSize == 2 && ccmd.args[ 1 ] ~== "info" ) {
			zcPanelControlType = PCT_Info;
			String arg0 = ccmd.args[ 0 ];

			outValue = ( arg0 ~== "general" || arg0 ~== "list" );

			if ( !outValue && str2int_Ptr( arg0, +zcPos ) )
				outValue = checkTesteePlace( --zcPos );

		} else if ( ccmdArgsSize == 3 ) {
			String argOperation = ccmd.args[ 1 ];
			bool parsingError = false;
			bool parsePosArg = true;
			bool parsePosNewArg = false;

			if ( argOperation ~== "save" || argOperation ~== "store" || argOperation ~== "load" ) {
				zcAliasName = ccmd.args[ 2 ];
				zcPanelControlType = ( argOperation ~== "load"? PCT_Load : PCT_Save );

			} else if ( argOperation ~== "move" || argOperation ~== "copy" ) {
				parsePosNewArg = true;
				zcPanelControlType = ( argOperation ~== "copy"? PCT_Copy : PCT_Move );

			} else {
				parsePosArg = false;
			}

			if ( parsePosArg ) {
				if ( str2int_Ptr( ccmd.args[ 0 ], +zcPos ) )
					outValue = checkTesteePlace( --zcPos );

				if ( parsePosNewArg && outValue && str2int_Ptr( ccmd.args[ 2 ], +zcNewPos ) )
					outValue = checkTesteePlace( --zcNewPos );
			}
		}

		return outValue;
	}

	override void DoCommand( void ) {
		if ( zcPos != -1 ) {
			ZCheckerHandler handler = ccmd.handler;

			switch ( zcPanelControlType ) {
			case PCT_Save:
				if ( handler.Testee[ zcPos ].mo ) {
					int index = FindAliasIndex( zcAliasName );
					bool continueFlag = true;

					if ( index != -1 ) {
						if ( aliases[ index ].thing ) {
							ZCGlobal.Log( LL_Main, "Alias \"" .. zcAliasName .. "\" already exists and linked to the actor." );
							continueFlag = false;
						} else {
							ZCGlobal.Log( LL_Detailed, "Relinking the \"" .. zcAliasName .. "\" alias (its original actor destroyed)." );
						}
					} 

					if ( continueFlag ) {
						ZCInfoPanelControlAliasNode aliasnode = ZCInfoPanelControlAliasNode( new( 'ZCInfoPanelControlAliasNode' ) );

						aliasnode.aliasname = zcAliasName;
						aliasnode.thing = handler.Testee[ zcPos ].mo;
						aliases.Push( aliasnode );

						ZCGlobal.Log( LL_Detailed, "Saved actor " .. ccmd.handler.Testee[ zcPos ].mo.GetClassName() .. " <" .. ccmd.handler.Testee[ zcPos ].mo .. "> as \"" .. zcAliasName .. "\"." );
					}
				} else {
					ZCGlobal.Log( LL_Main, "No actor linked to the panel " .. ( zcPos + 1 ) );
				}
				break;
			case PCT_Load:
				int index = FindAliasIndex( zcAliasName );

				if ( index != -1 ) {
					if ( aliases[ index ].thing ) {
						handler.Testee[ zcPos ].mo = aliases[ index ].thing;
						ZCGlobal.Log( LL_Detailed, "Loaded actor " .. ccmd.handler.Testee[ zcPos ].mo.GetClassName() .. " <" .. ccmd.handler.Testee[ zcPos ].mo .. "> with alias \"" .. zcAliasName .. "\"." );
					} else {
						ZCGlobal.Log( LL_Detailed, "Cannot load, actor with alias \"" .. zcAliasName .. "\" destroyed." );
					}
				} else {
					ZCGlobal.Log( LL_Main, "Alias name \"" .. zcAliasName .. "\" does not exist." );
				}
				break;
			case PCT_Move:
			case PCT_Copy:
				if ( handler.Testee[ zcPos ].mo ) {
					if ( zcNewPos != -1 )
						handler.Testee[ zcNewPos ].mo = handler.Testee[ zcPos ].mo;

					if ( zcPanelControlType == PCT_Move )
						handler.Testee[ zcPos ].mo = NULL;
				} else {
					ZCGlobal.Log( LL_Main, "No actor in position " .. ( zcPos + 1 ) );
				}
				break;
			case PCT_Info:
				Actor mo = handler.Testee[ zcPos ].mo;

				if ( mo ) {
					ZCGlobal.Log( LL_Debug, "ccmd.handler.Testee[ " .. zcPos .. " ]: " .. handler.Testee[ zcPos ] .. "." );

					ZCGlobal.ClearscopeLog( LL_Main, DARKGRAY .. "Actor in position " .. GRAY .. ( zcPos + 1 ) .. DARKGRAY .. " is " .. GRAY .. mo.GetClassName() .. DARKGRAY .. " <" .. mo .. ">" );

					class parentClass = mo.GetParentClass();

					while ( parentClass != NULL ) {
						ZCGlobal.ClearscopeLog( LL_Main, DARKGRAY .. "  Inherited from " .. GRAY .. parentClass.GetClassName() .. DARKGRAY .. " <" .. parentClass .. ">" );
						parentClass = parentClass.GetParentClass();
					}
				} else {
					ZCGlobal.ClearscopeLog( LL_Main, "There's no actor in position " .. ( zcPos + 1 ) );
				}
				break;
			default:
				ZCGlobal.Log( LL_Emergency, "Unknown panel control type " .. zcPanelControlType .. " (with position " .. zcPos .. ")" );
				break;
			}
		} else if ( zcPanelControlType == PCT_Info ) {
			if ( aliases.Size() == 0 ) {
				ZCGlobal.ClearscopeLog( LL_Main, DARKGRAY .. "No actors aliases created now" );
			} else {
				ZCGlobal.ClearscopeLog( LL_Main, "Actors aliases (total " .. aliases.Size() .. ": " );

				for ( int i = 0; i < aliases.Size(); i++ ) {
					if ( aliases[ i ].thing )
						ZCGlobal.ClearscopeLog( LL_Main, DARKGRAY .. "  \"" .. GRAY .. aliases[ i ].aliasname .. DARKGRAY .. "\" linked to the " .. GRAY .. aliases[ i ].thing.GetClassName() .. DARKGRAY .. " <" .. aliases[ i ].thing .. "> at pos " .. ZCGlobal.squeezeVector3( aliases[ i ].thing.pos ) );
					else
						ZCGlobal.ClearscopeLog( LL_Main, DARKGRAY .. "  \"" .. GRAY .. aliases[ i ].aliasname .. DARKGRAY .. "\" is unlinked" );
				}
			}
		} else {
			ZCGlobal.Log( LL_Emergency, "Unknown panel control type " .. zcPanelControlType .. " (with no defined position)." );
		}
	}
} // of class ZCInfoPanelControlCommand: ZCConsoleCommand {

