class ZCMainInfoPanel: ZCBaseInfoPanelPart {
	transient CVar displayTagsModeCVar, displaySelfPointerCVar, displayPlayersInfoCVar;

	override void OnCreate( void ) {
		optionCVarName = "mcm_zchecker_info_main";
		optionLabel = "General info (name, pointer, ...)";
		optionSubmenuName = "mcm_ZCheckerSubmenu_main";
	}

	override String GetInfo( Actor thing, ZCheckerField thingfield ) {
		String info = ( thingfield.GetFieldPos() + 1 ) .. ". ";

		// Caching CVars:
		if ( !displayTagsModeCVar ) {
			displayTagsModeCVar = CVar.GetCVar( "mcm_zchecker_infovar_maintags", players[ consoleplayer ] );
			displaySelfPointerCVar = CVar.GetCVar( "mcm_zchecker_infovar_mainselfptr", players[ consoleplayer ] );
			displayPlayersInfoCVar = CVar.GetCVar( "mcm_zchecker_infovar_mainplayers", players[ consoleplayer ] );
		}

		// Classname printing:
		if ( thingfield.actorType == IAT_Normal )
			info = info .. GREEN .. thing.GetClassName();
		else if ( thingfield.actorType == IAT_StateProvider )
			info = info .. DARKGREEN .. "Inv\c-: " .. GREEN .. thing.GetClassName();

		// Tag printing:
		int displayTagsMode = displayTagsModeCVar.GetInt();

		if ( displayTagsMode == 2 || ( displayTagsMode == 1 && thing.GetTag() != thing.GetClassName() ) )
			info = info .. "\n" .. ORANGE .. "Tag" .. " \"" .. YELLOW .. thing.GetTag() .. ORANGE .. "\"";

		// Player info printing (maybe will be in some other infopanel):
		if ( displayPlayersInfoCVar.GetBool() && thing.player ) {
			int playernum = thing.PlayerNumber() + 1;

			if ( thing.player.bot )
				info = info .. "\n" .. DARKBROWN .. "Bot player " .. playernum .. ".";
			else
				info = info .. "\n" .. DARKBROWN .. "Player " .. playernum .. " name " .. GRAY .. thing.player.GetUserName() .. DARKBROWN .. ".";
		}

		// Self pointer printing:
		if ( displaySelfPointerCVar.GetBool() )
			info = info .. "\n" .. BLACK .. "&self: " .. DARKGRAY .. thing;

		// Multiplayer synchronization test printing:
		if ( thingfield.asyncwith && playeringame[ thingfield.asyncwith ] )
			info = info .. "\n" .. ( level.time & 16? ORANGE : FIRE ) .. "Async" .. RED .. " with player " .. thingfield.asyncwith .. "/" ..MAXPLAYERS .. "!";

		return info;
	}
} // of class ZCMainInfoPanel: ZCBaseInfoPanelPart {}

class ZCWorldPositionInfoPanel: ZCBaseInfoPanelPart {
	override void OnCreate( void ) {
		optionCVarName = "mcm_zchecker_info_worldpos";
		optionLabel = "World positioning";
		optionSubmenuName = "mcm_ZCheckerSubmenu_worldpos";
	}

	enum EAlternativeButtonNames {
		FIRE = BT_ATTACK,
		ALTF = BT_ALTATTACK,
		RELD = BT_RELOAD,
		ZOOM = BT_ZOOM,
		USR1 = BT_USER1,
		USR2 = BT_USER2,
		USR3 = BT_USER3,
		USR4 = BT_USER4,

		USE  = BT_USE,
        JUMP = BT_JUMP,
        CRCH = BT_CROUCH,
		SPD  = BT_SPEED,
		STRF = BT_STRAFE,

		MOVR = BT_MOVERIGHT,
		MOVL = BT_MOVELEFT,
		MOVB = BT_BACK,
		MOVF = BT_FORWARD,
		MOVU = BT_MOVEUP,
		MOVD = BT_MOVEDOWN,
		TRNR = BT_RIGHT,
		TRNL = BT_LEFT,
		TRNU = BT_LOOKUP,
		TRND = BT_LOOKDOWN,

		T180 = BT_TURN180,
		SCOR = BT_SHOWSCORES,
	};

	int curPlayerButtons;

	private ui String Col( int testbutton ) {
		return ( curPlayerButtons & testbutton )? GREEN : BLACK;
	}

	override String GetInfo( Actor thing, ZCheckerField thingfield ) {
		String outStr = "";

		bool skipRollTilt = CVar.GetCVar( "mcm_zchecker_infovar_wposnoroll", players[ consoleplayer ] ).GetBool();
		int decimalsAmount = CVar.GetCVar( "mcm_zchecker_infovar_wpostiltdcma", players[ consoleplayer ] ).GetInt();

		String decimalsfmt = ( decimalsAmount == 0? "%i" : "%." .. decimalsAmount .. "f" );

		if ( skipRollTilt ) {
			outStr = String.Format( "Tilt: (" .. DARKGRAY
							.. "a\c-" .. decimalsfmt .. ", " .. DARKGRAY
							.. "p\c-" .. decimalsfmt .. ");\n", thing.angle % 360.0, thing.pitch );
		} else {
			outStr = String.Format( "Tilt: (" .. DARKGRAY
							.. "a\c-" .. decimalsfmt .. ", " .. DARKGRAY
							.. "p\c-" .. decimalsfmt .. ", " .. DARKGRAY
							.. "r\c-" .. decimalsfmt .. ");\n", thing.angle % 360.0, thing.pitch, thing.roll );
		}

		outStr = outStr .. TEAL .. "Pos: " .. ZCGlobal.squeezeVector3( thing.pos ) .. ";\n\c-" ..
				"Vel: " .. ZCGlobal.squeezeVector3dec( thing.vel, 2 ) .. ";\n  (len " .. thing.vel.length() .. ");\n" .. TEAL ..
				String.Format( "Size: " .. N .. "r" .. TEAL .. "%.3f" .. N .. "/h" .. TEAL .. "%.3f" .. N .. ".", thing.radius, thing.height );


		bool showPlayerButtons = CVar.GetCVar( "mcm_zchecker_infovar_wposplbuttons", players[ consoleplayer ] ).GetBool();

		if ( thing is "PlayerPawn" && thing.player && showPlayerButtons ) {
			outStr.AppendFormat( DARKGRAY .. "\nKeys 0x" .. GRAY .. "%08x\n", thing.player.cmd.buttons );
			curPlayerButtons = thing.player.cmd.buttons;

			// Alas, default "smallfont" is not monospace. Moreover, its characters width differs in various IWADs/PWADs.
			if ( handler.panels.infopanelsFont == smallfont ) {
				outStr.AppendFormat(
					"%suse %st   %s^    %su   %sfr %saf\n" ..
					"%sjmp %sb %s<%sv%s> %sl%sd%sr %srl %szm\n" ..
					"%scrh                " .. TEXTCOLOR_DARKGRAY .. "u%s1%s2%s3%s4\n" ..
					"%sspd %sstrf %st180 %sscor",
					Col( USE ) , Col( MOVU ), Col( MOVF ), Col( TRNU ), Col( FIRE ), Col( ALTF ),
					Col( JUMP ), Col( MOVD ), Col( MOVL ), Col( MOVB ), Col( MOVR ), Col( TRNL ), Col( TRND ), Col( TRNR ), Col( RELD ), Col( ZOOM ),
					Col( CRCH ), Col( USR1 ), Col( USR2 ), Col( USR3 ), Col( USR4 ),
					Col( SPD ) , Col( STRF ), Col( T180 ), Col( SCOR )
				);

			} else {
				/*	use.t..^...u..fr.af
					jmp.b.<v>.ldr.rl.zm
					crh...........u1234
					spd.strf..t180.scor  */

				String buttonPaneStr = String.Format(
					"%suse %st  %s^   %su  %sfr %saf\n" ..
					"%sjmp %sb %s<%sv%s> %sl%sd%sr %srl %szm\n" ..
					"%scrh           " .. TEXTCOLOR_DARKGRAY .. "u%s1%s2%s3%s4\n" ..
					"%sspd %sstrf  %st180 %sscor",
					Col( USE ) , Col( MOVU ), Col( MOVF ), Col( TRNU ), Col( FIRE ), Col( ALTF ),
					Col( JUMP ), Col( MOVD ), Col( MOVL ), Col( MOVB ), Col( MOVR ), Col( TRNL ), Col( TRND ), Col( TRNR ), Col( RELD ), Col( ZOOM ),
					Col( CRCH ), Col( USR1 ), Col( USR2 ), Col( USR3 ), Col( USR4 ),
					Col( SPD ) , Col( STRF ), Col( T180 ), Col( SCOR )
				);

				if ( handler.panels.infopanelsFontSpaceWidth < 5 )
					buttonPaneStr.Replace( " ", "  " );

				outStr = outStr .. buttonPaneStr;
			}

		} // of if ( thing is "PlayerPawn" && thing.player && showPlayerButtons ) {}

		return outStr;
	}
} // of class ZCWorldPositionInfoPanel: ZCBaseInfoPanelPart {}


class ZCMainInteractionInfoPanel: ZCBaseInfoPanelPart {
	override void OnCreate( void ) {
		optionCVarName = "mcm_zchecker_info_maininteract";
		optionLabel = "Interaction properties";
	}

	override String GetInfo( Actor thing, ZCheckerField thingfield ) {
		String info = "";

		if ( thingfield.actorType == IAT_Normal ) {
			int thingSpawnHealth = thing.GetSpawnHealth();
			info.AppendFormat( DARKRED .. "Health " .. RED .. "%i" .. DARKGRAY .. "/" .. RED .. "%i\n" .. DARKRED .. "(" .. RED .. "%.2f%%",
					thing.health, thingSpawnHealth, ( thingSpawnHealth? 100.0 * thing.health / double( thingSpawnHealth ) : 0.0 ) );

			if ( thing.bNODAMAGE )
				info = info .. " nodmg";
			if ( thing.bBUDDHA )
				info = info .. " buddha";
			if ( thing.bINVULNERABLE )
				info = info .. " invul";

			info.AppendFormat( DARKRED .. ")" .. DARKGRAY .. ".\n" .. DARKRED .. "Mass " .. thing.mass .. DARKGRAY .. ", " .. DARKRED .. "Grav %.3f" .. DARKGRAY .. "." , thing.gravity );
		}

		return info;
	}
} // of class ZCMainInteractionInfoPanel: ZCBaseInfoPanelPart {}
