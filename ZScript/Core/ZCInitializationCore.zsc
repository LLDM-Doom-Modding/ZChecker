//
// ZChecker main initialization and configuration file parsing.
//

extend class ZCheckerHandler {
	const const_ZCheckerConfigFileName = "zchecker.cfg";

	bool handlerInitSuccess;
	String zcConfigFile;
	int zcConfigCurLineIndex;


	override void OnRegister() {
		handlerInitSuccess = true;
		SetOrder( ZCheckerHandlerOrder );

		ZCGlobal.Log( LL_Debug, GetClassName() .. "::OnRegister(). ZChecker v" .. ZCheckerVersion .. " initializes..." );
		ZCGlobal.Log( LL_Debug, String.Format( "%s::OnRegister(). EGameType 0x%03x, EGameAction %i, multiplayer %i, dm %i.",
							GetClassName(), gameinfo.gametype, gameaction, multiplayer, deathmatch ) );

		panels = ZCPanelsStorage.Create();

		for ( int i = 0; i < MaxTestee; i++ )
			Testee[ i ] = ZCheckerField.Create( i );

		zcCCMDInfo = new( 'ZCheckerCCMDInfo' );
		zcCCMDInfo.handler = self;

		ParseAllConfigFiles();
		InitAllActorNames();

		ZCGlobal.Log( LL_Detailed, String.Format( ( handlerInitSuccess? ZCGlobal.Locz( "GREETINGS_SUCCESS" ) : ZCGlobal.Locz( "GREETINGS_WARNINGS" ) ),
									ZCheckerVersionNumber, zcConsoleHandleClasses.Size(), panels.defaultPanels.Size() ) );

		Super.OnRegister();
	}



	// === General setup ===

	protected void InitAllActorNames( void ) {
		ZCGlobal.Log( LL_Debug, GetClassName() .. "::InitAllActorNames(). Creating storage cells for actor names..." );

		for ( int i = 0; i < ZCInternalActorNameCell.ARRAY_Quantity; i++ )
			allActorNames.Push( ZCInternalActorNameCell.Create( i ) );

		ZCGlobal.Log( LL_Debug, GetClassName() .. "::InitAllActorNames(). Saving actor names by first char..." );

		for ( int i = 0; i < AllActorClasses.Size(); i++ ) {
			String curclass = AllActorClasses[ i ].GetClassName();
			int index = ZCInternalActorNameCell.GetClassnameCellIndex( curclass );

			allActorNames[ index ].orignames.Push( curclass );
			curclass.ToLower();
			allActorNames[ index ].names.Push( curclass ); // To speed up a comparing process.
		}

		if ( ZCGlobal.GetLoglevel() >= LL_Debug ) {
			for ( int i = 0; i< ZCInternalActorNameCell.ARRAY_Quantity; i++ ) {
				ZCInternalActorNameCell nameCell = allActorNames[ i ];
				int nameCellSize = nameCell.names.Size();

				ZCGlobal.ClearscopeLog( LL_Debug, String.Format( "%s::InitAllActorNames(). allActorNames[%2i] quantity: %3i." .. ( nameCellSize > 0? " First is \"" .. nameCell.names[ 0 ] .. "\"." : "" ), GetClassName(), i, nameCellSize ) );
			}
		} // of if ( ZCGlobal.GetLoglevel() >= LL_Debug ) {}
	} // of protected void InitAllActorNames( void ) {}



	// === Configuration setup ===

	protected bool addConsoleClass( class<ZCConsoleClass> cls, bool importantFlag = false ) {
		if ( cls ) {
			ZCGlobal.Log( LL_Debug, GetClassName() .. "::addConsoleClass(). Trying to add \"" .. cls.GetClassName() .. "\"." );

			ZCConsoleClass newCCMD = ZCConsoleClass.Create( cls, importantFlag );
			zcConsoleHandleClasses.Push( newCCMD );

			bool important = newCCMD.zcFlags & ZCConsoleClass.CCF_Important;
			newCCMD.OnLoad();
			newCCMD.zcFlags = ( newCCMD.zcFlags & ~newCCMD.CCF_Important ) | ( newCCMD.CCF_Important * !!important );
		}

		return !!cls;
	} // of protected bool addConsoleClass( class<ZCConsoleClass> cls, bool importantFlag = false ) {}


	protected void addConsoleSeparator( bool importantFlag = false ) {
		zcConsoleHandleClasses.Push( ZCConsoleClass.Create( 'ZCConsoleSeparator', importantFlag ) );
	}


	protected play bool addInfoPanelClass( class<ZCBaseInfoPanelPart> cls ) {
		if ( cls ) {
			ZCBaseInfoPanelPart newPanelPart = NULL;

			if ( cls is "ZCBaseInfoPanelPart_PlayScope" ) {
				ZCGlobal.Log( LL_Debug, GetClassName() .. "::addInfoPanelClass(). Trying to add a " .. TEXTCOLOR_DARKGREEN .. "play-scoped " .. LLCOLOR_DEBUG .. "\"" .. cls.GetClassName() .. "\"." );
				newPanelPart = ZCBaseInfoPanelPart_PlayScope.CreatePlayScope( cls, self );
			} else {
				ZCGlobal.Log( LL_Debug, GetClassName() .. "::addInfoPanelClass(). Trying to add \"" .. cls.GetClassName() .. "\"." );
				newPanelPart = ZCBaseInfoPanelPart.Create( cls, self );
			}

			panels.defaultPanels.Push( newPanelPart );
		}

		return !!cls;
	} // of protected play bool addInfoPanelClass( class<ZCBaseInfoPanelPart> cls ) {}

	protected bool removeConsoleClass( class<ZCConsoleClass> cls ) {
		if ( cls ) {
			ZCGlobal.Log( LL_Debug, GetClassName() .. "::removeConsoleClass(). Trying to remove \"" .. cls.GetClassName() .. "\"." );

			bool found = false;

			for ( int i = 0; i < zcConsoleHandleClasses.Size(); i++ ) {
				if ( zcConsoleHandleClasses[ i ].GetClass() == cls ) {
					zcConsoleHandleClasses.Delete( i );
					found = true;
					break;
				}
			}

			if ( !found )
				ZCGlobal.Log( LL_APIMessage, LLCOLOR_DARK .. GetClassName() .. "::removeConsoleClass(). " .. LLCOLOR_MAIN .. "\"" .. cls.GetClassName() .. "\" has not yet been stored." );
		}

		// No critical warning output when nothing to delete.
		return !!cls;
	} // of protected bool removeConsoleClass( class<ZCConsoleClass> cls ) {}

	protected bool removeInfoPanelClass( class<ZCBaseInfoPanelPart> cls ) {
		if ( cls ) {
			ZCGlobal.Log( LL_Debug, GetClassName() .. "::removeInfoPanelClass(). Trying to remove \"" .. cls.GetClassName() .. "\"." );

			bool found = false;

			for ( int i = 0; i < panels.defaultPanels.Size(); i++ ) {
				if ( panels.defaultPanels[ i ].GetClass() == cls ) {
					panels.defaultPanels.Delete( i );
					found = true;
					break;
				}
			}

			if ( !found )
				ZCGlobal.Log( LL_APIMessage, GetClassName() .. "::removeInfoPanelClass(). \"" .. cls.GetClassName() .. "\" has not yet been stored." );
		}

		// No critical warning output when nothing to delete.
		return !!cls;
	} // of protected bool removeInfoPanelClass( class<ZCBaseInfoPanelPart> cls ) {}


	protected void handleConfigFileNewlines( String newlineTypeComment, String replaceeNewlineSeq ) {
		ZCGlobal.Log( LL_Debug, "New lines type for file \"ZChecker.cfg\" recognized as " .. newlineTypeComment );

		if ( replaceeNewlineSeq != "\n" )
			zcConfigFile.Replace( replaceeNewlineSeq, "\n" );
	}

	private bool checkKeywordArgsAmount( uint argsAmount, String keyword, uint rightAmount, String argsDescription ) {
		if ( argsAmount != rightAmount ) {
			ZCGlobal.Log( LL_Emergency, GetClassName() .. "::checkKeywordArgsAmount(). Wrong arguments for keyword \"" .. keyword .. "\" at line " .. zcConfigCurLineIndex .. ": has " .. argsAmount .. ", must be " .. rightAmount .. " (" .. TEXTCOLOR_RED .. "\"" .. argsDescription .. "\"" .. LLCOLOR_EMERGENCY .. ")." );
			handlerInitSuccess = false;
			return false;
		}

		return true;
	}

	private void printConfigWarning( String message ) {
		ZCGlobal.Log( LL_Emergency, GetClassName() .. "::ParseConfigFile(). " .. message .. " at line " .. zcConfigCurLineIndex .. "." );
		handlerInitSuccess = false;
	}

	protected void ParseConfigFile( int filehandler ) {
        if ( filehandler == -1 ) {
			ZCGlobal.Log( LL_Emergency, GetClassName() .. "::ParseConfigFile(). Error: wrong file handler (" .. filehandler .. ")." );
			handlerInitSuccess = false;
			return;
		}

        zcConfigFile = Wads.ReadLump( filehandler );
        Array<String> zcConfigLines;

        zcConfigFile.ToLower(); // Make file case-insensitive.
		int newlinesType = ZCGlobal.GetTextNewlinesType( zcConfigFile );

		switch ( newlinesType ) {
			case ZCGlobal.ZCNL_Unix: handleConfigFileNewlines( "*nix (LF)", "\n" ); break;
			case ZCGlobal.ZCNL_DOS: handleConfigFileNewlines( "DOS/Windows (CR/LF)", "\r\n" ); break;
			case ZCGlobal.ZCNL_Mac: handleConfigFileNewlines( "MacOS (CR)", "\r" ); break;
			case ZCGlobal.ZCNL_DOSReversed: handleConfigFileNewlines( "DOS reversed (LF/CR)", "\n\r" ); break;
			default:
				ZCGlobal.Log( LL_Debug, TEXTCOLOR_YELLOW .. "Cannot recognize new lines type, using *nix" .. LLCOLOR_DEBUG .. "." );
				newlinesType = ZCGlobal.ZCNL_Unix;
				break;
		}

		zcConfigFile.Split( zcConfigLines, "\n" );


		int zcConfigLinesSize = zcConfigLines.Size();

		// Fixing a non-POSIX end-of-file marker:
		if ( zcConfigLinesSize ) {
			String lastline = zcConfigLines[ zcConfigLinesSize - 1 ];

			if ( lastline.CharCodeAt( lastline.Length() - 1 ) == 0 )
				zcConfigLines[ zcConfigLinesSize - 1 ] = lastline.Left( lastline.Length() - 1 );
		}

		zcConfigCurLineIndex = 1;

		for ( int i = 0; i < zcConfigLinesSize; i++, zcConfigCurLineIndex++ ) {
			String curLine = zcConfigLines[ i ];

			// Comments and extra spaces delete:
			int IndexOfCommentStart = curLine.IndexOf( "#" );
			if ( IndexOfCommentStart != -1 )
				curLine.Truncate( IndexOfCommentStart );

			curLine = ZCGlobal.TruncateStringBySpaces( curLine );

			// Try to unparse current line if it isn't empty or remove it elsewere:
			if ( curLine != "" ) {
				Array<String> curLineWords;

				curLineWords.Clear();
				curLine.Replace( "\t", " " );
				curLine.Split( curLineWords, " ", TOK_SKIPEMPTY );

				int argsamount = ( curLineWords.Size() - 1 );

				String keyword = curLineWords[ 0 ];

				// Well, ZCConsoleClass and ZCConsoleCommand are actually 
				//added using the same method.
				if ( keyword == "ccmd" || keyword == "plaintext" || keyword == "consoleclass" ) {
					if ( argsamount == 1 ) {
						if ( !addConsoleClass( curLineWords[ 1 ], false ) )
							printConfigWarning( "Wrong ZCConsoleClass class \"" .. curLineWords[ 1 ] .. "\"" );

					} else if ( argsamount == 2 && curLineWords[ 2 ] == "important" ) {
						if ( !addConsoleClass( curLineWords[ 1 ], true ) )
							printConfigWarning( "Wrong ZCConsoleClass class \"" .. curLineWords[ 1 ] .. "\"" );

					} else {
						checkKeywordArgsAmount( argsamount, keyword, 1, "class<ZCConsoleClass> [important]" );
					}

				} else if ( keyword == "ccmdsep" || keyword == "ccmdseparator" ) {
					addConsoleSeparator( argsamount == 1 && curLineWords[ 1 ] == "important" );

				} else if ( keyword == "panel" || keyword == "infopanel" ) {
					if ( checkKeywordArgsAmount( argsamount, keyword, 1, "class<ZCBaseInfoPanelPart>" ) )
						if ( !addInfoPanelClass( curLineWords[ 1 ] ) )
							printConfigWarning( "Wrong PanelInfo class \"" .. curLineWords[ 1 ] .. "\"" );

				// Destructive section:
				} else if ( keyword == "removeccmd" || keyword == "removeconsoleclass" || keyword == "ccmdremove" || keyword == "consoleclassremove" ) {
					if ( argsamount == 0 ) {
						zcConsoleHandleClasses.Clear();
						ZCGlobal.Log( LL_APIMessage, GetClassName() .. "::ParseConfigFile(). Cleared all previously defined console classes." );

					} else if ( argsamount == 1 ) {
						if ( !removeConsoleClass( curLineWords[ 1 ] ) )
							printConfigWarning( "Wrong console class \"" .. curLineWords[ 1 ] .. "\" to remove" );
					}

				} else if ( keyword == "panelremove" || keyword == "infopanelremove" || keyword == "removepanel" || keyword == "removeinfopanel" ) {
					if ( argsamount == 0 ) {
						panels.defaultPanels.Clear();
						ZCGlobal.Log( LL_APIMessage, GetClassName() .. "::ParseConfigFile(). Cleared all previously defined information panels." );

					} else if ( argsamount == 1 ) {
						if ( !removeInfoPanelClass( curLineWords[ 1 ] ) )
							printConfigWarning( "Wrong infopanel class \"" .. curLineWords[ 1 ] .. "\" to remove" );
					}

				// Miscellaneous section:
				} else {
					printConfigWarning( "Unknown keyword \"" .. keyword .. "\"" );
				}

			} else {
				zcConfigLines.Delete( i, 1 );
				zcConfigLinesSize--;
				i--;
			} // of else of if ( curLine != "" ) {}

		} // of for ( int i = 0; i < zcConfigLines.Size(); i++, zcConfigCurLineIndex++ ) {}

	} // of protected void ParseConfigFile( int filehandler ) {}

	protected void ParseAllConfigFiles( void ) {
		int curConfigFileHandler = 0;
		int configFilesAmount = 0;

		do {
	        curConfigFileHandler = Wads.FindLump( const_ZCheckerConfigFileName, curConfigFileHandler );

			if ( curConfigFileHandler != -1 ) {
				configFilesAmount++;
				ZCGlobal.Log( LL_Debug, String.Format( "%s::ParseAllConfigFiles(). %sParsing file #%i named \"%s\", handler %i...",
								GetClassName(), TEXTCOLOR_ORANGE,
								configFilesAmount, const_ZCheckerConfigFileName, curConfigFileHandler ) );

				ParseConfigFile( curConfigFileHandler );

				curConfigFileHandler++; // To prevent infinite loop in the "Wads.FindLump()".
			}

		} while ( curConfigFileHandler != -1 );

		if ( configFilesAmount == 0 ) {
			handlerInitSuccess = false;
			ZCGlobal.Log( LL_Emergency, GetClassName() .. "::ParseAllConfigFiles(). Cannot find file \"" .. const_ZCheckerConfigFileName .. "\"." );
		} else {
			ZCGlobal.Log( LL_Debug, GetClassName() .. "::ParseAllConfigFiles(). Parsed " .. configFilesAmount .. " configuration file(s) in total." );
		}
	} // of protected void ParseAllConfigFiles( void ) {}

} // of extend class ZCheckerHandler {}
