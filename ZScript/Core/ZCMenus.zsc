//

class ZCOptionMenuPanels: OptionMenu {
	enum EPanelMenuActionTypes {
		PMAT_None			= -1,
		PMAT_EnterSubmenu	= 0,
		PMAT_MoveItemUp,
		PMAT_MoveItemDown,
		PMAT_SwitchOption,
		PMAT_SwitchOptionBit,

		PMAT_Quantity
	};

	int firstPanelItemPos, lastPanelItemPos;

	const DARKGRAY = TEXTCOLOR_DARKGRAY;
	const GRAY = TEXTCOLOR_GRAY;
	const GOLD = TEXTCOLOR_GOLD;

	ZCheckerHandler handler;


	private OptionMenuItemStaticText NewStaticText( String label = " " ) {
		return new( "OptionMenuItemStaticText" ).Init( label );
	}

	private void ReinitMenuHeaderPart( OptionMenuDescriptor desc ) {
		desc.mItems.Push( NewStaticText() );
		desc.mItems.Push( NewStaticText( ZCGlobal.Locz( "INFOPANELSMENUDIV_PANELS" ) ) );

		String panelbitsStr = GRAY .. "1";
		for ( int i = 1; i < MaxTestee; i++ )
			panelbitsStr.AppendFormat( DARKGRAY .. ", " .. GRAY .. "%i" .. DARKGRAY .. "", i + 1 );

		desc.mItems.Push( NewStaticText( String.Format( ZCGlobal.Locz( "INFOPANELSMENU_KEYSHELP1" ), panelbitsStr ) ) );
		desc.mItems.Push( NewStaticText( ZCGlobal.Locz( "INFOPANELSMENU_KEYSHELP2" ) ) );
		desc.mItems.Push( NewStaticText( ZCGlobal.Locz( "INFOPANELSMENU_KEYSHELP3" ) ) );
		desc.mItems.Push( NewStaticText() );
	}

	private void ReinitMenuLastPart( OptionMenuDescriptor desc ) {
		desc.mItems.Push( NewStaticText() );
		desc.mItems.Push( NewStaticText( ZCGlobal.Locz( "INFOPANELSMENUDIV_RESET" ) ) );
		desc.mItems.Push( new( "ZCOptionMenuItemRecreateInfopanels" ).Init( ZCGlobal.Locz( "INFOPANELSMENU_RESETBUTTON" ) ) );
		desc.mItems.Push( NewStaticText() );
	}

	void SetPanelOptionsOrder( OptionMenuDescriptor desc ) {
		String curorder = "";

		for ( int i = firstPanelItemPos; i < lastPanelItemPos; i++ ) {
			ZCOptionMenuItemInfopanel paneloption = ZCOptionMenuItemInfopanel( desc.mItems[ i ] );

			if ( paneloption ) {
				curorder = curorder .. paneloption.panelclass.GetClassName() .. ",";
				ZCGlobal.UILog( LL_Debug, GetClassName() .. "::SetPanelOptionsOrder(). Saved \"" .. TEXTCOLOR_OLIVE .. paneloption.panelclass.GetClassName() .. LLCOLOR_DEBUG .. "\"." );
			}
		}

		handler.panels.panelsstr = curorder;
		handler.panels.UpdatePanels();
	}

	private int InsertMenuPanelPart( ZCBaseInfoPanelPart panel, OptionMenuDescriptor desc ) {
		ZCOptionMenuItemInfopanel item = new( "ZCOptionMenuItemInfopanel" );
		ZCOptionMenuItemInfopanelSubmenu submenuItem = NULL;

		desc.mItems.Push( item.Init( panel ) );

		if ( panel.optionSubmenuName ) {
			submenuItem = new( "ZCOptionMenuItemInfopanelSubmenu" );
			submenuItem.Init( item, panel );

			desc.mItems.Push( submenuItem );
			return 2; // Items offset (+2, option and its submenu);
		}

		return 1; // Items offset (+1, option only).
	}

	protected void ReinitMenuPanelItems( OptionMenuDescriptor desc, ZCheckerHandler handler ) {
		int addedItemsAmount = 0;

		if ( handler.panels.panelsorderChanged )
			handler.panels.UpdatePanels();

		for ( int i = 0; i < handler.panels.curPanels.Size(); i++ ) {
			ZCBaseInfoPanelPart newpart = handler.panels.curPanels.nodes[ i ].panel;

			addedItemsAmount += InsertMenuPanelPart( newpart, desc );
			ZCGlobal.UILog( LL_Debug, GetClassName() .. "::ReinitMenuPanels(). Added Panel class \"" .. TEXTCOLOR_ICE .. newpart.GetClassName() .. LLCOLOR_DEBUG .. "\"." );
		}

		lastPanelItemPos += addedItemsAmount;
	} // of protected void ReinitMenuPanels( OptionMenuDescriptor desc, ZCheckerHandler handler ) {}

	void ReinitMenuItems( OptionMenuDescriptor desc ) {
        desc.mItems.Clear(); // For the "Reset infopanels order" button.
		ReinitMenuHeaderPart( desc );

		firstPanelItemPos = lastPanelItemPos = desc.mItems.Size();

		if ( !handler ) {
			ZCGlobal.ClearscopeLog( LL_Emergency, GetClassName() .. "::Init(). Cannot locate ZChecker static event handler." );
			desc.mItems.Push( new( "OptionMenuItemZCHandlerExistenceCheckWarning" ).Init(
									ZCGlobal.Locz( "INFOPANELSMENU_ZCHANDLER_ERROR" ) ) );
		} else {
			ReinitMenuPanelItems( desc, handler );
		}

		ReinitMenuLastPart( desc );
	} // of void ReinitMenuItems( OptionMenuDescriptor desc ) {}


	override void Init( Menu parent, OptionMenuDescriptor desc ) {
		handler = ZCheckerHandler( StaticEventHandler.Find( "ZCheckerHandler" ) );


		if ( !desc.mItems.Size() || ( handler && handler.CheckForResetLocalization() ) ) {
			ReinitMenuItems( desc );

			if ( handler )
				handler.panels.panelsResetRequest = false;

		} else {
			// Items are saved between menu sessions but menu itself not.

			for ( int i = 0; i < desc.mItems.Size(); i++ ) {
				if ( desc.mItems[ i ] is "ZCOptionMenuItemInfopanel" ) {
					firstPanelItemPos = i;
					break;
				}
			}

			if ( firstPanelItemPos != 0 ) {
				for ( int i = desc.mItems.Size() - 1; i >= 0; i-- ) {
					if ( desc.mItems[ i ] is "ZCOptionMenuItemInfopanel" ) {
						i += 1;
						lastPanelItemPos = i + !!( desc.mItems[ i ] is "ZCOptionMenuItemInfopanelSubmenu" );
						break;
					}
				} // of for ( int i = desc.mItems.Size() - 1; i >= 0; i-- ) {}
			} // of if ( firstPanelItemPos != 0 ) {}

		} // of else of if ( !desc.mItems.Size() ) {}

		Super.Init( parent, desc );
	} // of override void Init( Menu parent, OptionMenuDescriptor desc ) {}


	override bool OnUIEvent( UIEvent e ) {
		int curpos = mDesc.mSelectedItem;
		ZCOptionMenuItemInfopanel curitem = NULL;

		EPanelMenuActionTypes actiontype = PMAT_None;
		int key = e.KeyChar;


		// Click-safe mouse pointing:
		if ( e.type == e.Type_RButtonDown ) {
			SetCapture( true );
			MouseEvent( MOUSE_Move, e.MouseX, e.MouseY );

		} else if ( e.type == e.Type_RButtonUp ) {
			SetCapture( false );

		// Specific infopanels menu keys:
		} else if ( e.Type == e.Type_KeyDown ) {
			if ( key == e.Key_F3 || key == e.Key_F4 || key == e.Key_Tab )
				actiontype = PMAT_EnterSubmenu;

		} else if ( e.Type == e.Type_Char ) {
			if ( key == 0x2D ) // '-'.
				actiontype = PMAT_MoveItemUp;

			else if ( key == 0x2B || key == 0x3D ) // '+'/'='.
				actiontype = PMAT_MoveItemDown;

			else if ( key == 0x20 ) // A space.
				actiontype = PMAT_SwitchOption;

			else if ( key >= 0x31 && key <= ( 0x30 + MaxTestee ) ) // A digit, from 1 to MaxTestee.
				actiontype = PMAT_SwitchOptionBit;

		} else if ( e.Type == e.Type_WheelUp ) {
			actiontype = PMAT_MoveItemUp;

		} else if ( e.Type == e.Type_WheelDown ) {
			actiontype = PMAT_MoveItemDown;

		} else if ( e.Type == e.Type_MButtonDown ) {
			MouseEvent( MOUSE_Move, e.MouseX, e.MouseY );
			curpos = mDesc.mSelectedItem;
			actiontype = PMAT_EnterSubmenu;

		}


		if ( curpos > 0 )
			curitem = ZCOptionMenuItemInfopanel( mDesc.mItems[ curpos ] );


		//console.printf( "e.Type: " .. e.Type .. ", e.KeyChar: " .. e.KeyChar .. ", e.KeyString: \"" .. e.KeyString .. "\" (len " .. e.KeyString.Length() .. ")" );
		//console.printf( "curitem " .. curitem .. ", actiontype " .. actiontype .. "; pos " .. firstPanelItemPos .. " <= " .. curpos .. " < " .. lastPanelItemPos );


		if ( curitem && actiontype != PMAT_None && curpos < lastPanelItemPos && curpos >= firstPanelItemPos ) {
			int moveOffset = ( curitem.mSubmenu? 2 : 1 );

			if ( actiontype == PMAT_MoveItemUp || actiontype == PMAT_MoveItemDown ) {
				bool movePrepared = false;

				if ( actiontype == PMAT_MoveItemUp ) {
					int newpos = curpos - ( 1 + !!( mDesc.mItems[ curpos - 1 ] is "ZCOptionMenuItemInfopanelSubmenu" ) );

					curitem = ZCOptionMenuItemInfopanel( mDesc.mItems[ newpos ] );
					moveOffset = ( curitem && curitem.mSubmenu? 2 : 1 );

					movePrepared = ( curpos - moveOffset >= firstPanelItemPos );

					curpos = newpos;
				} else {
					movePrepared = ( curpos + moveOffset < lastPanelItemPos );
				}

				Menu.MenuSound( "menu/change" );

				if ( movePrepared ) {
					OptionMenuItem movingitem = NULL;

					int curMoveOffset = moveOffset;
					int newCursorOffset = 1;

					Name mSubmenuSrc = ZCOptionMenuItemInfopanel( mDesc.mItems[ curpos ] ).mSubmenu;
					Name mSubmenuDest = ZCOptionMenuItemInfopanel( mDesc.mItems[ curpos + moveOffset ] ).mSubmenu;

					/*	Direction	Dn	Dn	Dn	Dn	Up	Up	Up	Up
						SubmenuSrc	-	+	-	+	-	+	-	+
						SubmenuDest	-	-	+	+	-	-	+	+
						Rezult		+1	+1	+1	+1	-1	-1	-2	-1
					*/

					if ( mSubmenuDest )
						moveOffset++;
					else if ( mSubmenuSrc && actiontype == PMAT_MoveItemUp )
						newCursorOffset++;

					//console.printf( "curMoveOffset " .. curMoveOffset .. ", newCursorOffset " .. newCursorOffset );


					while ( curMoveOffset --> 0 ) {
						movingitem = mDesc.mItems[ curpos ];
						mDesc.mItems.Delete( curpos, 1 );
						mDesc.mItems.Insert( curpos + moveOffset, movingitem );
					}

					while ( newCursorOffset --> 0 )
						Menu.GetCurrentMenu().MenuEvent( ( actiontype == PMAT_MoveItemUp? MKEY_Up : MKEY_Down ), false );

					SetPanelOptionsOrder( mDesc );
				} else {
					Menu.MenuSound( "menu/invalid" );
				}

			} else if ( actiontype == PMAT_EnterSubmenu ) {
				// Tab, F4, 'e', 'E', 's' and 'S' opens a submenu (if any).
				curitem.OpenSubmenu();
				return true;

			} else if ( actiontype == PMAT_SwitchOption ) {
				// Space switches the value, same as Enter.
				Menu.GetCurrentMenu().MenuEvent( MKEY_Enter, false );
				return true;

			} else if ( actiontype == PMAT_SwitchOptionBit ) {
				// Digits in range [1; MaxTestee] toggles panel part in the specified infopanel.
				curitem.SwitchBitEvent( key - 0x30 - 1 );
				return true;

			}

		} // of if ( curitem && actiontype != PMAT_None && curpos < lastPanelItemPos && curpos >= firstPanelItemPos ) {}


		// Hotkey (originally grabbed from the QZDoom g4.5.0's "qzdoom.pk3:/zscript/engine/ui/listmenu.zs" and heavily reworked):
		bool isSearchEventType = ( e.Type == UIEvent.Type_Char || ( e.Type == UIEvent.Type_KeyDown && e.IsCtrl ) );
		int ch = e.KeyChar;

		if ( actiontype == PMAT_None && isSearchEventType && ch > 0x20 && ch < 0x7E ) {
			// Converting to lowercase:
			if ( ch >= LETTER_A_UPPER && ch <= LETTER_Z_UPPER )
				ch |= 0x20;

			int foundIndex = -1;
			int charNotFoundCountdown = lastPanelItemPos - firstPanelItemPos - 1;
			int searchdir = ( (e.IsCtrl || e.IsAlt)? -1 : 1 );

			for ( int i = mDesc.mSelectedItem + searchdir; i != mDesc.mSelectedItem && charNotFoundCountdown --> 0; i += searchdir ) {
				// Looping the search:
				if ( i >= lastPanelItemPos )
					i = firstPanelItemPos;
				else if ( i < firstPanelItemPos )
					i = lastPanelItemPos;

				// Skipping submenus:
				if ( !( mDesc.mItems[ i ] is "ZCOptionMenuItemInfopanel" ) )
					continue;

				// Main check:
				if ( mDesc.mItems[ i ].CheckHotkey( ch ) ) {
					foundindex = i;
					break;
				}
			} // of for ( int i = mDesc.mSelectedItem + searchdir; i != mDesc.mSelectedItem && charNotFoundCountdown --> 0; i += searchdir ) {}

			if ( foundindex != -1 ) {
				mDesc.mSelectedItem = foundindex;
				MenuSound( "menu/cursor" );

				if ( ( mDesc.mSelectedItem <= mDesc.mScrollTop + mDesc.mScrollPos ) || ( mDesc.mSelectedItem >= VisBottom ) )
					mDesc.mScrollPos = max( mDesc.mSelectedItem - mDesc.mScrollTop - 1, 0 );

				return true;
			}
		} // of if ( actiontype == PMAT_None && isSearchEventType && ch > 0x20 && ch < 0x7F ) {}


		// Exists here just for mouse handling.
		return Super.OnUIEvent( e );
	} // of override bool OnUIEvent( UIEvent e ) {}

	override bool MouseEvent( int type, int x, int y ) {
		y = ( y / CleanYfac_1 ) - mDesc.mDrawTop;

		if ( mFocusControl ) {
			mFocusControl.MouseEvent( type, x, y );
			return true;
		}

		int yline = ( y / OptionMenuSettings.mLinespacing );

		if ( yline >= mDesc.mScrollTop )
			yline += mDesc.mScrollPos;

		if ( yline >= 0 && yline < mDesc.mItems.Size() && ( mDesc.mItems[ yline ].Selectable() || mDesc.mItems[ yline ] is "ZCOptionMenuItemInfopanelSubmenu" ) ) {
			mDesc.mSelectedItem = yline;
			mDesc.mItems[ yline ].MouseEvent( type, x, y );
			return true;
		}

		mDesc.mSelectedItem = -1;

		return true;
	} // of override bool MouseEvent( int type, int x, int y ) {}

	override void OnReturn() {
		SetCapture( false );
	}


} // of class ZCOptionMenuPanels: OptionMenu {}




// === Random option menu items:


class ZCOptionMenuItemInfopanel: OptionMenuItemOptionBase {
	const const_WrongCVar = ZCInfoPanelNode.const_WrongCVar;
	const const_AllDisabled = 0x00;

	Name mSubmenu;
	class<ZCBaseInfoPanelPart> panelclass;

	private String panelHotkeyChars;
	private CVar mCVar;
	private transient Font enginefont;

	ZCOptionMenuItemInfopanel Init( ZCBaseInfoPanelPart panel ) {
		String label;

		label = ZCGlobal.FreeLocalize( panel.optionLabel );

		panelHotkeyChars = String.Format( "%s%s", label.Left( 1 ), ZCGlobal.FreeLocalize( panel.optionLabelExtraHotkeys ) );
		panelHotkeyChars.ToLower();

		if ( panel is "ZCBaseInfoPanelPart_PlayScope" )
			label = "[play] >> " .. label;

		mSubmenu = panel.optionSubmenuName;
		panelclass = panel.GetClass();

		Super.Init( label, panel.optionCVarName, 'None', NULL, 0 );
		mCVar = CVar.FindCVar( mAction );

		return self;
	}

	void OpenSubmenu( void ) {
		if ( mSubmenu ) {
			Menu.MenuSound( "menu/choose" );
			Menu.SetMenu( mSubmenu );
		} else {
			Menu.MenuSound( "menu/invalid" );
		}
	}

	private int getvalueAllEnabled( void ) const {
		return ( 1 << MaxTestee ) - 1;
	}

	private int getvalueLeftmostBit( void ) const {
		return 1 << ( MaxTestee - 1 );
	}

	override bool MenuEvent( int mkey, bool fromcontroller ) {
		int selection = GetSelection();

		int const_AllEnabled = getvalueAllEnabled();
		int const_LeftmostBit = getvalueLeftmostBit();

		if ( mkey == Menu.MKEY_Left || mkey == Menu.MKEY_Right || mkey == Menu.MKEY_Enter ) {
			if ( selection > const_AllDisabled && selection < const_AllEnabled ) {
				// Bitwise cyclic right shift:
				if ( mkey == Menu.MKEY_Left ) {
					int rightmost = selection & 0x01;
					selection = ( selection >> 1 ) | ( const_LeftmostBit * !!rightmost );

				// Bitwise cyclic left shift:
				} else if ( mkey == Menu.MKEY_Right ) {
					int leftmost = selection & const_LeftmostBit;
					selection = ( ( selection << 1 ) & const_AllEnabled ) | ( 0x01 * !!leftmost );

				// Set to const_AllDisabled when Enter or Space pressed:
				} else {
					selection = const_AllDisabled;
				}

			} else if ( selection == const_AllDisabled || selection == const_AllEnabled ) {
				// Switch the extreme values to the opposite:
				selection ^= const_AllDisabled ^ const_AllEnabled;

			}

			if ( selection != const_WrongCVar )
				SetSelection( selection ); // Any wrong value will be clamped automatically inside this method.
			else
				ZCGlobal.UILog( LL_Emergency, GetClassName() .. "::MenuEvent(). Unknown CVar \"" .. TEXTCOLOR_WHITE .. mAction .. LLCOLOR_EMERGENCY .. "\"." );

			Menu.MenuSound( "menu/change" );

			return true;
		} // of if ( mkey == Menu.MKEY_Left || mkey == Menu.MKEY_Right || mkey == Menu.MKEY_Enter ) {}

		return Super.MenuEvent( mkey, fromcontroller );
	} // of override bool MenuEvent( int mkey, bool fromcontroller ) {}

	void SwitchBitEvent( int optionbit ) {
		// Option bit is in range [0; MaxTestee - 1].

		if ( optionbit >= 0 && optionbit < MaxTestee ) {
			SetSelection( GetSelection() ^ ( 1 << optionbit ) );
		} else {
			ZCGlobal.UILog( LL_Emergency, GetClassName() .. "::SwitchBitEvent(). Option bit index " .. optionbit .. " not in range [0; " .. ( MaxTestee - 1 ) .. "]." );
		}
	} // of void SwitchBitEvent( int optionbit ) {}


	override int GetSelection() {
		int outval = const_WrongCVar;

		if ( mCVar ) {
			outval = mCVar.GetInt();

			if ( outval >= 0xFF )
				outval = getvalueAllEnabled();
		}

		return outval;
	}

	override void SetSelection( int selection ) {
		if ( mCVar ) {
			int const_AllEnabled = getvalueAllEnabled();

			if ( selection >= const_AllEnabled )
				selection = 0xFF;
			else
				selection = clamp( selection, const_AllDisabled, const_AllEnabled );

			mCVar.SetInt( selection );
		}
	}

	override int Draw( OptionMenuDescriptor desc, int y, int indent, bool selected ) {
		drawLabel( indent, y, ( selected? OptionMenuSettings.mFontColorSelection : OptionMenuSettings.mFontColor ) );

		int selection = GetSelection();
		int const_AllEnabled = getvalueAllEnabled();

		String text;

		if ( selection & const_AllEnabled == const_AllEnabled ) {
			text = TEXTCOLOR_GRAY .. ZCGlobal.Locz( "INFOPANELSMENU_INALLPANELS" );

		} else if ( selection == const_AllDisabled ) {
			text = TEXTCOLOR_BLACK .. ZCGlobal.Locz( "INFOPANELSMENU_NOTINPANELS" );

		} else {
			for ( int i = 0; i < MaxTestee; i++ ) {
				text.AppendFormat( "%s%i ", ( selection & ( 1 << i )? TEXTCOLOR_GRAY : TEXTCOLOR_BLACK ), i + 1 );

				//if ( selection & ( 1 << i ) )
				//	text = text .. ( i + 1 ) .. " ";
			}
		}

		if ( !enginefont ) {
			enginefont = Font.FindFont( "newsmallfont" );

			if ( !enginefont )
				enginefont = smallfont;
		}

		Screen.DrawText( enginefont, OptionMenuSettings.mFontColorValue, indent + CursorSpace(), y, text, DTA_CleanNoMove_1, true );
		return indent;
	}

	override bool CheckHotkey( int c ) {
		String testchar = String.Format( "%c", c );

		return ( panelHotkeyChars.IndexOf( testchar ) != -1 );
	}
} // of class ZCOptionMenuItemInfopanel: OptionMenuItemOption {}

class ZCOptionMenuItemInfopanelSubmenu: OptionMenuItemStaticText {
	ZCOptionMenuItemInfopanel masterMenuItem;
	ZCBaseInfoPanelPart masterInfoPanel;

	OptionMenuDescriptor subdesc;

	private String GetSubmenuLabel( bool itemselected = false ) {
		String newlabel = masterInfoPanel.GetSubmenuLabel( subdesc );

		if ( itemselected )
			newlabel.Replace( masterInfoPanel.SUBMENUCOLOR, TEXTCOLOR_BRICK );

		return newlabel;
	}

	ZCOptionMenuItemInfopanelSubmenu Init( ZCOptionMenuItemInfopanel masteritem, ZCBaseInfoPanelPart infopanel ) {
		masterMenuItem = masteritem;
		masterInfoPanel = infopanel;

		subdesc = OptionMenuDescriptor( MenuDescriptor.GetDescriptor( infopanel.optionSubmenuName ) );	
		mLabel = GetSubmenuLabel();

		return self;
	}

	override int Draw( OptionMenuDescriptor desc, int y, int indent, bool selected ) {
		bool masterItemSelected = false;

		if ( desc ) {
			if ( desc.mSelectedItem > 0 ) {
				masterItemSelected = ( desc.mItems[ desc.mSelectedItem ] == masterMenuItem );
				mLabel = GetSubmenuLabel( masterItemSelected );
			}
		} else {
			mLabel = GetClassName() .. "::Draw(). No OptionMenuDescriptor.";
		}

		drawLabel( indent, y, ( masterItemSelected? OptionMenuSettings.mFontColorSelection : Font.CR_DARKGRAY ) );

		return indent;
	}

	override bool MouseEvent( int type, int x, int y ) {
		ZCOptionMenuPanels masterMenu = ZCOptionMenuPanels( Menu.GetCurrentMenu() );

		if ( masterMenu && masterMenuItem ) {
			// Highlight the master item position instead of submenu item:
			for ( int i = 0; i < masterMenu.mDesc.mItems.Size(); i++ ) {
				if ( masterMenu.mDesc.mItems[ i ] == masterMenuItem ) {
					masterMenu.mDesc.mSelectedItem = i;
					break;
				}
			}

			// Open the submenu (currently called after the UIEvent.Type_LButtonUp):
			if ( type == Menu.MOUSE_Release )
				masterMenuItem.OpenSubmenu();
		} else {
			ZCGlobal.ClearscopeLog( LL_Emergency, GetClassName() .. "::MouseEvent(). No masterMenu (" .. masterMenu .. ") or masterMenuItem (" .. masterMenuItem .. "). Mouse event type " .. type .. "." );
		}

		return true;
	}

} // of class ZCOptionMenuItemInfopanelSubmenu: OptionMenuItemStaticText {}

class ZCOptionMenuItemRecreateInfopanels: OptionMenuItem {
	private ZCOptionMenuPanels panelsmenu;

	ZCOptionMenuItemRecreateInfopanels Init( String label ) {
		Super.Init( label, 'None' );
		return self;
	}

	override int Draw( OptionMenuDescriptor desc, int y, int indent, bool selected ) {
		drawLabel( indent, y, selected? OptionMenuSettings.mFontColorSelection : OptionMenuSettings.mFontColor );

		return indent;
	}

	private void ResetPanels( void ) {
		ZCPanelsStorage panels = panelsmenu.handler.panels;

		panels.panelsstr = "";
		panels.UpdatePanels( false );

		panelsmenu.ReinitMenuItems( panelsmenu.mDesc );
		panelsmenu.mDesc.mSelectedItem = panelsmenu.lastPanelItemPos + 2;

		ZCGlobal.ClearscopeLog( LL_Detailed, ZCGlobal.Locz( "INFOPANELSMENUMSG_RESETORDER" ) );
	}

	// Grabbed from "*zdoom.pk3" -> "class OptionMenuItemSafeCommand".
	override bool MenuEvent( int mkey, bool fromcontroller ) {
		if ( mkey == Menu.MKEY_MBYes ) {
			// Paranoidal pointers checking (already saved more than one time, actually):
			if ( panelsmenu && panelsmenu.handler && panelsmenu.handler.panels ) {
				ResetPanels();
			} else if ( !panelsmenu ) {
				ZCGlobal.UILog( LL_Emergency, GetClassName() .. "::MenuEvent(). Panels menu not found." );
			} else if ( !panelsmenu.handler ) {
				ZCGlobal.UILog( LL_Emergency, GetClassName() .. "::MenuEvent(). ZChecker handler not found (\"panelsmenu->handler\" is NULL)." );
			} else {
				ZCGlobal.UILog( LL_Emergency, GetClassName() .. "::MenuEvent(). Panels storage in ZChecker handler not found (\"panelsmenu->handler->panels\" is NULL)." );
			}

			return true;
		}

		return Super.MenuEvent( mkey, fromcontroller );
	}

	override bool Activate() {
		panelsmenu = ZCOptionMenuPanels( Menu.GetCurrentMenu() );

		if ( panelsmenu && panelsmenu.handler && panelsmenu.handler.panels ) {
			String msg = StringTable.Localize( "$SAFEMESSAGE" );
			String actionLabel = StringTable.localize( mLabel );

			String safeMessageFullString = String.Format( "%s%s%s\n\n%s", TEXTCOLOR_WHITE, actionLabel, TEXTCOLOR_NORMAL, msg );
			Menu.MenuSound( "menu/choose" );
			Menu.StartMessage( safeMessageFullString, 0 );

		} else {
			Menu.MenuSound( "menu/invalid" );
		}

		return true;
	}
} // of class ZCOptionMenuItemRecreateInfopanels: OptionMenuItem {}


// For the PSprite overlay ID choice:

class OptionMenuItemZCPSpriteInputField: OptionMenuItemTextField {
	OptionMenuItemZCPSpriteInputField Init( String label, Name command, CVar graycheck = null ) {
		Super.Init( label, command, graycheck );
		return self;
	}

	override bool MenuEvent( int mkey, bool fromcontroller ) {
		if ( mkey == Menu.MKEY_Enter ) {
			String basestr = String.Format( "%i", GetCVarString().ToInt() );

			Menu.MenuSound( "menu/choose" );
			mEnter = TextEnterMenu.Open( Menu.GetCurrentMenu(), basestr, -1, 2, fromcontroller );
			mEnter.ActivateMenu();
			return true;

		} else if ( mkey == Menu.MKEY_Input ) {
			int setval;
			String setstr = mEnter.GetText();
			setstr.ToLower();

			if ( setstr == "flash" || setstr == "fire" ) {
				setval = PSprite.FLASH;

			} else {
				setval = setstr.ToInt();

				if ( setval == 0 )
					setval = PSprite.WEAPON;
			}

			setstr = String.Format( "%i", setval );

			switch ( setval ) {
				case PSprite.WEAPON:
					setstr = setstr .. " (weapon/main)";
					break;
				case PSprite.FLASH:
					setstr = setstr .. " (flash)";
					break;
				case PSprite.STRIFEHANDS:
					setstr = setstr .. " (Strife hands)";
					break;
				case PSprite.TARGETCENTER:
					setstr = setstr .. " (PowerTargeter center)";
					break;
				case PSprite.TARGETLEFT:
					setstr = setstr .. " (PowerTargeter left)";
					break;
				case PSprite.TARGETRIGHT:
					setstr = setstr .. " (PowerTargeter right)";
					break;
				default:
					break;
			}

			if ( mCVar )
				mCVar.SetString( setstr );

			mEnter = NULL;
			return true;
		}

		return Super.MenuEvent( mkey, fromcontroller );
	} // of override bool MenuEvent( int mkey, bool fromcontroller ) {}

} // of class OptionMenuItemZCNumberTextField: OptionMenuItemTextField {}


class OptionMenuItemZCHandlerExistenceCheckWarning: OptionMenuItemStaticText {
	private String realLabel;
	private OptionMenuDescriptor desc;
	private bool isHandlerFound, isWarningInjected;

	OptionMenuItemStaticText Init( String label, int cr = -1 ) {
		isHandlerFound = !!ZCheckerHandler( StaticEventHandler.Find( "ZCheckerHandler" ) );
		isWarningInjected = false;

		realLabel = ( label.Left( 1 ) == "$"? StringTable.Localize( label ) : label );

		return Super.Init( "", cr );
	}

	private int getSelfIndex( OptionMenuDescriptor desc ) {
		int selfIndex = 0;

		for ( int i = 0; i < desc.mItems.Size(); i++ ) {
			if ( self == desc.mItems[ i ] )
				return i;
		}

		// Impossible value, actually: "Ticker()" normally will be called 
		//only from some valid menu.
		return -1;
	}

	private void LocateMenuDescriptor( void ) {
		if ( !desc ) {
			OptionMenu curmenu = OptionMenu( Menu.GetCurrentMenu() );
			desc = ( curmenu? OptionMenuDescriptor( curmenu.mDesc ) : NULL );

			if ( !desc )
				ZCGlobal.UILog( LL_Emergency, GetClassName() .. "::LocateMenuDescriptor(). No menu descriptor; OptionMenu <" .. curmenu .. ">." );
		}
	}

	// Seems like there's not so much more ways to inject a warning message to current opened menu.
	override void Ticker() {
		LocateMenuDescriptor();

		if ( isHandlerFound && desc ) {
			int removeIndex = getSelfIndex( desc );
			desc.mItems.Delete( removeIndex, 1 );

			if ( desc.mSelectedItem > removeIndex )
				desc.mSelectedItem--;

			Destroy();
			return;
		}

		if ( !isHandlerFound && !isWarningInjected && desc ) {
			int startInjectIndex = getSelfIndex( desc );

			Array<String> labeldiv;
			realLabel.Split( labeldiv, "\n" );
			int labeldivSize = labeldiv.Size();
			//console.printf( TEXTCOLOR_DARKGRAY .. "realLabel: \"" .. TEXTCOLOR_DARKGREEN .. realLabel .. TEXTCOLOR_DARKGRAY .. "\". labeldivSize: " .. labeldivSize .. "." );

			for ( int i = labeldivSize - 1; i >= 0; i-- ) {
				//labeldiv[ i ].Replace( "\\c", "\c" ); // [McM] Not required for the localized strings.
				desc.mItems.Insert( startInjectIndex, new( "OptionMenuItemStaticText" ).Init( labeldiv[ i ] ) );
			}

			if ( desc.mSelectedItem > startInjectIndex )
				desc.mSelectedItem += labeldivSize;

			isWarningInjected = true;
		}

		Super.Ticker();
	} // of override void Ticker() {}

} // of class OptionMenuItemZCHandlerCheck: OptionMenuItemStaticText {}
