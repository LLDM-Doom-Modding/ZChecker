//
// Infopanels for all global large systems related to- and created for Actors.
//
// In particular:
//   1. Inventory list;
//   2. States machine;
//   3. Visual stuff.
//


// Not really done yet...
class ZCInvFieldNode {
	ZCInvFieldNode next, prev;

	Inventory inv;
	int visualTicks;		// Positive: green (inv. added); negative: red (inv. taken).
}

class ZCInvFieldData {
	ZCInvFieldNode head, tail;
	ZCInvFieldNode firstvisible;

	ZCInvFieldNode AddNode( Inventory inv ) {
		ZCInvFieldNode newnode = new( 'ZCInvFieldNode' );

		if ( !head ) {
			head = tail = newnode;
		} else {
			tail.next = newnode;
			newnode.prev = tail;
			tail = newnode;
		}

		newnode.inv = inv;
		newnode.visualTicks = 5;

		return newnode;
	}

	void UpdateByActorInventory( Actor owner ) {
		Inventory aitem = owner.inv;
		Inventory sitem = head.inv;

		while ( aitem ) {
			if ( aitem != sitem ) {
				// <...>
			}

			aitem = aitem.inv;
		}
	}
} // of class ZCInvFieldData {}

class ZCInventoryInfoPanel: ZCBaseInfoPanelPart {
	Array<ZCInvFieldData> prevInvs;
	ZCInventoryQuicksort qsort;
	int sortPrevTypeOption;

	override void OnCreate( void ) {
		optionCVarName = "mcm_zchecker_info_inventory";
		optionLabel = "Inventory";
		optionSubmenuName = "mcm_ZCheckerSubmenu_inventory";

		sortPrevTypeOption = -1;

		for ( int i = 0; i < MaxTestee; i++ )
			prevInvs.Push( new( 'ZCInvFieldData' ) );
	}

	override String GetInfo( Actor thing, ZCheckerField thingfield ) {
		String outstr = DARKGRAY .. "Inventory\c-: " .. GRAY;

		if ( thing is "Inventory" )
			return outstr .. "(Inventory itself).\n";

		Inventory item = thing.Inv;
		//ZCInvFieldData previnv = prevInvs[ thingfield.fieldPos ];

		if ( !item )
			return outstr .. "none.";

		//uint curCellsAmount = 0;

		//ZCheckerInvField cmpItem = Testee[ i ].inv;
		//ZCheckerInvField nextItem = cmpItem.Next;

		/*while ( item && curCellsAmount < cellsAmountOption ) {
			//if ( nextItem && nextItem.type != item.Inv.GetClassName() ) {
			/ *	ZCheckerInvField cmpNextItem = nextItem;
				bool found = false;
				while ( ( cmpNextItem = cmpNextItem.Next ) && !found ) {
					if ( cmpNextItem.type == item.Inv.GetClassName() )
						found = true;
				}
				if ( !found ) {}
			}
            * /
			outStr = outStr .. "\n* " .. item.GetClassName() .. ( item.Amount - 1? " x" .. item.Amount : "" ) .. "\c[Gray];";
			item = item.Inv;

			/ *if ( cmpItem.visualTicks > 0 )
				--cmpItem.visualTicks;
			else if ( cmpItem.visualTicks < 0 )
				++cmpItem.visualTicks;

			outStr = outStr .. "\n* " .. "\c[" .. ( cmpItem.visualTicks > 0? "Green" : ( cmpItem.visualTicks < 0? "Red" : "Gray" ) ) .. "]"
					.. item.GetClassName() .. ( item.Amount - 1? " x" .. item.Amount : "" ) .. "\c[Gray];";

			item = item.Inv;
			cmpItem = nextItem;
			nextItem = nextItem.Next;* /

			curCellsAmount++;
		} // of while ( item && curCellsAmount < cellsAmountOption ) {}

		if ( item && curCellsAmount >= cellsAmountOption )
			outStr = outStr .. TEXTCOLOR_DARKGRAY .. " (...more)";
		*/


		uint cellsAmountOption = CVar.GetCVar( "mcm_zchecker_infovar_invamount", players[ consoleplayer ] ).GetInt();
		uint sortTypeOption = CVar.GetCVar( "mcm_zchecker_infovar_invsorttype", players[ consoleplayer ] ).GetInt();
		bool sortReverseOption = CVar.GetCVar( "mcm_zchecker_infovar_invsortascend", players[ consoleplayer ] ).GetBool();

		// Reiniting a quicksort keeper:
		if ( !qsort || ( sortPrevTypeOption != sortTypeOption && sortTypeOption != ZCInventoryQuicksort.QST_None ) ) {
			switch ( sortTypeOption ) {
				case ZCInventoryQuicksort.QST_Amount:
					qsort = new( 'ZCInventoryAmountQuicksort' );
					break;
				case ZCInventoryQuicksort.QST_MaxAmount:
					qsort = new( 'ZCInventoryMaxAmountQuicksort' );
					break;
				case ZCInventoryQuicksort.QST_Names:
				default:
					qsort = new( 'ZCInventoryQuicksort' );
					break;
			}
		}

		// Old versions of the engine has some troubles with the correct 
		//arrays initialization.
		qsort.arr.Clear();

		while ( item ) {
			qsort.arr.Push( item );
			item = item.Inv;
		}

		// Applying a sorting:
		if ( sortTypeOption != ZCInventoryQuicksort.QST_None )
			qsort.Sort();

		if ( sortReverseOption )
			qsort.Reverse();

		// Output generating:
		int qsortArraySize = qsort.arr.Size();

		for ( int i = 0; i < min( qsortArraySize, cellsAmountOption ); i++ ) {
			item = qsort.arr[ i ];
			int curAmount = item.Amount;
			int maxAmount = item.MaxAmount;

			String elemstr = "\n* ";

			if ( curAmount > 0 ) {
				String amountColor = ( curAmount == maxAmount? DARKGREEN : DARKGRAY );

				elemstr = amountColor .. elemstr .. GRAY .. item.GetClassName();

				if ( curAmount != 1 )
					elemstr = elemstr .. amountColor .. " x" .. curAmount;
			} else {
				elemstr = BLACK .. elemstr .. item.GetClassName() .. " x0";
			}

			outstr = outstr .. elemstr .. GRAY .. ";";
		}

		if ( qsortArraySize > cellsAmountOption )
			outstr = outstr .. TEXTCOLOR_DARKGRAY .. "\n  (..." .. ( qsortArraySize - cellsAmountOption ) .. " more)";

		return outstr;
	}
} // of class ZCInventoryInfoPanel: ZCBaseInfoPanelPart {}


class ZCStatesInfoData {
	State st;
}

class ZCStatesInfoPanel: ZCBaseInfoPanelPart {
	Array<ZCStatesInfoData> prevLogStates;
	int prevLogStateTics;

	String tempFlagsStr;

	transient CVar statesAmountCVar, statesLoggingCVar; 				// For states in general;
	transient CVar stateTicsCVar, stateFlagsCVar, stateExtraInfoCVar; 	// For current state.
	transient CVar pspriteOverlaysModeCVar, pspriteExtraOverlayIDCVar;	// For PSprite layers/overlays.
	protected int curstateFlagsType, curstateExtraInfo;					// Necessary for the "::addPSpriteState()".


	override void OnCreate( void ) {
		optionCVarName = "mcm_zchecker_info_states";
		optionLabel = "States";
		optionSubmenuName = "mcm_ZCheckerSubmenu_states";

		for ( int i = 0; i < MaxTestee; i++ )
			prevLogStates.Push( new( 'ZCStatesInfoData' ) );
	}

	protected String DecoratedState( State st ) {
		// SpriteID: 0 == "TNT1A0", 1 == fixed, 2 == SameSprite.
		return
			String.Format( SAPPHIRE .. SpriteID( st.sprite ) .. LIGHTBLUE .. " %c " .. SAPPHIRE .. "%i\c-",
						st.Frame + 65, st.Tics );
	}

	protected void DoStatesLogging( Actor thing, ZCheckerField thingfield ) {
		State curState = thing.CurState;
		State st = curState;

		if ( thingfield.actorType == IAT_StateProvider ) {
			Actor weapOwner = getItemPlayerOwner( Inventory( thing ) );

			if ( weapOwner.player.psprites )
				curState = st = weapOwner.player.psprites.CurState;
		}

		int fieldPos = thingfield.GetFieldPos();
		State prevlogst = prevLogStates[ fieldPos ].st;

		if ( prevlogst && prevlogst != st ) {
			String logstr = ( fieldPos + 1 ) .. ". " .. DecoratedState( st );

			/*String logstr = String.Format( "%i. \c-" .. SAPPHIRE .. "%s " .. LIGHTBLUE .. "%c " .. SAPPHIRE .. "%i\c-",
							( fieldPos + 1 ),
							( isWeaponInHands? "" .. weapOwner.player.psprites.sprite : "" .. thing.Sprite ),
							st.Frame + 65, st.Tics );*/

			State nextlogst = prevlogst.NextState;
			bool zeroSkipped = ( nextlogst && nextlogst.tics == 0 );

			while ( nextlogst && nextlogst.tics == 0 )
				nextlogst = nextlogst.NextState;

			bool stateForced = ( nextlogst != st );

			if ( zeroSkipped || stateForced ) {
				logstr = logstr .. DARKGRAY .. " (";

				if ( zeroSkipped )
					logstr = logstr .. GRAY .. "zero frames" .. DARKGRAY .. " skipped" .. ( stateForced? "; " : "" );

				if ( stateForced ) {
					State prevnextst = prevlogst;

					if ( prevlogst.Tics == prevLogStateTics && prevlogst.NextState )
						prevnextst = prevlogst.NextState;

					logstr = logstr .. "forced from " .. prevLogStateTics .. "/" .. prevlogst.tics .. " tics, should have been \"" .. DecoratedState( prevnextst ) .. DARKGRAY .. "\"";
				}

				logstr = logstr .. ")";
			}

			ZCGlobal.ClearscopeLog( LL_Main | LL_NoDot, logstr );
		} // of if ( prevlogst && prevlogst != st ) {}

		prevLogStates[ fieldPos ].st = st;
		prevLogStateTics = thing.Tics;
	} // of protected void DoStatesLogging( Actor thing, ZCheckerField thingfield ) {}

	protected void addFlag( bool flagcond, String flagname ) {
		tempFlagsStr = tempFlagsStr .. ( flagcond? GREEN : BLACK ) .. flagname .. " ";
	}


	protected String addPSpriteState( PSprite pspr ) {
		if ( !pspr || !pspr.CurState )
			return "";

		State st = pspr.CurState;
		String addstr = "";
		tempFlagsStr = "";

		if ( curstateFlagsType ) {
			switch ( curstateFlagsType ) {
				case 1:
					addFlag( st.bFast, "fst" );
					addFlag( st.bSlow, "slw" );
					addFlag( st.bFullbright, "lit" );
					addFlag( st.bSameFrame, "frcp" );
					addFlag( st.bDehacked, "deh" );
					addFlag( pspr.bCVarFast, "cvrf" );
					addFlag( pspr.processPending, "pend" );
					addFlag( pspr.firstTic, "1st" );
					addFlag( pspr.bAddWeapon, "+wp" );
					addFlag( pspr.bAddBob, "+bob" );
					addFlag( pspr.bPowDouble, "x2sp" );
					break;
				case 2:
					addFlag( st.bFast, "fast" );
					addFlag( st.bSlow, "slow" );
					addFlag( st.bFullbright, "lit" );
					addFlag( st.bSameFrame, "sameframe" );
					addFlag( st.bDehacked, "deh-modified" );
					addFlag( pspr.bCVarFast, "cvarfast" );
					addFlag( pspr.processPending, "pending" );
					addFlag( pspr.firstTic, "1sttic" );
					addFlag( pspr.bAddWeapon, "addweap" );
					addFlag( pspr.bAddBob, "addbob" );
					addFlag( pspr.bPowDouble, "x2speed" );
					break;
				default:
					break;
			} // of switch ( curstateFlagsType ) {}

			addstr = "\n" .. BreakPanelLines( tempFlagsStr, textwidth: 28 );
		} // of if ( curstateFlagsType ) {}

		if ( curstateExtraInfo ) {
			addstr.AppendFormat( DARKRED .. "\n CurPos: (%.3f, %.3f);\n OldPos: (%.3f, %.3f);\n Alpha: " .. BRICK .. " %.3f" .. DARKRED .. ";\n Layer ID: " .. BRICK .. " %i" .. DARKRED .. ".",
							pspr.x, pspr.y, pspr.oldx, pspr.oldy,
							pspr.alpha, pspr.id );

			addstr = addstr .. DARKGRAY .. "\n TicRange " .. GRAY .. st.TicRange .. DARKGRAY .. ", misc " .. GRAY .. st.misc1 .. DARKGRAY .. "/" .. GRAY .. st.misc2;
		} // of if ( curstateExtraInfo ) {}

		return addstr;
	} // of protected String addPSpriteState( PSprite pspr, String psprName ) {}



	override String GetInfo( Actor thing, ZCheckerField thingfield ) {
		String outStr = "";
		State curState = thing.CurState;
		State st = curState;

		bool isWeaponInHands = ( thingfield.actorType == IAT_StateProvider );
		PlayerPawn weapOwner = NULL;

		Array<State> prevstates;
		Array<String> prevstatesstr;

		if ( !statesAmountCVar ) {
			statesAmountCVar = CVar.GetCVar( "mcm_zchecker_infovar_statesamount", players[ consoleplayer ] );
			statesLoggingCVar = CVar.GetCVar( "mcm_zchecker_infovar_stateslogging", players[ consoleplayer ] );
			stateTicsCVar = CVar.GetCVar( "mcm_zchecker_infovar_statetic", players[ consoleplayer ] );
			stateFlagsCVar = CVar.GetCVar( "mcm_zchecker_infovar_stateflags", players[ consoleplayer ] );
			stateExtraInfoCVar = CVar.GetCVar( "mcm_zchecker_infovar_stateextras", players[ consoleplayer ] );
			pspriteOverlaysModeCVar = CVar.GetCVar( "mcm_zchecker_infovar_statepsprlayersmode", players[ consoleplayer ] );
			pspriteExtraOverlayIDCVar = CVar.GetCVar( "mcm_zchecker_infovar_statepsprlayerid", players[ consoleplayer ] );
		}

		uint statesAmount = statesAmountCVar.GetInt();
		bool statesLogging = statesLoggingCVar.GetBool();

		if ( isWeaponInHands ) {
			weapOwner = getItemPlayerOwner( Inventory( thing ) );

			if ( weapOwner.player.psprites )
				curState = st = weapOwner.player.psprites.CurState;
		}

		if ( statesAmount == 0 )
			statesAmount = 0xFFFF;

		// States and loops information:
		prevstates.Clear();
		prevstatesstr.Clear();
		outStr = outStr .. ( isWeaponInHands? "PSprite states" : "States" );

		if ( statesLogging ) {
			outStr = outStr .. DARKGRAY .. " [" .. LIGHTBLUE .. "logging" .. DARKGRAY .. "]";
			DoStatesLogging( thing, thingfield );

		} else if ( prevLogStates[ 0 ].st ) {
			for ( int i = 0; i < MaxTestee; i++ )
				prevLogStates[ i ].st = NULL;
		}

		outStr = outStr .. NORMAL .. ":\n";

		bool loopFound = false;
		int statesCnt = 0;

		do {
			prevstates.Push( st );
			prevstatesstr.Push( DecoratedState( st ) );

			st = st.NextState;

			int backloopStateIndex = prevstates.Find( st );

			if ( loopFound = ( backloopStateIndex != prevstates.Size() ) ) {
				// Difference the one-state loop (waiting) and the normal loop:
				if ( backloopStateIndex == statesCnt ) {
					prevstatesstr[ statesCnt ] = prevstatesstr[ statesCnt ] .. TEXTCOLOR_WHITE .. " (loop here)";
				} else {
					prevstatesstr[ backloopStateIndex ] = prevstatesstr[ backloopStateIndex ] .. TEXTCOLOR_WHITE .. " <<loop";
					prevstatesstr[ statesCnt ] = prevstatesstr[ statesCnt ] .. TEXTCOLOR_WHITE .. " ^ loop";
				}
			}

			statesCnt++;
		} while ( st && st != curState && statesCnt < statesAmount && !loopFound );

		for ( int i = 0; i < prevstatesstr.Size(); i++ )
			outStr = outStr .. prevstatesstr[ i ] .. "\n";

		RemoveLastNewlineSymbol( outStr );

		if ( statesAmount != 0xFFFF ) {
			while ( statesCnt < statesAmount ) {
				outStr = outStr .. "\n";
				statesCnt++;
			}
		}


		st = curState;
		PSprite pspr = NULL;

		if ( weapOwner && weapOwner.player )
			pspr = weapOwner.player.psprites;

		// Tics information:
		if ( stateTicsCVar.GetBool() ) {
			outStr = outStr .. "\n";

			if ( st.Tics < 0 ) {
				outStr = outStr .. DARKGREEN .. "===== static =====";
			} else {
				int ticsbarLeft = 1;

				int curtics = ( isWeaponInHands? weapOwner.player.psprites.Tics : thing.tics );

				if ( curtics > 1 )
					ticsbarLeft = int( 20 * ( curtics - 1 ) / ( st.Tics? st.Tics : 1 ) );

				if ( ticsbarLeft > 20 ) {
					outStr = outStr .. LIGHTBLUE .. "<<<" .. GRAY;
				} else {
					String ticbar = DARKGREEN;
    
					for ( int i = 0; i < 20 - ticsbarLeft; i++ )
						ticbar = ticbar .. "=";

					ticbar = ticbar .. ">" .. BLACK;

					for ( int i = 0; i < ticsbarLeft - 1; i++ )
						ticbar = ticbar .. "+";

					outStr = outStr .. ticbar .. DARKGRAY;
				}
			}

			if ( !isWeaponInHands )
				outStr = outStr .. " (" .. thing.tics .. ")";
			else if ( pspr )
				outStr = outStr .. " (" .. pspr.tics .. ")";
		}


		// Extra state information:
		curstateExtraInfo = stateExtraInfoCVar.GetBool();
		curstateFlagsType = stateFlagsCVar.GetInt();

		if ( !curstateExtraInfo && !curstateFlagsType )
			return outStr;

		if ( !isWeaponInHands ) {
			tempFlagsStr = "";

			if ( curstateFlagsType ) {
				switch ( curstateFlagsType ) {
					case 1:
						addFlag( st.bFast, "fst" );
						addFlag( st.bSlow, "slw" );
						addFlag( st.bFullbright, "lit" );
						addFlag( st.bNoDelay, "-dly" );
						addFlag( st.bSameFrame, "frcp" );
						addFlag( st.bCanRaise, "rais" );
						addFlag( st.bDehacked, "deh" );
						break;
					case 2:
						addFlag( st.bFast, "fast" );
						addFlag( st.bSlow, "slow" );
						addFlag( st.bFullbright, "lit" );
						addFlag( st.bNoDelay, "nodelay" );
						addFlag( st.bSameFrame, "sameframe" );
						addFlag( st.bCanRaise, "canraise" );
						addFlag( st.bDehacked, "deh-modified" );
						break;
					default:
						break;
				}

				outStr = outStr .. "\n" .. BreakPanelLines( tempFlagsStr );
			} // of if ( curstateFlagsType ) {}

			if ( curstateExtraInfo ) {
				tempFlagsStr = "";

				if ( st.UseFlags & SUF_ACTOR )
					tempFlagsStr = tempFlagsStr .. "actor";
				if ( st.UseFlags & SUF_OVERLAY )
					tempFlagsStr = tempFlagsStr .. ( tempFlagsStr != ""? ", " : "" ) .. "overlay";
				if ( st.UseFlags & SUF_WEAPON )
					tempFlagsStr = tempFlagsStr .. ( tempFlagsStr != ""? ", " : "" ) .. "weap";
				if ( st.UseFlags & SUF_ITEM )
					tempFlagsStr = tempFlagsStr .. ( tempFlagsStr != ""? ", " : "" ) .. "item";

				outStr = outStr .. DARKRED .. "\n Used by " .. GRAY .. tempFlagsStr .. DARKGRAY .. "\n TicRange " .. GRAY .. st.TicRange .. DARKGRAY .. ", misc " .. GRAY .. st.misc1 .. DARKGRAY .. "/" .. GRAY .. st.misc2;
			} // of if ( curstateExtraInfo ) {}


		} else if ( pspr ) { // Thanks to Il Str for crash reporting.
			int pspriteOverlaysMode = pspriteOverlaysModeCVar.GetInt();
			PlayerInfo pl = weapOwner.player;
			int pspriteSpecialOverlayIDString = pspriteExtraOverlayIDCVar.GetString().ToInt();

			switch ( pspriteOverlaysMode ) {
				case 1: // Main overlay only.
					outStr = outStr .. addPSpriteState( pl.FindPSprite( PSprite.WEAPON ) );
					break;

				case 2: // Main + flash overlays.
					outStr = outStr .. addPSpriteState( pl.FindPSprite( PSprite.WEAPON ) ) 
							.. "\n" .. addPSpriteState( pl.FindPSprite( PSprite.FLASH ) );
					break;

				case 3: // Special overlay only.
					outStr = outStr .. addPSpriteState( pl.FindPSprite( pspriteSpecialOverlayIDString ) );
					break;

				case 4: // Main + special overlays.
					outStr = outStr .. addPSpriteState( pl.FindPSprite( PSprite.WEAPON ) ) 
							.. "\n" .. addPSpriteState( pl.FindPSprite( pspriteSpecialOverlayIDString ) );
					break;

				case 5: // All overlays.
					for ( ; pspr != NULL; pspr = pspr.Next )
						outStr = outStr .. addPSpriteState( pspr );
					break;

				default:
					break;
			} // of switch ( pspriteOverlaysMode ) {}

		} // of else if ( pspr ) {}

		return outStr;
	} // of override String GetInfo( Actor thing, ZCheckerField thingfield ) {}

} // of class ZCStatesInfoPanel: ZCBaseInfoPanelPart {}


class ZCSpritesInfoPanel: ZCBaseInfoPanelPart {
	// For the compatibility with older versions:
	enum EExtraRenderStyles {
		STYLE_Multiply = STYLE_AddShaded + 1,
		STYLE_InverseMultiply,
		STYLE_ColorBlend,
		STYLE_Source,
		STYLE_ColorAdd
	};

	override void OnCreate( void ) {
		optionCVarName = "mcm_zchecker_info_visual";
		optionLabel = "Visual";
	}

	protected String GetRenderStyleStr( int style ) {
		String str = "";

		switch ( style ) {
			case STYLE_None: str = "None"; break;
			case STYLE_Normal: str = "Normal"; break;
			case STYLE_Fuzzy: str = "Fuzzy"; break;
			case STYLE_SoulTrans: str = "SoulTrans"; break;
			case STYLE_OptFuzzy: str = "OptFuzzy"; break;
			case STYLE_Stencil: str = "Stencil"; break;
			case STYLE_Translucent: str = "Translucent"; break;
			case STYLE_Add: str = "Add"; break;
			case STYLE_Shaded: str = "Shaded"; break;
			case STYLE_TranslucentStencil: str = "TranslucentStencil"; break;
			case STYLE_Shadow: str = "Shadow"; break;
			case STYLE_Subtract: str = "Subtract"; break;
			case STYLE_AddStencil: str = "AddStencil"; break;
			case STYLE_AddShaded: str = "AddShaded"; break;
			case STYLE_Multiply: str = "Multiply"; break;
			case STYLE_InverseMultiply: str = "InverseMultiply"; break;
			case STYLE_ColorBlend: str = "ColorBlend"; break;
			case STYLE_Source: str = BLACK .. "(Source)"; break;
			case STYLE_ColorAdd: str = "ColorAdd"; break;
			default: str = BLACK .. "(Unknown)"; break;
		}

		return str;
	}

	override String GetInfo( Actor thing, ZCheckerField thingfield ) {
		String outStr = "";

		TextureID texture;
		bool textureBool;
		vector2 textureVec2;

		[ texture, textureBool, textureVec2 ] = thing.curstate.GetSpriteTexture( 1 );

		String textureName = TexMan.GetName( texture );

		int textureRealSizeX, textureRealSizeY;
		[ textureRealSizeX, textureRealSizeY ] = TexMan.GetSize( texture );

		vector2 textureSize = TexMan.GetScaledSize( texture );
		vector2 textureOffset = TexMan.GetScaledOffset( texture );

		outStr.AppendFormat( DARKGRAY .. "Alpha " .. LIGHTBLUE .. "%.3f" .. DARKGRAY .. ", render " .. GRAY .. "%s" .. DARKGRAY .. ".\n", thing.alpha, GetRenderStyleStr( thing.GetRenderStyle() ) );
		outStr.AppendFormat( DARKGRAY .. "Scale " .. DARKGREEN .. "(%+2.3f, %+2.3f)\n" .. DARKGRAY, thing.scale.x, thing.scale.y );
		outStr.AppendFormat( DARKGRAY .. "Size (" .. GRAY .. "%2.3f" .. BLUE .. "x" .. GRAY .. "%2.3f" .. DARKGRAY .. "); \nReal " .. textureRealSizeX .. BLUE .. "x" .. DARKGRAY .. textureRealSizeY .. " pixels.\n", textureSize.x, textureSize.y );
		outStr.AppendFormat( GRAY .. ( textureName.Mid( 5, 1 ) == "0"? "Faced" : "Rotor" ) .. DARKGRAY .. " ID %i, TranslID %i;\n", int( thing.sprite ), thing.Translation );
		outStr.AppendFormat( DARKGRAY .. "Txtr ofs " .. ZCGlobal.squeezeVector2dec( textureOffset, 2 ) .. ";\nbool %i vec2 " .. ZCGlobal.squeezeVector2dec( textureVec2, 2 ) .. ".", textureBool );

		return outStr;
	}
} // of class ZCSpritesInfoPanel: ZCBaseInfoPanelPart {}
