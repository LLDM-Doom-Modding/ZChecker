//
// ZChecker utility classes and most of the general constants.
//

// Main constants:
const ZCHECKER_AGRS_SEPARATOR = "@@";

// [McM] Reserved handler orders in other projects:
//   AutoAmbient:    0x7FAA0004;
//   Weathremum:     0x7FAA0007;
//   A.C., global:   0x7FAA0008;
//   A.C., packs:    0x7FAA0009.
const ZCheckerHandlerOrder   = -0x7FAA0005; // Proposed to call it before (almost) everything else.
const ZCheckerMapHandlerOrder = 0x7FAA0006;



// Logging system constants:
enum EZCheckerLogLevels {
	LL_Emergency = 0,
	LL_General = 1,
	LL_Detailed,
	LL_Developer,
	LL_Debug,

	LL_Critical 	= LL_Emergency,
	LL_Avary 		= LL_Emergency,
	LL_Common 		= LL_General,
	LL_Normal 		= LL_General,
	LL_Main 		= LL_General,
	LL_Extended 	= LL_Detailed,
	LL_Details 		= LL_Detailed,
	LL_Extra 		= LL_Developer,
	LL_Development 	= LL_Developer,
	LL_Interface 	= LL_Developer,
	LL_APIMessage	= LL_Developer,

	LL_FlagsMask	= 0xFFF0,
	LL_NoLocalize	= 0x2000,
	LL_NoDot		= 0x4000,
	LL_NoPrefix		= 0x8000
};

const LLCOLOR_MAIN = "\c-";
const LLCOLOR_NORMAL = LLCOLOR_MAIN;
const LLCOLOR_DARK = TEXTCOLOR_DARKGRAY;
const LLCOLOR_WARNING = TEXTCOLOR_YELLOW;
const LLCOLOR_DEBUG = TEXTCOLOR_DARKGRAY;
const LLCOLOR_EMERGENCY = TEXTCOLOR_FIRE;

// Constants used in specific areas of the API:
enum EZCheckerInfoActorType {
	IAT_Normal = 0,
	IAT_StateProvider
};


// Internal constants of limited use in API:
enum ENewlineTypes {
	ZCNL_Unknown = 0,
	ZCNL_DOS,			// 0x0D, 0x0A
	ZCNL_Unix,			// 0x0A
	ZCNL_Mac,			// 0x0D
	ZCNL_DOSReversed	// 0x0A, 0x0D
};

const LETTER_A_UPPER = 65;
const LETTER_Z_UPPER = 90;
const LETTER_A_LOWER = 97;
const LETTER_Z_LOWER = 122;


// Slows down a ZCheckerActorInfo objects handling and thus now archived.
//const STAT_ZCHECKER_THINKERS = Thinker.STAT_USER_MAX - 1;



class ZCGlobal: Thinker {
	EZCheckerLogLevels zcCurLogLevel;
	private ZCheckerHandler zcHandler;
	private transient CVar zcLoglevelCVar;

	Array<ZCInternalStringDictionaryCell> savedClassnameVariables;

	/* === ZChecker utils === */

	void UpdateLogLevel( void ) {
		if ( !zcLoglevelCVar )
			zcLoglevelCVar = CVar.FindCVar( "lldm_zc_loglevel" );

		zcCurLogLevel = zcLoglevelCVar.GetInt();
	}

	static void ForceSetLogLevel( EZCheckerLogLevels loglevel ) {
		Get().zcCurLogLevel = clamp( loglevel, LL_Emergency, LL_Debug );
	}

	static clearscope ZCGlobal ClearscopeGet( void ) {
		return ZCGlobal( ThinkerIterator.Create( "ZCGlobal", STAT_STATIC ).Next() );
	}

	static play ZCGlobal Get( void ) {
		ZCGlobal it = ClearscopeGet();

		if ( !it ) {
			// Creating and initializating a singleton global object:
			it = new( "ZCGlobal" );
			it.ChangeStatNum( STAT_STATIC );
			it.UpdateLogLevel();
			it.savedClassnameVariables.Clear();
		}

		return it;
	} // of static play ZCGlobal Get( void ) {}

	clearscope EZCheckerLogLevels _GetLoglevel( void ) {
		return zcCurLogLevel;
	}
	static clearscope EZCheckerLogLevels GetLoglevelClearscope( void ) {
		return ClearscopeGet().zcCurLogLevel;
	}
	static play EZCheckerLogLevels GetLoglevel( void ) {
		return Get().zcCurLogLevel;
	}

	void SaveHandler( ZCheckerHandler inithandler ) {
		if ( !zcHandler )
			zcHandler = inithandler;
	}

	clearscope ZCheckerHandler _GetHandler( void ) {
		return zcHandler;
	}
	static play ZCheckerHandler GetHandler( void ) {
		return Get().zcHandler;
	}
	static clearscope ZCheckerHandler GetHandlerClearscope( void ) {
		return ClearscopeGet().zcHandler;
	}


	// Prints well-decorated information string:
	static clearscope void ClearscopeLog( EZCheckerLogLevels loglevel, String text ) {
		String logPrefix;

		// Message prefix:
		if ( !( loglevel & LL_NoPrefix ) ) {
			switch ( loglevel & ~LL_FlagsMask ) {
				case LL_Debug:
					// This logging level generally used only by internal developers.
					logPrefix = LLCOLOR_DEBUG .. "[ZC Debug] ";
					break;

				case LL_Developer:
					// "ZChecker" and "API" are spelled as "ZChecker" and "API" in any language.
					logPrefix = LLCOLOR_DARK .. "[" .. TEXTCOLOR_DARKBROWN .. "ZC API" .. LLCOLOR_DARK .. "] " .. LLCOLOR_MAIN;
					break;

				case LL_Emergency:
					logPrefix = String.Format( TEXTCOLOR_RED .. "%s " .. LLCOLOR_EMERGENCY, ZCGlobal.Localize( "LOG_EMERGENCY_PREFIX" ) );
					break;

				default:
					logPrefix = TEXTCOLOR_GRAY .. "[ZC] " .. LLCOLOR_MAIN;
					break;
			} // of switch ( loglevel & ~LL_FlagsMask ) {}
		} // of if ( !( loglevel & LL_NoPrefix ) ) {}


		// Auto-localization (without a "ZCHECKER_" prefix in text):
		if ( text.Left( 1 ) == "$" && !( loglevel & LL_NoLocalize ) )
			text = ZCGlobal.Localize( text.Mid( 1, text.Length() - 1 ) );


		// Dot at the end of the line:
		if ( !( loglevel & LL_NoDot ) ) {
			String lastch = text.Mid( text.Length() - 1 );

			if ( !( lastch == "." || lastch == "!" || lastch == "?" || lastch == ":" || lastch == ";" ) )
				text = text .. ".";
		}


		// Replacing some colors:
		text.Replace( "\034!", LLCOLOR_WARNING );
		text.Replace( "\034~", LLCOLOR_DARK );
		//text.Replace( "\034-", LLCOLOR_MAIN ); // Right now "\c-" replaces to the "\c-" here.


		// Logging:
		console.printf( "%s%s", logPrefix, text );

	} // of static clearscope void ClearscopeLog( EZCheckerLogLevels loglevel, String text ) {}

	// A play-scope wrapper around a data-scope method (mostly used):
	static play void Log( EZCheckerLogLevels loglevel, String text ) {
		if ( GetLoglevel() >= ( loglevel & ~LL_FlagsMask ) )
			ClearscopeLog( loglevel, text );
	}

	static ui void UILog( EZCheckerLogLevels loglevel, String text ) {
		ZCGlobal it = ZCGlobal( ThinkerIterator.Create( "ZCGlobal", STAT_STATIC ).Next() );

		if ( it && ( it._GetLoglevel() >= ( loglevel & ~LL_FlagsMask ) ) )
			ClearscopeLog( loglevel, text );
	}

	static clearscope void DataLog( EZCheckerLogLevels loglevel, String text ) {
		CVar curloglevel = CVar.FindCVar( "lldm_zc_loglevel" );

		if ( curloglevel.GetInt() >= ( loglevel & ~LL_FlagsMask ) )
			ClearscopeLog( loglevel, text );
	}

	// Compatibility with GZDoom higher than 4.0.0, because '$EMPTY_NODE = ""'
	//strangely localizes as string "EMPTY_NODE", not "":
	static clearscope String Localize( String textid ) {
		String localized = StringTable.Localize( "$ZCHECKER_" .. textid );

		return ( localized == "ZCHECKER_" .. textid? "" : localized );
	}
	static clearscope String Locz( String textid ) {
		String localized = StringTable.Localize( "$ZCHECKER_" .. textid );

		return ( localized == "ZCHECKER_" .. textid? "" : localized );
	}

	// Much more convenient method to localize ZChecker (and maybe user) strings.
	static clearscope String FreeLocalize( String text ) {
		if ( text.Left( 10 ) == "$ZCHECKER_" )
			return StringTable.Localize( text );

		String textLeft2 = text.Left( 2 );
		if ( textLeft2 == "$$" || textLeft2 == "\\$" )
			return StringTable.Localize( text.Mid( 1, text.Length() - 1 ) );

		if ( text.Left( 1 ) == "$" )
			return ZCGlobal.Localize( text.Mid( 1, text.Length() - 1 ) );

		return text;
	}

	static clearscope bool StrStartsWith( String text, String prefix ) {
		return !!( text.Left( prefix.Length() ) == prefix );
	}

	static clearscope bool StrEndsWith( String text, String postfix ) {
		int textlen = text.Length();
		int postlen = postfix.Length();

		if ( postlen > textlen )
			return false;

		return !!( text.Mid( textlen - postlen, postlen ) == postfix );
	}


	// Check for the special ZChecker level:
	static clearscope bool IsEverythingLevel( void ) {
		// Got from "mapchecksum everything" CCMD:
		//return level.GetChecksum() ~== "8FBB774BE1D239B5C7CB514DF9B41A2E" || ( CVar.FindCVar( "lldm_zc_forceevmap" ).GetBool() );

		return ( ( level.mapname.Left( 11 ) ~== "EVERYTHING_" && level.levelname.IndexOf( "ZChecker" ) != -1 )
			|| ( CVar.FindCVar( "lldm_zcev_forcemap" ).GetBool() ) );
	}

	static clearscope bool DangerousCCMDsAllowed( String desc = "executing dangerous command" ) {
		bool isallowed = CVar.FindCVar( "lldm_zc_allowdangerccmds" ).GetBool();

		if ( isallowed && desc != "" )
			DataLog( LL_Main, LLCOLOR_WARNING .. ZCGlobal.Locz( "CCMDS_DANGERALLOWEDWARN" ) .. ": " .. LLCOLOR_MAIN .. desc );

		return isallowed;
	}

	static clearscope bool SpecialZCActorsHandling( void ) {
		return !CVar.FindCVar( "lldm_zc_internalclasses_rawhandling" ).GetBool();
	}



	/* === ZChecker operating on the internal and saves-through variables === */

	// Fixing an ancient ZScript bug...
	/*static clearscope void SetUserCVarString( String cvarName, String cvarValue ) {
		CVar usercvar = CVar.GetCVar( cvarName, players[ consoleplayer ] );

		if ( usercvar ) {
			CVar metastring = CVar.FindCVar( "lldm_zcinternal_metastring" );
			metastring.SetString( cvarName );
			usercvar.SetString( cvarValue );

			ACS_Execute( -int( 'ZChecker_SetUserCVar' ), 0, consoleplayer );
		}
	}*/
	static clearscope void PrepareUserCVarMetastring( String cvarName, String cvarValue ) {
		CVar usercvar = CVar.GetCVar( cvarName, players[ consoleplayer ] );

		if ( usercvar ) {
			CVar metastring = CVar.FindCVar( "lldm_zcinternal_metastring" );
			metastring.SetString( cvarName );
			usercvar.SetString( cvarValue );
		} else {
			DataLog( LL_Emergency, "ZCGlobal.PrepareUserCVarMetastring(). Cannot find CVar \"" .. TEXTCOLOR_RED .. cvarName .. LLCOLOR_EMERGENCY .. "\" (setup value \"" .. cvarValue .. "\")" );
		}
	}

	static clearscope void PrepareUserCVarString( String cvarName, String cvarValue ) {
		CVar usercvar = CVar.GetCVar( cvarName, players[ consoleplayer ] );

		if ( usercvar )
			usercvar.SetString( cvarValue );
		else
			DataLog( LL_Emergency, "ZCGlobal.PrepareUserCVarString(). Cannot find CVar \"" .. TEXTCOLOR_RED .. cvarName .. LLCOLOR_EMERGENCY .. "\" (setup value \"" .. cvarValue .. "\")" );
	}



	clearscope String GetClassnameVariable( String zcname ) {
		if ( zcname.CharAt( 0 ) != "$" )
			return "$";

		String outStr = "";

		for ( int i = 0; i < savedClassnameVariables.Size(); i++ ) {
			//console.printf( "#" .. i .. ": dict[ '" .. savedClassnameVariables[ i ].key .. "' ] == '" .. savedClassnameVariables[ i ].value .. "'. Arg is " .. zcname );
			if ( savedClassnameVariables[ i ].key == zcname ) {
				outStr = savedClassnameVariables[ i ].value;
				break;
			}
		}

		return outStr;
	}

	play bool DeleteClassnameVariable( String zcname ) {
		if ( zcname.CharAt( 0 ) != "$" ) {
			ZCGlobal.Log( LL_Main, GetClassName() .. "::DeleteClassnameVariable(). " .. LLCOLOR_WARNING .. "Classname variable name must start with \"$\" " .. LLCOLOR_MAIN .. "(got \"" .. TEXTCOLOR_RED .. zcname .. LLCOLOR_MAIN .. "\")." );
			return false;
		}

		bool found = false;

		for ( int i = 0; i < savedClassnameVariables.Size(); i++ ) {
			if ( savedClassnameVariables[ i ].key == zcname ) {
				ZCGlobal.Log( LL_Debug, GetClassName() .. "::DeleteClassnameVariable(). Found dict[\"" .. zcname .. "\"] (index " .. i .. "/" .. savedClassnameVariables.Size() .. ")." );

				savedClassnameVariables.Delete( i, 1 );
				found = true;
				break;
			}
		}

		if ( !found ) {
			ZCGlobal.Log( LL_Main, GetClassName() .. "::DeleteClassnameVariable(). Classname variable \"" .. zcname .. "\"" .. LLCOLOR_WARNING  .. " not found." );
			return false;
		}

		return found;
	}

	play void ClearAllClassnameVariables( void ) {
		savedClassnameVariables.Clear();
	}

	play bool SetClassnameVariable( String zcname, String zcvalue ) {
		if ( zcname.CharAt( 0 ) != "$" ) {
			ZCGlobal.Log( LL_Main, GetClassName() .. "::SetClassnameVariable(). " .. LLCOLOR_WARNING .. "Classname variable name must start with \"$\" " .. LLCOLOR_MAIN .. "(got \"" .. TEXTCOLOR_RED .. zcname .. LLCOLOR_MAIN .. "\")." );
			return false;
		}

		ZCInternalStringDictionaryCell dictcell = NULL;

		for ( int i = 0; i < savedClassnameVariables.Size(); i++ ) {
			if ( savedClassnameVariables[ i ].key == zcname ) {
				dictcell = savedClassnameVariables[ i ];
				break;
			}
		}

		if ( !dictcell ) {
			dictcell = new( 'ZCInternalStringDictionaryCell' );
			dictcell.key = zcname;

			savedClassnameVariables.Push( dictcell );
		}

		dictcell.value = zcvalue;

		ZCGlobal.Log( LL_Debug, GetClassName() .. "::SetClassnameVariable(). Dict[\"" .. zcname .. "\"] == \"" .. GetClassnameVariable( zcname ) .. "\"." );

		return true;
	}


	/* === General (other) utils === */

    static clearscope String squeezeVector2( vector2 vec ) {
		return String.Format( "(%i, %i)", int( vec.x ), int( vec.y ) );
    }

	static clearscope String squeezeVector2dec( vector2 vec, int decimals = 2 ) {
		String formatted = String.Format( "(%%.%if, %%.%if)", decimals, decimals );
		return String.Format( formatted, vec.x, vec.y );
	}

    static clearscope String squeezeVector3( vector3 vec ) {
		return String.Format( "(%i, %i, %i)", int( vec.x ), int( vec.y ), int( vec.z ) );
    }

	static clearscope String squeezeVector3dec( vector3 vec, int decimals = 2 ) {
		String formatted = String.Format( "(%%.%if, %%.%if, %%.%if)", decimals, decimals, decimals );
		return String.Format( formatted, vec.x, vec.y, vec.z );
	}

	static clearscope double det2( Vector2 a, Vector2 b ) {
		return a.x * b.y - a.y * b.x;
	}

	static clearscope Vector2 BasisCoefficients2( Vector2 a1, Vector2 a2, Vector2 b ) {
		double det = det2( a1, a2 );
		return ( det2( b, a2 ) / det, det2( a1, b ) / det );
	}

	static clearscope double, double vector3ToAnglePitch( vector3 vec ) {
		return atan2( vec.y, vec.x ), -atan2( vec.z, vec.xy.length() );
	}

	static vector3 anglePitchToVector3( double angle, double pitch ) {
		double cosangle = cos( angle );
		double cospitch = cos( pitch );

		return ( cosangle * cospitch, sin( angle ) * cospitch, sin( pitch ) );
	}

	static clearscope String ObjectName( Object obj ) {
		return ( obj? obj.GetClassName() .. "" : "<NULL>" );
	}

	static clearscope String ClassName( class cls ) {
		return ( cls? cls.GetClassName() .. "" : "<NULL>" );
	}

	// Returns "true" is string is an integer; "converted" is a pointer:
	static clearscope bool str2int_Ptr( in String str, out int converted, bool usesign = false ) {
		bool isInteger = false;

		if ( str.Length() ) {
			bool isSigned = false;

			int firstChar = str.CharCodeAt( 0 );

			if ( firstChar == 0x2D /* '-' */ && usesign ) {
				isSigned = true;
				str = str.Mid( 1, str.Length() - 1 );
				firstChar = str.CharCodeAt( 0 );
			}

			int tempConverted = str.ToInt();

			if ( ( firstChar >= 0x31 && firstChar <= 0x39 ) || ( firstChar == 0x30 && str.Length() == 1 ) ) {
				isInteger = ( usesign || !isSigned );
				converted = ( isSigned? -tempConverted : tempConverted );
			}
		}

		return isInteger;
	}

	// Returns "true" is string is a float-value; "converted" is a pointer:
	static clearscope bool str2double_Ptr( in String str, out double converted ) {
		bool isDouble = false;

		if ( str.Length() ) {
			bool isSigned = false;

			int firstChar = str.CharCodeAt( 0 );

			if ( firstChar == 0x2D /* '-' */ ) {
				isSigned = true;
				str = str.Mid( 1, str.Length() - 1 );
				firstChar = str.CharCodeAt( 0 );
			}

			double tempConverted = str.ToDouble();
			int tempStrlen = str.Length();

			// Removing leading zeros:
			while ( firstChar == 0x30 && tempStrlen > 1 ) {
				tempStrlen--;
				str = str.Mid( 1, tempStrlen );
				firstChar = str.CharCodeAt( 0 );
			}

			// Treat as a float-point digit if first char is '0'..'9' or '.':
			if ( ( firstChar >= 0x30 && firstChar <= 0x39 ) || ( firstChar == 0x2E /* '.' */ ) ) {
				isDouble = true;
				converted = ( isSigned? -tempConverted : tempConverted );
			}
		}

		return isDouble;
	}


	/* === Specific utils. May be useless in the non-core scripts === */

	// Remove all first and all last spaces and tabs in the string.
	static clearscope String TruncateStringBySpaces( String str ) {

		uint code = str.CharCodeAt( 0 );
		while ( ( code == 9 || code == 11 || code == 32 ) && str.Length() ) {
			str = str.Mid( 1 );
			code = str.CharCodeAt( 0 );
		}

		uint len = str.Length() - 1;
		code = str.CharCodeAt( len );

		while ( ( code == 9 || code == 11 || code == 32 ) ) {
			str = str.Left( len );
			len = str.Length() - 1;
			code = str.CharCodeAt( len );
		}

		return str;
	}

	static clearscope int StringIndexOfAny( String str, String tokens, int startindex = 0 ) {
		int foundpos = -1;

		for ( int i = 0; i < tokens.Length() && foundpos == -1; i++ )
			foundpos = str.IndexOf( tokens.CharAt( i ), startindex );

		return foundpos;
	}

	// Parses newline type in the text file (DOS, Linux, MacOS).
	static clearscope ENewlineTypes GetTextNewlinesType( String text ) {
		ENewlineTypes nltype = ZCNL_Unknown;

		if ( text != "" ) {
			int curPos = 0;
			int textLength = text.Length();

			while ( nltype == ZCNL_Unknown && curPos < textLength ) {
				if ( text.CharCodeAt( curPos ) == 0x0D )
					nltype = ( ++curPos < textLength && text.CharCodeAt( curPos ) == 0x0A )? ZCNL_DOS : ZCNL_Mac;
				else if ( text.CharCodeAt( curPos ) == 0x0A )
					nltype = ( ++curPos < textLength && text.CharCodeAt( curPos ) == 0x0D )? ZCNL_DOSReversed : ZCNL_Unix;

				curPos++;
			}

		} // of if ( text != "" ) {}

		return nltype;
	} // of static clearscope ENewlineTypes GetTextNewlinesType( String text ) {}

} // of class ZCGlobal: Thinker {}



// Thanks to Sir Robin for his ZScript Quicksort library.
// Original topic and code: https://forum.zdoom.org/viewtopic.php?f=105&t=75757.

class ZCInventoryQuicksort {
	Array<Inventory> arr;

	enum EQuicksortTypes {
		QST_None = 0,
		QST_Names,
		QST_Amount,
		QST_MaxAmount
	};

	void Sort( void ) {
		if ( arr.Size() < 2 )
			return;

		Quicksort( 0, arr.Size() - 1 );
	}

	void Reverse( void ) {
		int iMax = arr.Size() - 1;
		int iHalf = arr.Size() / 2;

		for ( int i = 0; i < iHalf; i++ )
			SwapElements( i, iMax - i );
	}


	protected virtual void QuicksortPartition( in out int i, int low, int high ) {
		String pivot = arr[ high ].GetClassName();

		for ( int j = low; j <= high - 1; j++ ) {
			if ( ( arr[ j ].GetClassName() .. "" ) < pivot ) {
				i++;
				SwapElements( i, j );
			}
		}
	} // of protected virtual void QuicksortPartition( in out int i, int low, int high ) {}


	/* Internal section */

	protected void SwapElements( int index1, int index2 ) {
		Inventory temp = arr[ index1 ];

		arr[ index1 ] = arr[ index2 ];
		arr[ index2 ] = temp;
	}

	protected void Quicksort( int low, int high ) {
		if ( low < high ) {
			int pi = QuicksortPartitionWrapper( low, high );

			Quicksort( low, pi - 1 );
			Quicksort( pi + 1, high );
		}
	}

	protected int QuicksortPartitionWrapper( int low, int high ) {
		int i = ( low - 1 );

		QuicksortPartition( i, low, high );

		SwapElements( i + 1, high );

		return ( i + 1 );
	}
} // of class ZCInventoryQuicksort {}

class ZCInventoryAmountQuicksort: ZCInventoryQuicksort {
	override void QuicksortPartition( in out int i, int low, int high ) {
		int pivot = arr[ high ].Amount;

		for ( int j = low; j <= high - 1; j++ ) {
			if ( arr[ j ].Amount > pivot ) {
				i++;
				SwapElements( i, j );
			}
		}
	}
} // of class ZCInventoryAmountQuicksort: ZCInventoryQuicksort {}

class ZCInventoryMaxAmountQuicksort: ZCInventoryQuicksort {
	override void QuicksortPartition( in out int i, int low, int high ) {
		int pivot = arr[ high ].MaxAmount;

		for ( int j = low; j <= high - 1; j++ ) {
			if ( arr[ j ].MaxAmount > pivot ) {
				i++;
				SwapElements( i, j );
			}
		}
	}
} // of class ZCInventoryMaxAmountQuicksort: ZCInventoryQuicksort {}
