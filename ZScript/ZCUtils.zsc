// ZChecker utility classes.
// 

enum ENewlineTypes {
	ZCNL_Unknown = 0,
	ZCNL_DOS,			// 0x0D, 0x0A
	ZCNL_Unix,			// 0x0A
	ZCNL_Mac,			// 0x0D
	ZCNL_DOSReversed	// 0x0A, 0x0D
};

const LLCOLOR_MAIN = "\c-";
const LLCOLOR_WARNING = TEXTCOLOR_YELLOW;
const LLCOLOR_DEBUG = TEXTCOLOR_DARKGRAY;
const LLCOLOR_EMERGENCY = TEXTCOLOR_FIRE;

const LETTER_A_UPPER = 65;
const LETTER_Z_UPPER = 90;
const LETTER_A_LOWER = 97;
const LETTER_Z_LOWER = 122;


class ZCInternalStringDictionaryCell {
	String key;
	String value;
}

class ZCInternalActorNameCell {
	const ARRAY_Quantity = 28;

	int firstchar; // "0" is '_', "1" is 'a', "26" is 'z', "27" is other char (if any...).
	Array<String> names;		// Lowercased;
	Array<String> orignames; 	// Original.

	static ZCInternalActorNameCell Create( int initFirstchar ) {
		ZCInternalActorNameCell newcell = new( 'ZCInternalActorNameCell' );
		newcell.firstchar = initFirstchar;

		return newcell;
	}

	// First character. "0" is '_', "1" is 'a', "26" is 'z' and "27" is other char (if any).
	static clearscope int GetClassnameCellIndex( String clsname ) {
		int outIndex = 27;

		if ( clsname != "" ) {
			int firstchar = clsname.CharCodeAt( 0 );

			// Converting to uppercase:
			if ( firstchar >= LETTER_A_LOWER && firstchar <= LETTER_Z_LOWER )
				firstchar &= ~0x20;

			if ( firstchar == 0x5F )
				outIndex = 0; // '_'.
			else if ( firstchar >= LETTER_A_UPPER && firstchar <= LETTER_Z_UPPER )
				outIndex = firstchar - LETTER_A_UPPER + 1; // 'A'..'Z'.
		}

		return outIndex;
	}
} // of class ZCInternalActorNameCell {}

class ZCGlobal: Thinker {
	ZCheckerHandler zcHandler;
	EZCheckerLogLevels zcCurLogLevel;

	Array<ZCInternalStringDictionaryCell> internalStrings;

	/* === ZChecker utils === */

	void UpdateLogLevel( void ) {
		zcCurLogLevel = CVar.FindCVar( "mcm_zchecker_loglevel" ).GetInt();
	}

	static play ZCGlobal Get( void ) {
		ZCGlobal it = ZCGlobal( ThinkerIterator.Create( "ZCGlobal", STAT_STATIC ).Next() );

		if ( !it ) {
			// Creating and initializating a singleton global object:
			it = new( "ZCGlobal" );
			it.ChangeStatNum( STAT_STATIC );
			it.UpdateLogLevel();
			it.internalStrings.Clear();
		}

		return it;
	} // of static play ZCGlobal Get( void ) {}

	void InitZCheckerHandler( ZCheckerHandler inithandler ) {
		zcHandler = inithandler;
	} // of void InitZCheckerHandler( ZCheckerHandler inithandler ) {}


	// Prints well-decorated information string:
	static clearscope void ClearscopeLog( EZCheckerLogLevels loglevel, String text ) {
		String logPrefix = "";

		if ( !( loglevel & LL_NoPrefix ) ) {
			switch ( loglevel & ~LL_FlagsMask ) {
				case LL_Debug:
					logPrefix = LLCOLOR_DEBUG .. "[ZC Debug] ";
					break;
				case LL_Emergency:
					logPrefix = TEXTCOLOR_RED .. "[ZChecker emergency] " .. LLCOLOR_EMERGENCY;
					break;
				default:
					logPrefix = TEXTCOLOR_GRAY .. "[ZC] " .. LLCOLOR_MAIN;
					break;
			} // of switch ( loglevel & ~LL_NoPrefix ) {
		} // of if ( !( loglevel & LL_NoPrefix ) ) {

		if ( !( loglevel & LL_NoDot ) ) {
			String lastch = text.Mid( text.Length() - 1 );

			if ( !( lastch == "." || lastch == "!" || lastch == "?" || lastch == ":" || lastch == ";" ) )
				text = text .. ".";
		}

		console.printf( logPrefix .. text );
	} // of static clearscope void ClearscopeLog( EZCheckerLogLevels loglevel, String text ) {}

	// A play-scope wrapper around a data-scope method (mostly used):
	static play void Log( EZCheckerLogLevels loglevel, String text ) {
		if ( ZCGlobal.Get().zcCurLogLevel >= ( loglevel & ~LL_FlagsMask ) )
			ClearscopeLog( loglevel, text );
	}

	static ui void UILog( EZCheckerLogLevels loglevel, String text ) {
		ZCGlobal it = ZCGlobal( ThinkerIterator.Create( "ZCGlobal", STAT_STATIC ).Next() );

		if ( it && ( it.zcCurLogLevel >= ( loglevel & ~LL_FlagsMask ) ) )
			ClearscopeLog( loglevel, text );
	}

	static clearscope void DataLog( EZCheckerLogLevels loglevel, String text ) {
		CVar curloglevel = CVar.FindCVar( "mcm_zchecker_loglevel" );

		if ( curloglevel && ( curloglevel.GetInt() >= ( loglevel & ~LL_FlagsMask ) ) )
			ClearscopeLog( loglevel, text );
	}



	// Test for the special ZChecker level:
	static clearscope bool IsEverythingLevel( void ) {
		// Got from "mapchecksum everything" CCMD:
		//return level.GetChecksum() ~== "8FBB774BE1D239B5C7CB514DF9B41A2E" || ( CVar.FindCVar( "mcm_zchecker_forceevmap" ).GetBool() );

		return ( level.mapname ~== "EVERYTHING" ) || ( level.mapname ~== "EVERYTHING_SIMPLED" )
			|| ( CVar.FindCVar( "mcm_zchecker_ev_forcemap" ).GetBool() );
	}

	static clearscope bool DangerousCCMDsAllowed( String desc = "executing dangerous command" ) {
		bool isallowed = CVar.FindCVar( "mcm_zchecker_allowdangerccmds" ).GetBool();

		if ( isallowed && desc != "" )
			ClearscopeLog( LL_Main, LLCOLOR_WARNING .. "Warning: " .. LLCOLOR_MAIN .. desc );

		return isallowed;
	}

	static clearscope bool SpecialZCActorsHandling( void ) {
		return !CVar.FindCVar( "mcm_zchecker_internalclasses_nospecialhandling" ).GetBool();
	}



	/* === ZChecker operating on the internal and saves-through variables === */

	// Fixing an ancient ZScript bug...
	// WARNING: user CVars updates after one tic!!!
	/*static clearscope void SetUserCVarString( String cvarName, String cvarValue ) {
		CVar usercvar = CVar.GetCVar( cvarName, players[ consoleplayer ] );

		if ( usercvar ) {
			CVar metastring = CVar.FindCVar( "mcm_zchecker_internal_metastring" );
			metastring.SetString( cvarName );
			usercvar.SetString( cvarValue );

			ACS_Execute( -int( 'ZChecker_SetUserCVar' ), 0, consoleplayer );
		}
	}*/
	static clearscope void PrepareUserCVarMetastring( String cvarName, String cvarValue ) {
		CVar usercvar = CVar.GetCVar( cvarName, players[ consoleplayer ] );

		if ( usercvar ) {
			CVar metastring = CVar.FindCVar( "mcm_zchecker_internal_metastring" );
			metastring.SetString( cvarName );
			usercvar.SetString( cvarValue );
		} else {
			DataLog( LL_Emergency, "ZCGlobal.PrepareUserCVarMetastring(). Cannot find CVar \"" .. TEXTCOLOR_RED .. cvarName .. LLCOLOR_EMERGENCY .. "\" (setup value \"" .. cvarValue .. "\")" );
		}
	}

	static clearscope void PrepareUserCVarString( String cvarName, String cvarValue ) {
		CVar usercvar = CVar.GetCVar( cvarName, players[ consoleplayer ] );

		if ( usercvar )
			usercvar.SetString( cvarValue );
		else
			DataLog( LL_Emergency, "ZCGlobal.PrepareUserCVarString(). Cannot find CVar \"" .. TEXTCOLOR_RED .. cvarName .. LLCOLOR_EMERGENCY .. "\" (setup value \"" .. cvarValue .. "\")" );
	}


	clearscope String GetZCheckerString( String zcname ) {
		String outStr = "";

		for ( int i = 0; i < internalStrings.Size(); i++ ) {
			//console.printf( "#" .. i .. ": dict[ '" .. internalStrings[ i ].key .. "' ] == '" .. internalStrings[ i ].value .. "'. Arg is " .. zcname );
			if ( internalStrings[ i ].key == zcname ) {
				outStr = internalStrings[ i ].value;
				break;
			}
		}

		return outStr;
	}

	play bool DeleteZCheckerString( String zcname ) {
		if ( zcname.CharAt( 0 ) != "$" ) {
			ZCGlobal.Log( LL_Main, GetClassName() .. "::DeleteZCheckerString(). " .. LLCOLOR_WARNING .. "Internal variable name must start with \"$\" or \"%\"" .. LLCOLOR_MAIN .. " (got \"" .. TEXTCOLOR_RED .. zcname .. LLCOLOR_MAIN .. "\")." );
			return false;
		}

		bool found = false;

		for ( int i = 0; i < internalStrings.Size(); i++ ) {
			if ( internalStrings[ i ].key == zcname ) {
				ZCGlobal.Log( LL_Debug, GetClassName() .. "::DeleteZCheckerString(). Found dict[ \"" .. zcname .. "\" ] (index " .. i .. "/" .. internalStrings.Size() .. ")." );

				internalStrings.Delete( i, 1 );
				found = true;
				break;
			}
		}

		if ( !found ) {
			ZCGlobal.Log( LL_Main, GetClassName() .. "::DeleteZCheckerString(). Internal variable \"" .. zcname .. "\"" .. LLCOLOR_WARNING  .. " not found." );
			return false;
		}

		return found;
	}

	play void ClearAllZCheckerStrings( void ) {
		internalStrings.Clear();
	}

	play bool SetZCheckerString( String zcname, String zcvalue ) {
		if ( zcname.CharAt( 0 ) != "$" ) {
			ZCGlobal.Log( LL_Main, GetClassName() .. "::SetZCheckerString(). " .. LLCOLOR_WARNING .. "Internal variable name must start with \"$\" or \"%\"" .. LLCOLOR_MAIN .. " (got \"" .. TEXTCOLOR_RED .. zcname .. LLCOLOR_MAIN .. "\")." );
			return false;
		}

		ZCInternalStringDictionaryCell dictcell = NULL;

		for ( int i = 0; i < internalStrings.Size(); i++ ) {
			if ( internalStrings[ i ].key == zcname ) {
				dictcell = internalStrings[ i ];
				break;
			}
		}

		if ( !dictcell ) {
			dictcell = new( 'ZCInternalStringDictionaryCell' );
			dictcell.key = zcname;

			internalStrings.Push( dictcell );
		}

		dictcell.value = zcvalue;

		ZCGlobal.Log( LL_Debug, GetClassName() .. "::SetZCheckerString(). Dict[ \"" .. zcname .. "\" ] == \"" .. GetZCheckerString( zcname ) .. "\"." );

		return true;
	}


	/* === General (other) utils === */

    static clearscope String squeezeVector2( vector2 vec ) {
        return "(" .. int( vec.x ) .. ", " .. int( vec.y ) .. ")";
    }

	static clearscope String squeezeVector2dec2( vector2 vec ) {
		return String.Format( "(%.2f, %.2f)", vec.x, vec.y );
	}

    static clearscope String squeezeVector3( vector3 vec ) {
        return "(" .. int( vec.x ) .. ", " .. int( vec.y ) .. ", " .. int( vec.z ) .. ")";
    }

	static double, double vector3ToAnglePitch( vector3 vec ) {
		return atan2( vec.y, vec.x ), -90.0 * sin( vec.z );
	}

	static vector3 anglePitchToVector3( double angle, double pitch ) {
		double cosangle = cos( angle );
		double cospitch = cos( pitch );

		return ( cosangle * cospitch, sin( angle ) * cospitch, sin( pitch ) );
	}

	static String ObjectName( Object obj ) {
		return ( obj? obj.GetClassName() .. "" : "<NULL>" );
	}

	static String ClassName( class cls ) {
		return ( cls? cls.GetClassName() .. "" : "<NULL>" );
	}

	// Remove all first and all last spaces and tabs in the string.
	static String TruncateStringBySpaces( String str ) {

		uint code = str.CharCodeAt( 0 );
		while ( ( code == 9 || code == 11 || code == 32 ) && str.Length() ) {
			str = str.Mid( 1 );
			code = str.CharCodeAt( 0 );
		}

		uint len = str.Length() - 1;
		code = str.CharCodeAt( len );
		while ( ( code == 9 || code == 11 || code == 32 ) /* && ( len + 1 ) */ ) {
			str = str.Left( len );
			len = str.Length() - 1;
			code = str.CharCodeAt( len );
		}

		return str;
	}

	static ENewlineTypes GetTextNewlinesType( String text ) {
		ENewlineTypes nltype = ZCNL_Unknown;

		if ( text != "" ) {
			int curPos = 0;
			int textLength = text.Length();

			while ( nltype == ZCNL_Unknown && curPos < textLength ) {
				if ( text.CharCodeAt( curPos ) == 0x0D )
					nltype = ( ++curPos < textLength && text.CharCodeAt( curPos ) == 0x0A )? ZCNL_DOS : ZCNL_Mac;
				else if ( text.CharCodeAt( curPos ) == 0x0A )
					nltype = ( ++curPos < textLength && text.CharCodeAt( curPos ) == 0x0D )? ZCNL_DOSReversed : ZCNL_Unix;

				curPos++;
			}

		} // of if ( text != "" ) {}

		return nltype;
	} // of static ENewlineTypes GetTextNewlinesType( String text ) {}

} // of class ZCGlobal: Thinker {}
