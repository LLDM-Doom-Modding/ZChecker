class ZCListThinkersCommand: ZCConsoleCommand {
	const ZCSTAT_ERROR = -2;
	const ZCSTAT_LIST = -1;

	int zcStatNumType;
	String helpListStr;
	String helpListValuesColor;

	override String GetCommand() {
		return "zc_listthinkers";
	}

	override String GetHelpNameString() {
		return "zclistthinkers <type>|help|list";
	}

	override String GetHelpDescString() {
		return "Lists all loaded thinkers of type <type>. Possible values will be listed if argument is \"help\" or \"list\".";
	}

	override bool HandleArguments( ZCheckerCCMDInfo initCCMD ) {
		ccmd = initCCMD;
		zcStatNumType = ZCSTAT_ERROR;
		if ( ccmd.args.Size() != 1 )
			return false;

		String origarg = ccmd.args[ 0 ];

		if ( origarg ~== "help" || origarg ~== "list" || origarg ~== "l" ) {
			zcStatNumType = ZCSTAT_LIST;
			return true;
		}

		String arg = origarg;

		// Truncating the "s" plural postfix:
		if ( origarg.Mid( origarg.Length() - 1, 1 ) == "s" )
			arg = origarg.Left( origarg.Length() - 1 );

		if ( arg ~== "default" || arg ~== "def" || arg ~== "actor" )
			zcStatNumType = Thinker.STAT_DEFAULT;
		else if ( arg ~== "decal" )
			zcStatNumType = Thinker.STAT_DECAL;
		else if ( arg ~== "autodecal" || arg ~== "decalsauto" || arg ~== "decalauto" )
			zcStatNumType = Thinker.STAT_AUTODECAL;
		else if ( arg ~== "corpsepointer" || arg ~== "hexencorpse" )
			zcStatNumType = Thinker.STAT_CORPSEPOINTER;
		else if ( arg ~== "travelling" || arg ~== "travellingactor" )
			zcStatNumType = Thinker.STAT_TRAVELLING;
		else if ( arg ~== "static" || origarg ~== "s" )
			zcStatNumType = Thinker.STAT_STATIC;
		else if ( arg ~== "scroller" )
			zcStatNumType = Thinker.STAT_SCROLLER;
		else if ( arg ~== "player" )
			zcStatNumType = Thinker.STAT_PLAYER;
		else if ( arg ~== "bosstarget" )
			zcStatNumType = Thinker.STAT_BOSSTARGET;
		else if ( arg ~== "lightning" )
			zcStatNumType = Thinker.STAT_LIGHTNING;
		else if ( arg ~== "decalthinker" )
			zcStatNumType = Thinker.STAT_DECALTHINKER;
		else if ( arg ~== "inventory" || arg ~== "inv" )
			zcStatNumType = Thinker.STAT_INVENTORY;
		else if ( arg ~== "sectorlight" || arg ~== "seclight" )
			zcStatNumType = Thinker.STAT_LIGHT;
		else if ( arg ~== "sectorlighttransfer" || arg ~== "seclighttransfer" )
			zcStatNumType = Thinker.STAT_LIGHTTRANSFER;
		else if ( arg ~== "earthquake" )
			zcStatNumType = Thinker.STAT_EARTHQUAKE;
		else if ( arg ~== "mapmarker" || arg ~== "marker" || arg ~== "automapmarker" )
			zcStatNumType = Thinker.STAT_MAPMARKER;
		else if ( arg ~== "dynlight" || arg ~== "dl" )
			zcStatNumType = Thinker.STAT_DLIGHT;
		else if ( arg ~== "sectoreffect" || arg ~== "seceffect" )
			zcStatNumType = Thinker.STAT_SECTOREFFECT;
		else if ( arg ~== "actormover" || arg ~== "mover" )
			zcStatNumType = Thinker.STAT_ACTORMOVER;
		else if ( arg ~== "script" || origarg ~== "acs" || arg ~== "acsscript" )
			zcStatNumType = Thinker.STAT_SCRIPTS;
		else if ( arg ~== "bot" )
			zcStatNumType = Thinker.STAT_BOT;
		else {
			if ( str2int_Ptr( ccmd.args[ 0 ], +zcStatNumType ) )
				return ( zcStatNumType >= 0 && zcStatNumType <= Thinker.MAX_STATNUM );

			return false;
		}

		return true;
	}

	protected void AddListSection( String sectionname, String nodescolor ) {
		helpListValuesColor = nodescolor;
		helpListStr = helpListStr .. "\n" .. nodescolor .. "<" .. sectionname .. ">" .. CCMDCOLOR_DESC .. ": ";
	}

	protected void AddListValue( String node ) {
		node.Replace( "|", TEXTCOLOR_DARKGRAY .. "|" .. helpListValuesColor );
		helpListStr = helpListStr .. helpListValuesColor .. node .. CCMDCOLOR_DESC .. "; ";
	}

	override void DoCommand( void ) {
		if ( zcStatNumType == ZCSTAT_LIST ) {
			helpListStr = helpListValuesColor = "";

			AddListSection( "Actors", TEXTCOLOR_SAPPHIRE );
			AddListValue( "default|def|actors" );
			AddListValue( "dynlights|dl" );
			AddListValue( "inventory|inv" );
			AddListValue( "mapmarkers|markers|automapmarkers" );
			AddListValue( "bosstargets" );
			AddListSection( "Static", TEXTCOLOR_TEAL );
			AddListValue( "static|s" );
			AddListValue( "info|information" );
			AddListValue( "decals" );
			AddListValue( "autodecals|decalsauto" );
			AddListValue( "corpsepointers|hexencorpses" );
			AddListValue( "travelling|travellingactors" );
			AddListSection( "Sectors", TEXTCOLOR_BRICK );
			AddListValue( "sectorlights|seclights" );
			AddListValue( "sectoreffects|seceffects" );
			AddListValue( "sectorlighttransfers|seclighttr" );
			AddListSection( "Other thinkers", TEXTCOLOR_DARKGREEN );
			AddListValue( "scripts|acs|acsscripts" );
			AddListValue( "lightnings" );
			AddListValue( "players" );
			AddListValue( "bots" );
			AddListValue( "actormovers|movers" );
			AddListValue( "earthquakes" );
			AddListValue( "scrollers" );
			AddListValue( "decalthinkers" );

			console.printf( "Possible types (plural is optional): \n" .. helpListStr .. "or a digit for the non-standard StatNums." );
		} else if ( zcStatNumType >= 0 && zcStatNumType <= Thinker.MAX_STATNUM ) {
			console.printf( "Thinkers of type " .. zcStatNumType .. ":" );
			ThinkerIterator it = ThinkerIterator.Create( "Thinker", zcStatNumType );
			Thinker curThinker;

			while ( curThinker = it.Next( true ) ) {
				console.printf( "  " .. curThinker.GetClassName() );
			}
		} else {
			ZCGlobal.Log( LL_Emergency, GetClassName() .. "::DoCommand(). False StatNum " .. zcStatNumType );
		}
	}
} // of class ZCListThinkersCommand: ZCConsoleCommand {}
