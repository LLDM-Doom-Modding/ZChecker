class ZCMainInfoPanel: ZCBaseInfoPanelPart {
	override void OnCreate( void ) {
		optionCVarName = "mcm_zchecker_info_main";
		optionLabel = "Index, classname & health";
	}

	override String GetInfo( Actor thing, ZCheckerField thingfield ) {
		String info = ( thingfield.fieldPos + 1 ) .. ". ";

		if ( thingfield.actorType == IAT_Normal ) {
			info = info .. GREEN .. thing.GetClassName();

			if ( thing.GetTag() != thing.GetClassName() )
				info = info .. "\c-;\n" .. ORANGE .. "Tag" .. ORANGE .. " \"" .. YELLOW .. thing.GetTag() .. ORANGE .. "\"";

			info = info .. String.Format( DARKGRAY .. ";\n " .. DARKRED .. "Health " .. RED .. "%i" .. DARKGRAY .. "/" .. RED .. "%i\n" .. DARKRED .. "(%.2f%%",
					thing.health, thing.GetSpawnHealth(), ( thing.GetSpawnHealth()? 100.0 * thing.health / double( thing.GetSpawnHealth() ) : 0.0 ) );

			if ( thing.bNODAMAGE )
				info = info .. " nodmg";
			if ( thing.bBUDDHA )
				info = info .. " buddha";
			if ( thing.bINVULNERABLE )
				info = info .. " invul";

			info = info .. ")" .. DARKGRAY .. ".\n";
		} else if ( thingfield.actorType == IAT_StateProvider ) {
			info = DARKGREEN .. "Inv\c-: " .. GREEN .. thing.GetClassName() .. "\c-;\n" .. ORANGE ..
					"Tag" .. ORANGE .. " \"" .. YELLOW .. thing.GetTag() .. ORANGE .. "\"";
		}

		return info;
	}
} // of class ZCMainInfoPanel: ZCBaseInfoPanelPart {}

class ZCWorldPositionInfoPanel: ZCBaseInfoPanelPart {
	override void OnCreate( void ) {
		optionCVarName = "mcm_zchecker_info_worldpos";
		optionLabel = "World positioning";
	}

	override String GetInfo( Actor thing, ZCheckerField thingfield ) {
		String outStr = "";

		outStr = "Tilt: (\cUa\c-" .. int( thing.angle ) .. ", \cUp\c-" ..
							int( thing.pitch ) .. ", \cUr\c-" ..
							int( thing.roll ) .. ");\n" .. TEAL ..
				"Pos: " .. ZCGlobal.squeezeVector3( thing.pos ) .. ";\n\c-" ..
				String.Format( "Vel: (%.2f, %.2f, %.2f)", thing.vel.x, thing.vel.y, thing.vel.z ) .. ";\n  (len " .. thing.vel.length() .. ");\n" .. TEAL ..
				String.Format( "Size: " .. N .. "r" .. TEAL .. "%.3f" .. N .. "/h" .. TEAL .. "%.3f" .. N .. ".\n", thing.radius, thing.height );

		return outStr;
	}
} // of class ZCWorldPositionInfoPanel: ZCBaseInfoPanelPart {}


// Not really done yet...

class ZCInvFieldNode {
	ZCInvFieldNode next, prev;

	Inventory inv;
	int visualTicks;		// Positive: green (inv. added); negative: red (inv. taken).
}

class ZCInvFieldData {
	ZCInvFieldNode head, tail;
	ZCInvFieldNode firstvisible;

	ZCInvFieldNode AddNode( Inventory inv ) {
		ZCInvFieldNode newnode = new( 'ZCInvFieldNode' );

		if ( !head ) {
			head = tail = newnode;
		} else {
			tail.next = newnode;
			newnode.prev = tail;
			tail = newnode;
		}

		newnode.inv = inv;
		newnode.visualTicks = 5;

		return newnode;
	}

	void UpdateByActorInventory( Actor owner ) {
		Inventory aitem = owner.inv;
		Inventory sitem = head.inv;

		while ( aitem ) {
			if ( aitem != sitem ) {
				// <...>
			}

			aitem = aitem.inv;
		}
	}
} // of class ZCInvFieldData {}

class ZCInventoryInfoPanel: ZCBaseInfoPanelPart {
	Array<ZCInvFieldData> prevInvs;

	override void OnCreate( void ) {
		optionCVarName = "mcm_zchecker_info_inventory";
		optionLabel = "Inventory";

		for ( int i = 0; i < MaxTestee; i++ )
			prevInvs.Push( new( 'ZCInvFieldData' ) );
	}

	override String GetInfo( Actor thing, ZCheckerField thingfield ) {
		String outStr = DARKGRAY .. "Inventory\c-: " .. GRAY;

		if ( thingfield.actorType == IAT_StateProvider )
			return outStr .. "[Is a weapon].\n";

		Inventory item = thing.Inv;
		//ZCInvFieldData previnv = prevInvs[ thingfield.fieldPos ];

		if ( item ) {
			//ZCheckerInvField cmpItem = Testee[ i ].inv;
			//ZCheckerInvField nextItem = cmpItem.Next;

			while ( item ) {
				//if ( nextItem && nextItem.type != item.Inv.GetClassName() ) {
				/*	ZCheckerInvField cmpNextItem = nextItem;
					bool found = false;
					while ( ( cmpNextItem = cmpNextItem.Next ) && !found ) {
						if ( cmpNextItem.type == item.Inv.GetClassName() )
							found = true;
					}
					if ( !found ) {}
				}
                */
				outStr = outStr .. "\n* " .. item.GetClassName() .. ( item.Amount - 1? " x" .. item.Amount : "" ) .. "\c[Gray];";
				item = item.Inv;

				/*if ( cmpItem.visualTicks > 0 )
					--cmpItem.visualTicks;
				else if ( cmpItem.visualTicks < 0 )
					++cmpItem.visualTicks;

				outStr = outStr .. "\n* " .. "\c[" .. ( cmpItem.visualTicks > 0? "Green" : ( cmpItem.visualTicks < 0? "Red" : "Gray" ) ) .. "]"
						.. item.GetClassName() .. ( item.Amount - 1? " x" .. item.Amount : "" ) .. "\c[Gray];";

				item = item.Inv;
				cmpItem = nextItem;
				nextItem = nextItem.Next;*/
			} // of while ( item ) {}

		} else {
			outStr = outStr .. "none";
		}

		return outStr .. ".\n";
	}
} // of class ZCInventoryInfoPanel: ZCBaseInfoPanelPart {}


class ZCStatesInfoPanel: ZCBaseInfoPanelPart {
	override void OnCreate( void ) {
		optionCVarName = "mcm_zchecker_info_states";
		optionLabel = "States";
		optionSubmenuName = "mcm_ZCheckerSubmenu_states";
	}

	protected String DecoratedState( State st ) {
		SpriteID sprite = st.Sprite;

		return
			String.Format( SAPPHIRE .. sprite .. LIGHTBLUE .. " %c " .. SAPPHIRE .. "%i\c-",
						st.Frame + 65, st.Tics );
	}

	override String GetInfo( Actor thing, ZCheckerField thingfield ) {
		String outStr = "";
		State curState = thing.CurState;
		State st = curState;

		bool isWeapon = ( thingfield.actorType == IAT_StateProvider );
		PlayerPawn weapOwner = NULL;

		Array<State> prevstates;
		Array<String> prevstatesstr;
		uint statesAmount = CVar.GetCVar( "mcm_zchecker_infoset_statesamount", players[ consoleplayer ] ).GetInt();

		if ( isWeapon ) {
			weapOwner = getItemPlayerOwner( Inventory( thing ) );

			if ( weapOwner.player.psprites )
				curState = st = weapOwner.player.psprites.CurState;
		}

		if ( statesAmount == 0 )
			statesAmount = 0xFFFF;

		prevstates.Clear();
		prevstatesstr.Clear();
		outStr = outStr .. ( isWeapon? "PSprite states:" : "States:" ) .. "\n";

		bool loopFound = false;
		int statesCnt = 0;

		do {
			prevstates.Push( st );
			prevstatesstr.Push( DecoratedState( st ) );

			st = st.NextState;

			int backloopStateIndex = prevstates.Find( st );

			if ( loopFound = ( backloopStateIndex != prevstates.Size() ) ) {
				// Difference the one-state loop (waiting) and the normal loop:
				if ( backloopStateIndex == statesCnt ) {
					prevstatesstr[ statesCnt ] = prevstatesstr[ statesCnt ] .. TEXTCOLOR_WHITE .. " (loop here)";
				} else {
					prevstatesstr[ backloopStateIndex ] = prevstatesstr[ backloopStateIndex ] .. TEXTCOLOR_WHITE .. " <<loop";
					prevstatesstr[ statesCnt ] = prevstatesstr[ statesCnt ] .. TEXTCOLOR_WHITE .. " ^ loop";
				}
			}

			statesCnt++;
		} while ( st && st != curState && statesCnt < statesAmount && !loopFound );


		st = curState;

		for ( int i = 0; i < prevstatesstr.Size(); i++ )
			outStr = outStr .. prevstatesstr[ i ] .. "\n";

		if ( statesAmount != 0xFFFF ) {
			while ( statesCnt < statesAmount ) {
				outStr = outStr .. "\n";
				statesCnt++;
			}
		}


		if ( st.Tics <= 0 ) {
			outStr = outStr .. DARKGREEN .. "===== static =====";
		} else {
			int ticsbarLeft = 1;

			int curtics = ( isWeapon? weapOwner.player.psprites.Tics : thing.tics );

			if ( curtics > 1 )
				ticsbarLeft = int( 20 * ( curtics - 1 ) / ( st.Tics? st.Tics : 1 ) );

			if ( ticsbarLeft > 20 ) {
				outStr = outStr .. LIGHTBLUE .. "<<<" .. GRAY;
			} else {
				String ticbar = DARKGREEN;

				for ( int i = 0; i < 20 - ticsbarLeft; i++ )
					ticbar = ticbar .. "=";

				ticbar = ticbar .. ">" .. BLACK;

				for ( int i = 0; i < ticsbarLeft - 1; i++ )
					ticbar = ticbar .. "+";

				outStr = outStr .. ticbar .. DARKGRAY;
			}
		}

		if ( !isWeapon ) {
			outStr = outStr .. " (" .. thing.tics .. ")\c-\n" ..
				"  Flags: " ..
					( st.bFast? "\c[Fire]Fst\c- " : "" ) ..
					( st.bSlow? "\c[Fire]Slw\c- " : "" ) ..
					( st.bFullbright? "\c[Yellow]Lit\c- " : "" ) ..
					( st.bNoDelay? "\c[Sapphire]NoDelay\c- " : "" ) .. "\n"
				"  Flags 2:" ..
					( st.bSameFrame? "\c[Sapphire]SameFrm\c- " : "" ) ..
					( st.bCanRaise? "\c[Green]CanRaise\c- " : "" ) ..
					( st.bDehacked? "\c[Red]Deh\c- " : "" ) .. "\n" ..
				"  UseFlags: " .. st.UseFlags .. ", TicRange: " .. st.TicRange .. "; \n" ..
				"  Misc: " .. st.Misc1 .. "/" .. st.Misc2 .. "\n";

		} else if ( weapOwner.player.psprites ) { // Thanks to Il Str for crash reporting.
			PSprite pst = weapOwner.player.psprites;

			outStr = outStr .. " (" .. pst.tics .. ")\c-\n" ..
				"  Pos: " .. pst.x .. "/" .. pst.y .. "\n" ..
				"  Flags: " .. 
					( pst.bCVarFast? "\c[Green]Fast\c- " : "" ) ..
					( pst.processPending? "\c[Gray]Pend\c- " : "" ) .. "\n" ..
				"  Flags 2: " ..
					( pst.bFlip? "\c[Red]Flip\c- " : "" ) ..
					( pst.firstTic? "\c[Fire]1stTic\c- " : "" ) ..
					( pst.bAddWeapon? "\c[Yellow]AddWeap\c- " : "" ) ..
					( pst.bAddBob? "\c[Sapphire]AddBob\c- " : "" ) ..
					( pst.bPowDouble? "\c[Yellow]Pow2x\c- " : "" ) .. "\c-\n";
		}

		return outStr;
	}
} // of class ZCStatesInfoPanel: ZCBaseInfoPanelPart {}


class ZCStatesInfoData {
	State st;
}

class ZCStatesLoggingInfoPanel: ZCStatesInfoPanel {
	Array<ZCStatesInfoData> prevLogStates;

	override void OnCreate( void ) {
		optionCVarName = "mcm_zchecker_info_stateslogging";
		optionLabel = "States logging";

		for ( int i = 0; i < MaxTestee; i++ )
			prevLogStates.Push( new( 'ZCStatesInfoData' ) );
	}

	override String GetInfo( Actor thing, ZCheckerField thingfield ) {
		bool isWeapon = ( thingfield.actorType == IAT_StateProvider );

		State curState = thing.CurState;
		State st = curState;

		if ( isWeapon ) {
			Actor weapOwner = getItemPlayerOwner( Inventory( thing ) );

			if ( weapOwner.player.psprites )
				curState = st = weapOwner.player.psprites.CurState;
		}

		State prevlogst = prevLogStates[ thingfield.fieldPos ].st;

		if ( prevlogst && prevlogst != st ) {
			String logstr = ( thingfield.fieldPos + 1 ) .. ". " .. DecoratedState( st );

			/*String logstr = String.Format( "%i. \c-" .. SAPPHIRE .. "%s " .. LIGHTBLUE .. "%c " .. SAPPHIRE .. "%i\c-",
							( thingfield.fieldPos + 1 ),
							( isWeapon? "" .. weapOwner.player.psprites.sprite : "" .. thing.Sprite ),
							st.Frame + 65, st.Tics );*/

			State nextlogst = prevlogst.NextState;
			bool zeroSkipped = ( nextlogst && nextlogst.tics == 0 );

			while ( nextlogst && nextlogst.tics == 0 )
				nextlogst = nextlogst.NextState;

			bool stateForced = ( nextlogst != st );

			if ( zeroSkipped || stateForced ) {
				logstr = logstr .. DARKGRAY .. " (";

				if ( zeroSkipped )
					logstr = logstr .. GRAY .. "zero frames" .. DARKGRAY .. " skipped" .. ( stateForced? "; " : "" );

				if ( stateForced )
					logstr = logstr .. "forced, should have been \"" .. DecoratedState( prevlogst ) .. DARKGRAY .. "\"";

				logstr = logstr .. ")";
			}

			ZCGlobal.ClearscopeLog( LL_Main | LL_NoDot, logstr );
		}

		prevLogStates[ thingfield.fieldPos ].st = st;

		return DARKGRAY .. "(" .. LIGHTBLUE .. "States logging enabled" .. DARKGRAY .. ")";
	}
} // of class ZCStatesLoggingInfoPanel: ZCStatesInfoPanel {}
