class ZCMainInfoPanel: ZCBaseInfoPanelPart {
	override String GetCVarName( void ) {
		return "mcm_zchecker_info_main";
	}

	override String GetInfo( Actor thing, int testeepos ) {
		String info = ( testeepos + 1 ) .. ". ";

		if ( !isItemPickedupWeapon( thing ) ) {
			info = info .. GREEN .. thing.GetClassName();

			if ( thing.GetTag() != thing.GetClassName() )
				info = info .. "\c-;\n" .. ORANGE .. "Tag" .. ORANGE .. " \"" .. YELLOW .. thing.GetTag() .. ORANGE .. "\"";

			info = info .. String.Format( DARKGRAY .. ";\n " .. DARKRED .. "Health " .. RED .. "%i" .. DARKGRAY .. "/" .. RED .. "%i\n" .. DARKRED .. "(%.2f%%",
					thing.health, thing.GetSpawnHealth(), ( thing.GetSpawnHealth()? 100.0 * thing.health / double( thing.GetSpawnHealth() ) : 0.0 ) );

			if ( thing.bNODAMAGE )
				info = info .. " nodmg";
			if ( thing.bBUDDHA )
				info = info .. " buddha";
			if ( thing.bINVULNERABLE )
				info = info .. " invul";

			info = info .. ")" .. DARKGRAY .. ".\n";
		} else {
			info = DARKGREEN .. "Inv\c-: " .. GREEN .. thing.GetClassName() .. "\c-;\n" .. ORANGE ..
					"Tag" .. ORANGE .. " \"" .. YELLOW .. thing.GetTag() .. ORANGE .. "\"";
		}

		return info;
	}
} // of class ZCMainInfoPanel: ZCBaseInfoPanelPart {}

class ZCWorldPositionInfoPanel: ZCBaseInfoPanelPart {
	override String GetCVarName( void ) {
		return "mcm_zchecker_info_worldpos";
	}

	override String GetInfo( Actor thing, int testeepos ) {
		String outStr = "";

		outStr = "Tilt: (\cUa\c-" .. int( thing.angle ) .. ", \cUp\c-" ..
							int( thing.pitch ) .. ", \cUr\c-" ..
							int( thing.roll ) .. ");\n" .. TEAL ..
				"Pos: " .. ZCGlobal.squeezeVector3( thing.pos ) .. ";\n\c-" ..
				"Vel: " .. ZCGlobal.squeezeVector3( thing.vel ) .. ";\n  (len " .. thing.vel.length() .. ");\n" .. TEAL ..
				String.Format( "Size: " .. N .. "r" .. TEAL .. "%.3f" .. N .. "/h" .. TEAL .. "%.3f" .. N .. ".\n", thing.radius, thing.height );

		return outStr;
	}
} // of class ZCWorldPositionInfoPanel: ZCBaseInfoPanelPart {}

class ZCInventoryInfoPanel: ZCBaseInfoPanelPart {
	override String GetCVarName( void ) {
		return "mcm_zchecker_info_inventory";
	}

	override String GetInfo( Actor thing, int testeepos ) {
		String outStr = DARKGRAY .. "Inventory\c-: " .. GRAY;
		Inventory item = thing.Inv;

		if ( item ) {
			//ZCheckerInvField cmpItem = Testee[ i ].inv;
			//ZCheckerInvField nextItem = cmpItem.Next;

			while ( item ) {
				//if ( nextItem && nextItem.type != item.Inv.GetClassName() ) {
				/*	ZCheckerInvField cmpNextItem = nextItem;
					bool found = false;
					while ( ( cmpNextItem = cmpNextItem.Next ) && !found ) {
						if ( cmpNextItem.type == item.Inv.GetClassName() )
							found = true;
					}
					if ( !found ) {}
				}
                */
				outStr = outStr .. "\n* " .. item.GetClassName() .. ( item.Amount - 1? " x" .. item.Amount : "" ) .. "\c[Gray];";
				item = item.Inv;

				/*if ( cmpItem.visualTicks > 0 )
					--cmpItem.visualTicks;
				else if ( cmpItem.visualTicks < 0 )
					++cmpItem.visualTicks;

				outStr = outStr .. "\n* " .. "\c[" .. ( cmpItem.visualTicks > 0? "Green" : ( cmpItem.visualTicks < 0? "Red" : "Gray" ) ) .. "]"
						.. item.GetClassName() .. ( item.Amount - 1? " x" .. item.Amount : "" ) .. "\c[Gray];";

				item = item.Inv;
				cmpItem = nextItem;
				nextItem = nextItem.Next;*/
			} // of while ( item ) {}

		} else {
			outStr = outStr .. "none";
		}

		return outStr .. ".\n";
	}
} // of class ZCInventoryInfoPanel: ZCBaseInfoPanelPart {}

class ZCStatesInfoPanel: ZCBaseInfoPanelPart {
	override String GetCVarName( void ) {
		return "mcm_zchecker_info_states";
	}

	override String GetInfo( Actor thing, int testeepos ) {
		String outStr = "";

		if ( isItemPickedupWeapon( thing ) ) {
			PlayerPawn owner = getItemPlayerOwner( Inventory( thing ) );

			if ( owner.player.psprites ) {
				PSprite st = owner.player.psprites;

				outStr = "State \c[Sapphire]" .. st.Sprite .. 
					String.format( " \c[LightBlue]%c \c[Sapphire]%i\c-", st.Frame + 65, st.CurState.Tics ) .. "\c-\n"
					"  Current tic: " .. st.Tics .. "\n" ..
					"  Pos: " .. st.x .. "/" .. st.y .. "\n" ..
					"  Flags: " .. 
						( st.bCVarFast? "\c[Green]Fast\c- " : "" ) ..
						( st.processPending? "\c[Gray]Pend\c- " : "" ) .. "\n" ..
					"  Flags 2: " ..
						( st.bFlip? "\c[Red]Flip\c- " : "" ) ..
						( st.firstTic? "\c[Fire]1stTic\c- " : "" ) ..
						( st.bAddWeapon? "\c[Yellow]AddWeap\c- " : "" ) ..
						( st.bAddBob? "\c[Sapphire]AddBob\c- " : "" ) ..
						( st.bPowDouble? "\c[Yellow]Pow2x\c- " : "" ) .. "\c-\n";
			} // of if ( owner.player.psprites ) {}

		} else {
			State st = thing.CurState;
			Array<State> prevstates;

			//outStr = String.format( N .. "State \n" .. SAPPHIRE .. "%s " .. LIGHTBLUE .. "%c " .. SAPPHIRE .. "%i\c-\n",
			//						"" .. thing.Sprite, st.Frame + 65, st.Tics );
			prevstates.Clear();
			outStr = outStr .. "States:\n";
			int statesCnt = 0;

			do {
				outStr = outStr .. String.format( SAPPHIRE .. "%s " .. LIGHTBLUE .. "%c " .. SAPPHIRE .. "%i\c-\n",
							"" .. thing.Sprite, st.Frame + 65, st.Tics );

				prevstates.Push( st );
				st = st.NextState;

				statesCnt++;
			} while ( st && st != thing.CurState && statesCnt < 5 && ( prevstates.Find( st ) == prevstates.Size() ) );

			while ( statesCnt < 5 ) {
				outStr = outStr .. "\n";
				statesCnt++;
			}


			st = thing.CurState;

			if ( st.Tics <= 0 ) {
				outStr = outStr .. DARKGREEN .. "===== static =====";
			} else {
				int ticsbarLeft = 1;

				if ( thing.tics > 1 )
					ticsbarLeft = int( 20 * ( thing.tics - 1 ) / ( st.Tics? st.Tics : 1 ) );

				if ( ticsbarLeft > 20 ) {
					outStr = outStr .. LIGHTBLUE .. "<<<" .. GRAY;
				} else {
					String ticbar = DARKGREEN;

					for ( int i = 0; i < 20 - ticsbarLeft; i++ )
						ticbar = ticbar .. "=";

					ticbar = ticbar .. ">" .. BLACK;

					for ( int i = 0; i < ticsbarLeft - 1; i++ )
						ticbar = ticbar .. "+";

					outStr = outStr .. ticbar .. DARKGRAY;
				}
			}

			outStr = outStr .. " (" .. thing.tics .. ")\c-\n" ..
				"  Flags: " ..
					( st.bFast? "\c[Fire]Fst\c- " : "" ) ..
					( st.bSlow? "\c[Fire]Slw\c- " : "" ) ..
					( st.bFullbright? "\c[Yellow]Lit\c- " : "" ) ..
					( st.bNoDelay? "\c[Sapphire]NoDelay\c- " : "" ) .. "\n"
				"  Flags 2:" ..
					( st.bSameFrame? "\c[Sapphire]SameFrm\c- " : "" ) ..
					( st.bCanRaise? "\c[Green]CanRaise\c- " : "" ) ..
					( st.bDehacked? "\c[Red]Deh\c- " : "" ) .. "\n" ..
				"  UseFlags: " .. st.UseFlags .. ", TicRange: " .. st.TicRange .. "; \n" ..
				"  Misc: " .. st.Misc1 .. "/" .. st.Misc2 .. "\n";
		}

		return outStr;
	}
} // of class ZCStatesInfoPanel: ZCBaseInfoPanelPart {}
