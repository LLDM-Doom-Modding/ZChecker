// Real commands placed below.

// Auxilary asynchronous classes (in other words, API for ACS):

class ZCSetFlagCommandThinker: Thinker {
	Array<String> storedStrings;

	override void PostBeginPlay() {
		ChangeStatNum( STAT_STATIC );
	}

	String PopString( void ) {
		String outname = "";

		if ( storedStrings.Size() ) {
			outname = storedStrings[ storedStrings.Size() - 1 ];
			storedStrings.Pop();
		}

		return outname;
	}

	void AddString( String flagname ) {
		storedStrings.push( flagname );
	}

	static ZCSetFlagCommandThinker Get( void ) {
		ZCSetFlagCommandThinker it = ZCSetFlagCommandThinker( ThinkerIterator.Create( "ZCSetFlagCommandThinker", STAT_STATIC ).Next() );

		if ( !it )
			it = new( 'ZCSetFlagCommandThinker' );

		return it;
	}
}

class ZCSetStateCommandThinker: ZCSetFlagCommandThinker {
	static ZCSetStateCommandThinker Get( void ) {
		ZCSetStateCommandThinker it = ZCSetStateCommandThinker( ThinkerIterator.Create( "ZCSetStateCommandThinker", STAT_STATIC ).Next() );

		if ( !it )
			it = new( 'ZCSetStateCommandThinker' );

		return it;
	}
}


// Real commands:

class ZCSetStateCommand: ZCConsoleCommand {
	int zcPos;
	String newState;

	override String GetCommand() {
		return "zc_setState";
	}

	override String GetHelpNameString() {
		return "zcsetstate [<pos>] <state label>;zcsets [<pos>] <state label>;zcst [<pos>] <state label>";
	}

	override String GetHelpDescString() {
		return "Set a state to <state label> for the testee in <pos> (or actor on line of sight if omitted) to <state label>. Note: because of asynchronous ZScript/ACS execution result in singleplayer will be delayed for one tick.";
	}

	override bool HandleArguments() {
		zcPos = -1;
		bool outValue = false;

		if ( ccmd.args.Size() == 1 ) {
			newState = ccmd.args[ 0 ];
			outValue = true;
		} else if ( ccmd.args.Size() == 2 && str2int_Ptr( ccmd.args[ 0 ], +zcPos ) ) {
			newState = ccmd.args[ 1 ];
			outValue = checkTesteePlace( --zcPos );
		}

		return outValue;
	}

	// I have no idea how to convert String to StateLabel less crooked...
	override void DoCommand( void ) {
		// Linetarget if position is omitted or testee[pos] otherwise:
		Actor testee = ( zcPos == -1 )? LinetraceActor( players[ ccmd.e.Player ].mo ) : ccmd.handler.Testee[ zcPos ].mo;

		if ( testee ) {
			ZCSetStateCommandThinker.Get().AddString( newState );
			// Cannot get ACS asynchronous "SetResultValue()" here.
			testee.ACS_NamedExecute( "ZChecker_CCMD_SetState", 0 );
		}
	}

	static String ACS_GetStateName( Actor activator ) {
		return ZCSetStateCommandThinker.Get().PopString();
	}
} // of class ZCSetStateCommand: ZCConsoleCommand {}


class ZCSetFlagCommand: ZCConsoleCommand {
	int zcPos;
	String flagName;
	int flagSetType;

	override String GetCommand() {
		return "zc_setFlag";
	}

	override String GetHelpNameString() {
		return "zcsetflag [<pos>] <flag name> [<value: 0/f[alse]/reset or 1/t[rue]/set>];zcsetf [<pos>] <flag name> [<value>];zcsf [<pos>] <flag name> [<value>]";
	}

	override String GetHelpDescString() {
		return "Set/reset a <flag> for the testee in <pos> (or actor on line of sight if omitted). If <value> is omitted, toggles a <flag>. Note: because of asynchronous ZScript/ACS execution result in singleplayer will be delayed for one tick.";
	}

	override bool HandleArguments() {
		zcPos = -1;
		flagSetType = -1;
		bool outValue = false;

		if ( ccmd.args.Size() == 2 || ccmd.args.Size() == 3 )
			flagSetType = getBoolArg( ccmd.args.Size() - 1 );

		if ( ccmd.args.Size() == 1 ) {
			flagName = ccmd.args[ 0 ];
			outValue = true;
		} else if ( ccmd.args.Size() == 2 ) {
			if ( flagSetType != -1 ) {
				flagName = ccmd.args[ 0 ];
				outValue = true;
			} else if ( str2int_Ptr( ccmd.args[ 0 ], +zcPos ) ) {
				outValue = checkTesteePlace( --zcPos );
				flagName = ccmd.args[ 1 ];
			}
		} else if ( ( ccmd.args.Size() == 3 ) && str2int_Ptr( ccmd.args[ 0 ], +zcPos ) ) {
			flagName = ccmd.args[ 1 ];
			outValue = checkTesteePlace( --zcPos ) && ( flagSetType != -1 );
		}

		//console.printf( "zcPos: " .. zcPos .. ", flagName: " .. flagName .. ", flagSetType: " .. flagSetType .. ".  outValue: " .. outValue );

		return outValue;
	}

	// I have no idea how to convert String to flag name less crooked, too...
	override void DoCommand( void ) {
		// Linetarget if position is omitted or testee[pos] otherwise:
		Actor testee = ( zcPos == -1 )? LinetraceActor( players[ ccmd.e.Player ].mo ) : ccmd.handler.Testee[ zcPos ].mo;

		if ( testee ) {
			ZCSetFlagCommandThinker.Get().AddString( flagName );
			// Cannot get ACS asynchronous "SetResultValue()" here.
			testee.ACS_NamedExecute( "ZChecker_CCMD_SetFlag", 0, flagSetType );
		}
	}

	static String ACS_GetFlagName( Actor activator ) {
		return ZCSetFlagCommandThinker.Get().PopString();
	}
} // of class ZCSetStateCommand: ZCConsoleCommand {}

class ZCBuddhaCommand: ZCConsoleCommand {
	// Actually a legacy shortcut, but it turned out to be very convenient.
	int zcPos;
	int flagSetType;

	override String GetCommand() {
		return "zc_buddha";
	}

	override String GetHelpNameString() {
		return "zcbud <pos> [<value>]";
	}

	override String GetHelpDescString() {
		return "Shortcut for the \"zcsetflag <pos> buddha <value>\". Operate on the BUDDHA flag at <pos> or linetarget, if omitted. If there's no <value>, toggles it.";
	}

	override bool HandleArguments() {
		zcPos = -1;
		flagSetType = -1;
		int ccmdArgsSize = ccmd.args.Size();
		bool outValue = ( ccmdArgsSize == 0 );

		if ( !outValue && str2int_Ptr( ccmd.args[ 0 ], +zcPos ) ) {
			if ( ccmdArgsSize == 1 )
				outValue = checkTesteePlace( --zcPos );
			else if ( ccmdArgsSize == 2 && ( (flagSetType = getBoolArg( 1 )) != -1 ) )
				outValue = checkTesteePlace( --zcPos );
		}

		// One arg is a position (flag will be toggled), two args are a 
		//position and a flag value:
		//if ( ccmdArgsSize > 0 && ccmdArgsSize < 3 && str2int_Ptr( ccmd.args[ 0 ], +zcPos ) && ( ( ccmdArgsSize != 2 ) || str2int_Ptr( ccmd.args[ 1 ], +flagValue ) ) )
		//	outValue = checkTesteePlace( --zcPos );

		return outValue;
	}

	override void DoCommand( void ) {
		// Linetarget if position is omitted or testee[pos] otherwise:
		Actor testee = ( zcPos == -1 )? LinetraceActor( players[ ccmd.e.Player ].mo ) : ccmd.handler.Testee[ zcPos ].mo;

		if ( testee ) {
			if ( flagSetType == -1 )
				testee.bBuddha ^= true;
			else
				testee.bBuddha = flagSetType;
		}
	}
} // of class ZCBudCommand: ZCConsoleCommand {}


class ZCGiveCommand: ZCConsoleCommand {
	int zcPos;
	String itemName;
	int itemAmount;

	override String GetCommand() {
		return "zc_give";
	}

	override String GetHelpNameString() {
		return "zcgive [<pos>] <item> [<amount=1>]";
	}

	override String GetHelpDescString() {
		return "Give <amount> <item>s to the testee <pos> (or linetarget if omitted)";
	}

	override bool HandleArguments() {
		zcPos = -1;
		itemAmount = 1;
		itemName = "";
		bool outValue = false;

		if ( ccmd.args.Size() == 2 || ccmd.args.Size() == 3 )
			if ( !str2int_Ptr( ccmd.args[ ccmd.args.Size() - 1 ], +itemAmount ) )
				itemAmount = -1;

		if ( ccmd.args.Size() == 1 ) {
			itemName = ccmd.args[ 0 ];
			outValue = true;
		} else if ( ccmd.args.Size() == 2 ) {
			if ( itemAmount != -1 ) {
				itemName = ccmd.args[ 0 ];
				outValue = true;
			} else if ( str2int_Ptr( ccmd.args[ 0 ], +zcPos ) ) {
				itemAmount = 1;
				outValue = checkTesteePlace( --zcPos );
				itemName = ccmd.args[ 1 ];
			}
		} else if ( ( ccmd.args.Size() == 3 ) && str2int_Ptr( ccmd.args[ 0 ], +zcPos ) ) {
			itemName = ccmd.args[ 1 ];
			outValue = checkTesteePlace( --zcPos );
		}

		if ( outValue )
			itemName = ParseSpecialActorName( itemName, "Inventory" );

		return outValue && ( itemAmount != -1 );
	}

	override void DoCommand( void ) {
		if ( classnameParseStatus == CPS_RegexFailed )
			return;

		// Linetarget if position is omitted or testee[pos] otherwise:
		Actor testee = ( zcPos == -1 )? LinetraceActor( players[ ccmd.e.Player ].mo ) : ccmd.handler.Testee[ zcPos ].mo;

		if ( testee ) {
			class<Actor> itemClass = itemName;

			if ( itemClass is 'Inventory' ) {
				if ( testee.A_GiveInventory( itemName, itemAmount ) )
					ZCGlobal.Log( LL_Detailed, "Item \"" .. itemClass.GetClassName() .. "\" is given to the actor " .. testee.GetClassName() .. " <" .. testee .. ">." );
				else
					ZCGlobal.Log( LL_Main, "Actor " .. testee.GetClassName() .. " cannot receive item." );
			} else {
				ZCGlobal.Log( LL_Main, "\"" .. itemName .. "\" isn't an inventory actor." );
			}
		} // of if ( testee ) {

	}
} // of class ZCGiveCommand: ZCConsoleCommand {}

class ZCTakeCommand: ZCGiveCommand {
	override String GetCommand() {
		return "zc_take";
	}

	override String GetHelpNameString() {
		return "zctake [<pos>] <item> [<amount=1>]";
	}

	override String GetHelpDescString() {
		return "Take <amount> <item>s from the testee <pos> (or linetarget if omitted)";
	}

	override void DoCommand( void ) {
		// Linetarget if position is omitted or testee[pos] otherwise:
		Actor testee = ( zcPos == -1 )? LinetraceActor( players[ ccmd.e.Player ].mo ) : ccmd.handler.Testee[ zcPos ].mo;

		if ( testee ) {
			class<Actor> itemClass = itemName;

			if ( itemClass is 'Inventory' ) {
				if ( testee.A_TakeInventory( itemName, itemAmount ) ) {
					/*if ( !GetDefaultByType( itemClass ).bKEEPDEPLETED ) {
						ZCGlobal.Log( LL_Detailed, "DESTROY Item \"" .. itemClass.GetClassName() .. "\" taken from the actor " .. testee.GetClassName() .. " <" .. testee .. ">." );
						Inventory inv = testee.FindInventory( itemName );
						inv.Destroy();
					}*/
					Inventory inv = testee.FindInventory( itemName );

					if ( inv && inv.amount == 0 )
						inv.Destroy();

					ZCGlobal.Log( LL_Detailed, "Item \"" .. itemClass.GetClassName() .. "\" is taken from the actor " .. testee.GetClassName() .. " <" .. testee .. ">." );

					/*if ( inv && !inv.bKEEPDEPLETED ) {
						ZCGlobal.Log( LL_Detailed, "Item \"" .. itemClass.GetClassName() .. "\" destroyed from the actor " .. testee.GetClassName() .. " <" .. testee .. ">." );
						inv.Destroy();
					} else if ( inv ) {
						ZCGlobal.Log( LL_Detailed, "Item \"" .. itemClass.GetClassName() .. "\" taken from the actor " .. testee.GetClassName() .. " <" .. testee .. ">." );
					}*/
				} else {
					ZCGlobal.Log( LL_Main, "Cannot take item from actor " .. testee.GetClassName() .. "." );
				}
			} else {
				ZCGlobal.Log( LL_Main, "\"" .. itemName .. "\" isn't an inventory actor." );
			}
		} // of if ( testee ) {

	}
} // of class ZCTakeCommand: ZCGiveCommand {}

class ZCActorActionCommand: ZCConsoleCommand {
	enum EActorActions {
		AC_Error = 0,
		AC_Revive,
		AC_Kill,
		AC_Destroy
	};

	int zcPos;
	EActorActions actoraction;

	override String GetCommand() {
		return "zc_actoraction";
	}

	override String GetHelpNameString() {
		return "zcact [<pos>] <action>";
	}

	override String GetHelpDescString() {
		return "Do special complex action with actor on <pos> (or linetarget if omitted). Possible <action>s: \"rev[ive]\"|\"res[urrect]\", \"k[ill]\", \"destroy\"|\"rem[ove]\"|\"rm\"|\"del[ete]\"";
	}

	override bool HandleArguments() {
		zcPos = -1;
		bool outValue = false;

		if ( ccmd.args.Size() == 1 || ccmd.args.Size() == 2 ) {
			outValue = true;
			String what = ccmd.args[ ccmd.args.Size() - 1 ];
			what.ToLower();

			if ( what == "resurrect" || what == "res" || what == "revive" || what == "rev" )
				actoraction = AC_Revive;
			else if ( what == "kill" || what == "k" )
				actoraction = AC_Kill;
			else if ( what == "destroy" || what == "remove" || what == "rm" || what == "rem" || what == "del" || what == "delete" )
				actoraction = AC_Destroy;
			else
				outValue = false;

			if ( outValue ) {
				outValue = false;

				if ( ccmd.args.Size() == 1 )
					outValue = true;
				else if ( str2int_Ptr( ccmd.args[ 0 ], +zcPos ) )
					outValue = checkTesteePlace( --zcPos );
			} // of if ( outValue ) {}

		}

		return outValue;
	}

	protected void TryRevive( Actor testee ) {
		bool reviveBlocked = false;
		readonly<Actor> defactor = GetDefaultByType( testee.GetClass() );

		if ( defactor.bSOLID || defactor.bBLOCKEDBYSOLIDACTORS ) {
			BlockThingsIterator it = BlockThingsIterator.CreateFromPos( testee.pos.x, testee.pos.y, testee.pos.z, testee.height, testee.radius, false );

			while ( it.Next() && !reviveBlocked ) {
				if ( it.thing != testee && testee.Distance2D( it.thing ) < testee.radius && it.thing.bSOLID )
					reviveBlocked = true;
			}
		}


		if ( !reviveBlocked ) {
			ZCGlobal.Log( LL_Detailed, "Revived actor " .. testee.GetClassName() );

			// Compatibility with older versions.
			Actor prevMaster = testee.master;
			testee.master = testee;
			testee.A_RaiseMaster();
			testee.master = prevMaster;
		} else {
			ZCGlobal.Log( LL_Detailed, "Actor " .. testee.GetClassName() .. " reviving " .. TEXTCOLOR_RED .. "blocked\c-." );
		}
	}

	override void DoCommand( void ) {
		// Linetarget if position is omitted or testee[ pos ] otherwise:
		Actor testee = ( ( zcPos == -1 )? LinetraceActor( players[ ccmd.e.Player ].mo ) : ccmd.handler.Testee[ zcPos ].mo );

		if ( testee ) {
			switch ( actoraction ) {
			case AC_Revive:
				TryRevive( testee );
				break;
			case AC_Kill:
				testee.A_Die();

				if ( testee.health > 0 )
					ZCGlobal.Log( LL_Detailed, "Cannot kill actor " .. testee.GetClassName() );
				else
					ZCGlobal.Log( LL_Detailed, "Killed actor " .. testee.GetClassName() );
				break;
			case AC_Destroy:
				ZCGlobal.Log( LL_Detailed, "Destroyed actor " .. testee.GetClassName() );
				testee.ClearCounters();
				testee.Destroy();
				break;
			default:
				ZCGlobal.Log( LL_Emergency, "Unknown action id \"" .. actoraction .. "\" for testee " .. testee.GetClassName() );
				break;
			}
		} else if ( zcPos != -1 ) {
			ZCGlobal.Log( LL_Main, "No actor at position " .. ( zcPos + 1 ) );
		}

	}
} // of class ZCActorActionCommand: ZCConsoleCommand {}


struct ZCSummonExtraParameters play {
	double faceangle;
	bool isAngled;
	bool isFaceangleRelative;
	double zofs, forwardofs;

	const SPECARGS_MAX = 5;

	int tid;
	int special;
	int specargs[ SPECARGS_MAX ];

	bool isFriend;
	bool isFoe;
	bool notProjectileRules;

	void Clear( void ) {
		isAngled = false;
		isFaceangleRelative = false;
		faceangle = 0.0;
		zofs = forwardofs = 0.0;

		tid = special = 0;

		for ( int i = 0; i < SPECARGS_MAX; i++ )
			specargs[ i ] = 0;

		isFriend = isFoe = notProjectileRules = false;
	}

	private void clampfloat( out double value, String valuedesc, double minlimit, double maxlimit ) {
		double tmpfloat = clamp( value, minlimit, maxlimit );

		if ( value != tmpfloat ) {
			ZCGlobal.Log( LL_Main, valuedesc .. " (" .. value .. ") isn't in range [" .. minlimit .. "; " .. maxlimit .. "]. Clamped to " .. tmpfloat );
			value = tmpfloat;
		}
	}

	private void clampint( out int value, String valuedesc, int minlimit, int maxlimit ) {
		int tmpint = clamp( value, minlimit, maxlimit );

		if ( value != tmpint ) {
			ZCGlobal.Log( LL_Main, TEXTCOLOR_YELLOW .. valuedesc .. " (" .. value .. ") isn't in range [" .. minlimit .. "; " .. maxlimit .. "]. " .. LLCOLOR_MAIN .. "Clamped to " .. tmpint );
			value = tmpint;
		}
	}

	void AdjustValues( void ) {
		faceangle %= 360.0;

		clampfloat( zofs, "Z offset", -32767, 32768 );
		clampfloat( forwardofs, "Forward offset", -32767, 32768 );

		clampint( special, "Actor special", 0, 255 );

		for ( int i = 0; i < SPECARGS_MAX; i++ )
			clampint( specargs[ i ], "Arg[ " .. i .. " ]", 0, 255 );
	}
};

class ZCSummonCommand: ZCConsoleCommand {
	String summonee;
	int summoneeAmount;
	ZCSummonExtraParameters params;

	override String GetCommand() {
		return "zc_summon";
	}

	override String GetHelpNameString() {
		return "zcsummon <class> [<amount=1>] [<comma-separated: [rel]ang,tid,spec,arg0-4,zofs,fofs (...:<value>); notproj,friend|foe>]";
	}

	override String GetHelpDescString() {
		return "Summon <amount> of <class>es on position by rules of build-in eponymous command. Extended info (<extras>) may be provided by comma-separated (\",\") list. Possible parameters are:\n   f[riend]|foe, [r[el]]a[ngle]:<[relative]faceangle>, tid:<TID>, zofs:<mappixels>, f[wd]ofs:<mappixels>, notproj[ectile], spec:<special>, a[rg]0:<arg0>,...,a[rg]4:<arg4>.";
	}

	override bool HandleArguments() {
		summoneeAmount = 1;
		summonee = "";
		params.Clear();

		bool outValue = false;
		int argsSize = ccmd.args.Size();
		String paramstr = "";

		if ( argsSize > 0 ) {
			summonee = ccmd.args[ 0 ];

			if ( argsSize > 1 ) {
				if ( str2int_Ptr( ccmd.args[ 1 ], +summoneeAmount ) ) {
					if ( argsSize == 3 )
						paramstr = ccmd.args[ 2 ];
				} else {
					paramstr = ccmd.args[ 1 ];
				}
			}

			outValue = true;

			if ( paramstr != "" ) {
				Array<String> paramlist;
				paramstr.ToLower();
				paramstr.Split( paramlist, ",", TOK_SKIPEMPTY );

				for ( int i = 0; i < paramlist.Size(); i++ ) {
					String curparam = paramlist[ i ];
					int colonIndex = -1;

					if ( curparam == "f" || curparam == "fr" || curparam == "friend" || curparam == "friendly" || curparam == "friends" ) {
						params.isFriend = true;
						params.isFoe = false;
					} else if ( curparam == "foe" || curparam == "enemy" ) {
						params.isFriend = false;
						params.isFoe = true;
					} else if ( curparam == "notproj" || curparam == "notprojectile" ) {
						params.notProjectileRules = true;
					} else if ( -1 != ( colonIndex = curparam.IndexOf( ":" ) ) ) {
						if ( colonIndex < curparam.Length() ) {
							String paramdiv[ 2 ];
							paramdiv[ 0 ] = curparam.Left( colonIndex );
							paramdiv[ 1 ] = curparam.Mid( colonIndex + 1, curparam.Length() - colonIndex - 1 );

							int paramvalue; 
							int paramnamelen = paramdiv[ 0 ].Length();

							if ( str2int_Ptr( paramdiv[ 1 ], +paramvalue, true ) ) {
								if ( paramdiv[ 0 ] == "ang" || paramdiv[ 0 ] == "angle" ) {
									params.faceangle = paramvalue;
									params.isFaceangleRelative = false;
									params.isAngled = true;
								} else if ( paramdiv[ 0 ] == "relang" || paramdiv[ 0 ] == "relangle" || paramdiv[ 0 ] == "relativeang" || paramdiv[ 0 ] == "relativeangle" || paramdiv[ 0 ] == "rang" || paramdiv[ 0 ] == "rangle" ) {
									params.faceangle = paramvalue;
									params.isFaceangleRelative = true;
									params.isAngled = true;
								} else if ( paramdiv[ 0 ] == "tid" ) {
									params.tid = paramvalue;
								} else if ( paramdiv[ 0 ] == "spec" || paramdiv[ 0 ] == "special" ) {
									params.special = paramvalue;
								} else if ( paramdiv[ 0 ] == "z" || paramdiv[ 0 ] == "zofs" || paramdiv[ 0 ] == "zoffset" ) {
									params.zofs = paramvalue;
								} else if ( paramdiv[ 0 ] == "fofs" || paramdiv[ 0 ] == "foffset" || paramdiv[ 0 ] == "fwdofs" || paramdiv[ 0 ] == "fwdoffset" || paramdiv[ 0 ] == "forwardofs" || paramdiv[ 0 ] == "forwardoffset" ) {
									params.forwardofs = paramvalue;
								} else if ( ( paramnamelen == 2 && paramdiv[ 0 ].Left( 1 ) == "a" ) || ( paramnamelen == 4 && paramdiv[ 0 ].Left( 3 ) == "arg" ) ) {
									int argnum = paramdiv[ 0 ].Mid( paramnamelen - 1, 1 ).CharCodeAt( 0 ) - 0x30;

									if ( argnum >= 0 && argnum <= 4 )
										params.specargs[ argnum ] = paramvalue;
									else
										ZCGlobal.Log( LL_Main, TEXTCOLOR_YELLOW .. "Wrong argument number for parameter \"" .. paramdiv[ 0 ] .. "\"." );
								} else {
									ZCGlobal.Log( LL_Main, TEXTCOLOR_YELLOW .. "Unknown parameter \"" .. curparam .. "\"." );
								}
							} else {
								ZCGlobal.Log( LL_Main, TEXTCOLOR_YELLOW .. "Value \"" .. paramdiv[ 1 ] .. "\" for parameter \"" .. paramdiv[ 0 ] .. "\" isn't a digit." );
							} // of else of if ( str2int_Ptr( paramdiv[ 1 ], +paramvalue ) ) {}

						} else {
							ZCGlobal.Log( LL_Main, TEXTCOLOR_YELLOW .. "No value " .. LLCOLOR_MAIN .. "for parameter \"" .. curparam .. "\"." );
						} // of if ( colonIndex < curparam.Length() ) {}

					} else {
						ZCGlobal.Log( LL_Main, TEXTCOLOR_YELLOW .. "Unknown flag \"" .. curparam .. "\"." );
					}

				} // of for ( int i = 0; i < paramlist.Size(); i++ ) {}
			} // of if ( paramstr != "" ) {}

		} // of if ( argsSize > 0 ) {}


		if ( outValue ) {
			summonee = ParseSpecialActorName( ccmd.args[ 0 ] );
			params.AdjustValues();
		}

		return outValue;
	}

	protected virtual void PostActorSummon( Actor summoned, Actor splayer ) {
		if ( !summoned )
			return;

		if ( params.isAngled )
			summoned.angle = ( params.isFaceangleRelative? summoned.AngleTo( splayer ) : 0.0 ) + params.faceangle;

		if ( params.isFriend )
			summoned.bFRIENDLY = true;
		else if ( params.isFoe )
			summoned.bFRIENDLY = false;

		if ( params.tid )
			summoned.ChangeTid( params.tid );
		if ( params.special )
			summoned.special = params.special;

		for ( int i = 0; i < params.SPECARGS_MAX; i++ )
			if ( params.specargs[ i ] != 0 )
				summoned.args[ i ] = params.specargs[ i ];
	}

	override void DoCommand( void ) {
		if ( classnameParseStatus == CPS_RegexFailed )
			return;

		class<Actor> summoneeClass = summonee;

		if ( summoneeClass is 'Actor' ) {
			// See GZDoom source code -> "src/d_net.cpp" -> "Net_DoCommand()".
			Actor player = players[ ccmd.e.Player ].mo;

			if ( player ) {
				readonly<Actor> summoneeDef = GetDefaultByType( summoneeClass );

				if ( !params.notProjectileRules && summoneeDef.bMISSILE ) {
					vector3 spawnpos = player.Vec3Angle( summoneeDef.radius * 2 + player.radius + params.forwardofs, player.angle, 8.0 + params.zofs );

					for ( int i = 0; i < summoneeAmount; i++ ) {
						Actor summoned = player.SpawnPlayerMissile( summoneeClass );

						vector2 dirFromPlayer = player.Vec2To( summoned );
						summoned.SetOrigin( summoned.pos + ( dirFromPlayer / dirFromPlayer.Length() * params.forwardofs, params.zofs ), false );

						PostActorSummon( summoned, player );
					}
				} else {
					vector3 spawnpos = player.Vec3Angle( summoneeDef.radius * 2 + player.radius + params.forwardofs, player.angle, 8.0 + params.zofs );

					for ( int i = 0; i < summoneeAmount; i++ )
						PostActorSummon( Actor.Spawn( summoneeClass, spawnpos, ALLOW_REPLACE ), player );
				} // of else of if ( GetDefaultByType( summoneeClass ).bMISSILE ) {}

				ZCGlobal.Log( LL_Detailed, "Summoned " .. summoneeAmount .. " actor" .. ( summoneeAmount > 1? "s " : " " ) .. TEXTCOLOR_DARKGRAY .. " of class \"" .. TEXTCOLOR_GREEN .. summoneeClass.GetClassName() .. TEXTCOLOR_DARKGRAY .. "\"" );
			} // of if ( player ) {}

		} else {
			ZCGlobal.Log( LL_Main, "\"" .. summonee .. "\" isn't an actor class." );
		}
	}
} // of class ZCGiveCommand: ZCConsoleCommand {}
