// This file is automatically generated by SyncLocalization.py.
// Update the localization in the "LANGUAGE.gzdoom400.csv" instead.

[enu default]


// Tabs size for this file: 4.

//  "ZCGlobal.Log()" and all of its derivatives overrides next colors placeholders:
//     '\c-' is a "LLCOLOR_MAIN"      (default user messages color, usually gray);
//     '\c!' is a "LLCOLOR_WARNING"   (yellow);
//     '\c~' is a "LLCOLOR_DARK"      (darkgray).


//  === General and core ===

// Commons:
ZCHECKER_CURLANGUAGE                  = "en"; // Used for the auto-updating of the cached localized strings.
ZCHECKER_GREETINGS_SUCCESS            = "ZChecker v%s initialized successfully. Total %i console commands, %i info panels.";
ZCHECKER_GREETINGS_WARNINGS           = "ZChecker v%s initialized \c!with warnings\c-. Total %i console commands, %i info panels.";

ZCHECKER_CCMDSHELP_USAGE              = "Usage";
ZCHECKER_CCMDSHELP_TIPS               = "Tips";
ZCHECKER_CCMDSHELP_EXAMPLES           = "Examples";
ZCHECKER_CCMDS_DANGERALLOWEDWARN      = "Warning";
ZCHECKER_LOG_EMERGENCY_PREFIX         = "[ZChecker emergency]";

ZCHECKER_MAPTITLE_EVERYTHING_SIMPLE   = "ZChecker: Everything (simple)";
ZCHECKER_MAPTITLE_EVERYTHING_ALT1     = "ZChecker: Everything (alternative)";

// Network events intercepting:
ZCHECKER_NETEVENTINTC_NETEVENT        = "Netevent";
ZCHECKER_NETEVENTINTC_MANUAL          = "Manual";
ZCHECKER_NETEVENTINTC_SYSTEM          = "System";
ZCHECKER_NETEVENTINTC_TIMEAT          = "at";
ZCHECKER_NETEVENTINTC_FROMPLAYER      = "from player #";



//  === Menus ===

ZCHECKER_MAINMENU_TITLE               = "ZChecker settings";
ZCHECKER_OPTIONSMENU_ZCHANDLER_ERROR  = "\cxError\ci: ZChecker cannot be initialized.\n\ciSee more info in the options menu above.";

ZCHECKER_MAINMENU_ZCHANDLER_ERROR     = "\cf---- ===== \cxERROR \cf===== ----\n\cxCannot locate ZChecker static event handler;\n\cxZChecker cannot be launched properly\ci.\n\n\ciPossible reason: usage of the \cu\"\crEventHandlers = ...\cu\"\n\cu(\cinot \cu\"\cqAddEventHandlers = ...\cu\") \ciin some \ccMAPINFO\ci lump\n\cifor the engine versions before GZDoom 4.8.0.";
ZCHECKER_MAINMENU_DIV_GENERAL         = "General categories";
ZCHECKER_MAINMENU_INFOPANELS          = "Information panel settings";
ZCHECKER_MAINMENU_CCMDS               = "Call console command [WIP]";
ZCHECKER_MAINMENU_EVMAP               = "\"Everything\" map settings";
ZCHECKER_MAINMENU_VISUAL              = "HUD & visual settings";
ZCHECKER_MAINMENU_OPEN_MENU_KEY       = "Open this menu";
ZCHECKER_MAINMENU_OPENINFOPANELS      = "Open infopanels menu";
ZCHECKER_MAINMENU_OPENCCMDS           = "Open CCMD call menu";
ZCHECKER_MAINMENU_OPENEVMAP           = "Open \"Everything\" map settings";
ZCHECKER_MAINMENU_OPENVISUAL          = "Open visual settings menu";

ZCHECKER_MAINMENU_DIV_OTHER           = "Other settings";
ZCHECKER_MAINMENU_DIV_HOTKEYS         = "Hotkeys";
ZCHECKER_MAINMENU_NETEVENTS           = "Netevent info intercepting";
ZCHECKER_MAINMENU_NETEVENTS_TIP       = "Try to obtain information from network events.";
ZCHECKER_MAINMENU_ALLOWDANGEROUS      = "Allow dangerous actions";
ZCHECKER_MAINMENU_ALLOWDANGEROUS_TIP  = "Allow operations that are known to crash the game.";
ZCHECKER_MAINMENU_ZCADDTWICE          = "Repeated actor addition handling";
ZCHECKER_MAINMENU_ZCADDTWICE_TIP1     = "Behaviour when using \"zcadd\" on an actor which";
ZCHECKER_MAINMENU_ZCADDTWICE_TIP2     = "is already present in the information panels list.";
ZCHECKER_MAINMENU_SPECIALHANDLING     = "Disable ZC classes special handling";
ZCHECKER_MAINMENU_SPECIALHANDLING_TIP1 = "Do not alter handling for the special";
ZCHECKER_MAINMENU_SPECIALHANDLING_TIP2 = "ZChecker actors and classes.";
ZCHECKER_MAINMENU_LOGLEVEL            = "Log level";
ZCHECKER_MAINMENU_LOGLEVEL_TIP        = "Will be updated within 5 world tics.";

ZCHECKER_MAINMENUOPT_LOGLEVEL_MAIN    = "1. General";
ZCHECKER_MAINMENUOPT_LOGLEVEL_DETAILED = "2. Detailed (default)";
ZCHECKER_MAINMENUOPT_LOGLEVEL_DEVELOPER = "3. Development/API";
ZCHECKER_MAINMENUOPT_LOGLEVEL_DEBUG   = "4. Debug mode";

ZCHECKER_MAINMENUOPT_FONTS_SMALL      = "Built-in smallfont";
ZCHECKER_MAINMENUOPT_FONTS_SMSHORT    = "Mono smallfont, short space";
ZCHECKER_MAINMENUOPT_FONTS_SMFULL     = "Mono smallfont, full space";
ZCHECKER_MAINMENUOPT_FONTS_CONFONT    = "Built-in confont";
ZCHECKER_MAINMENUOPT_FONTS_NEWSMALL   = "Built-in new smallfont";
ZCHECKER_MAINMENUOPT_FONTS_NEWCON     = "Built-in new confont";
ZCHECKER_MAINMENUOPT_NOFONTMSG        = "\c~Font \"\c-%s\c~\" isn't available. You might be using an old GZDoom engine version.";

ZCHECKER_MAINMENUOPT_NETEVENS_DISABLED = "Disabled";
ZCHECKER_MAINMENUOPT_NETEVENS_NA      = "Names and args";
ZCHECKER_MAINMENUOPT_NETEVENS_NAM     = "Names, args and maptime";
ZCHECKER_MAINMENUOPT_NETEVENS_FULL    = "Full information";

ZCHECKER_MAINMENUOPT_TWICE_SMOVE      = "Move silently";
ZCHECKER_MAINMENUOPT_TWICE_SCOPY      = "Copy silently";
ZCHECKER_MAINMENUOPT_TWICE_MOVEWARN   = "Move and warn (default)";
ZCHECKER_MAINMENUOPT_TWICE_COPYWARN   = "Copy and warn";


//  === Infopanels control menu ===

ZCHECKER_INFOPANELSMENU_TITLE         = "ZChecker panels";
ZCHECKER_INFOPANELSMENUDIV_PANELS     = "\c[gold]Informational panels settings";
ZCHECKER_INFOPANELSMENU_KEYSHELP1     = "\c[tan]Switch info: \ccSpace\cu/\ccEnter\cu, %s or \ccLeft\cu/\ccRight";
ZCHECKER_INFOPANELSMENU_KEYSHELP2     = "\c[darkgreen]Enter sumbenu: \ccF3\cu/\ccF4\cu/\ccTab\cu or \ccMMB";
ZCHECKER_INFOPANELSMENU_KEYSHELP3     = "\c[teal]Move panels: \cc+\cu/\ccKP+\cu,\cc-\cu/\ccKP-\cu or \ccMouse wheel";
ZCHECKER_INFOPANELSMENUDIV_RESET      = "\c[gold]Control";
ZCHECKER_INFOPANELSMENU_RESETBUTTON   = "Reset informational panels order";
ZCHECKER_INFOPANELSMENU_ZCHANDLER_ERROR = "\cxCannot locate ZChecker static event handler.\n\ciPossible reason: \cu\"\crEventHandler = ...\cu\"\n\ciin MAPINFO on GZDoom older than 4.8.0.\n\cxInformational panels are not able to be initialized.";
ZCHECKER_INFOPANELSMENUMSG_RESETORDER = "\ccThe informational panels order has been reset to defaults.";

ZCHECKER_INFOPANELS_MAIN              = "General/main info (index, name, ...)";
ZCHECKER_INFOPANELKEYS_MAIN           = "M";
ZCHECKER_INFOPANELS_WORLDPOS          = "World positioning";
ZCHECKER_INFOPANELKEYS_WORLDPOS       = "P";
ZCHECKER_INFOPANELS_INTERACTION       = "Interaction properties";
ZCHECKER_INFOPANELKEYS_INTERACTION    = "";
ZCHECKER_INFOPANELS_GEOMSECTORS       = "Geometry: actor sectors";
ZCHECKER_INFOPANELKEYS_GEOMSECTORS    = "S";
ZCHECKER_INFOPANELS_GEOMLINES         = "Geometry: actor lines";
ZCHECKER_INFOPANELKEYS_GEOMLINES      = "L";
ZCHECKER_INFOPANELS_INVENTORY         = "Inventory";
ZCHECKER_INFOPANELKEYS_INVENTORY      = "";
ZCHECKER_INFOPANELS_STATES            = "States";
ZCHECKER_INFOPANELKEYS_STATES         = "";
ZCHECKER_INFOPANELS_VISUAL            = "Visual [WIP]";
ZCHECKER_INFOPANELKEYS_VISUAL         = "";
ZCHECKER_INFOPANELS_PTRCOMMON         = "Common pointers";
ZCHECKER_INFOPANELKEYS_PTRCOMMON      = "P";
ZCHECKER_INFOPANELS_PTRINTERACT       = "Interaction pointers";
ZCHECKER_INFOPANELKEYS_PTRINTERACT    = "P";
ZCHECKER_INFOPANELS_PTRDEFLINKS       = "Deferred link pointers";
ZCHECKER_INFOPANELKEYS_PTRDEFLINKS    = "PL";
ZCHECKER_INFOPANELS_PTROTHER          = "Other pointers";
ZCHECKER_INFOPANELKEYS_PTROTHER       = "P";
ZCHECKER_INFOPANELS_ARGSTIDS          = "Args, special & TIDs";
ZCHECKER_INFOPANELKEYS_ARGSTIDS       = "TS";
ZCHECKER_INFOPANELS_FRIENDPLAYERS     = "Friendly players & teams";
ZCHECKER_INFOPANELKEYS_FRIENDPLAYERS  = "PT";
ZCHECKER_INFOPANELS_SOUNDDEFS         = "Sound properties";
ZCHECKER_INFOPANELKEYS_SOUNDDEFS      = "";
ZCHECKER_INFOPANELS_CHEATS            = "Cheats";
ZCHECKER_INFOPANELKEYS_CHEATS         = "";

ZCHECKER_INFOPANELSMENU_INALLPANELS   = "All";
ZCHECKER_INFOPANELSMENU_NOTINPANELS   = "None";

ZCHECKER_PANELSOPT_FLAGS_OFF          = "Disabled";
ZCHECKER_PANELSOPT_FLAGS_SHORT        = "Shorten";
ZCHECKER_PANELSOPT_FLAGS_LONG         = "Long";

ZCHECKER_PANELSUBMENUNOTE_PLAYSCOPE   = "Play-scoped class. Will be updated in world tick.";
ZCHECKER_PANELSUBMENU_DEFAULTLABEL    = "Submenu. ";
ZCHECKER_PANELSUBMENU_DEFAULTMORE     = "[...more]";

ZCHECKER_PANELSUBLABEL_MAIN_PREFIX    = "Show ";
ZCHECKER_PANELSUBLABEL_MAIN_TAG       = "tag anyway";
ZCHECKER_PANELSUBLABEL_MAIN_TAGAUTO   = "tag (auto)";
ZCHECKER_PANELSUBLABEL_MAIN_SELFPTR   = "pointer";
ZCHECKER_PANELSUBLABEL_MAIN_PLRINFO   = "player info";
ZCHECKER_PANELSUBLABEL_MAIN_XPREFIX   = "No extras";
ZCHECKER_PANELSUBMENU_MAIN_TITLE      = "ZChecker panel: General info";
ZCHECKER_PANELSUBMENU_MAIN_TAG        = "Actor tag";
ZCHECKER_PANELSUBMENU_MAIN_SELFPTR    = "Self pointer";
ZCHECKER_PANELSUBMENU_MAIN_PLAYERINFO = "Player information";
ZCHECKER_PANELMAINOPT_TAGS_OFF        = "Never";
ZCHECKER_PANELMAINOPT_TAGS_AUTO       = "If different from classname";
ZCHECKER_PANELMAINOPT_TAGS_ON         = "Always";

ZCHECKER_PANELSUBLABEL_WPOS_PREFIX    = "";
ZCHECKER_PANELSUBLABEL_WPOS_ROLLON    = "All rotations ";
ZCHECKER_PANELSUBLABEL_WPOS_ROLLOFF   = "Angle and pitch ";
ZCHECKER_PANELSUBLABEL_WPOS_FRACLEN   = "with frac of length";
ZCHECKER_PANELSUBLABEL_WPOS_BUTTONS   = ", show inputs";
ZCHECKER_PANELSUBMENU_WPOS_TITLE      = "ZChecker panel: World positioning";
ZCHECKER_PANELSUBMENU_WPOSDIV_TILTS   = "Tilts";
ZCHECKER_PANELSUBMENU_WPOS_DECIMAMNT  = "Number of decimals";
ZCHECKER_PANELSUBMENU_WPOS_NOROLL     = "Hide roll";
ZCHECKER_PANELSUBMENU_WPOSDIV_OTHER   = "Other";
ZCHECKER_PANELSUBMENU_WPOS_PLAYERBUTTONS = "Player inputs";

ZCHECKER_PANELSUBLABEL_INV_PREFIX     = "";
ZCHECKER_PANELSUBLABEL_INV_SORTEDBY   = " items sorted by";
ZCHECKER_PANELSUBLABEL_INV_UNSORTED   = " unsorted items";
ZCHECKER_PANELSUBLABEL_INV_REVERSED   = "(asc.)";
ZCHECKER_PANELSUBMENU_INV_TITLE       = "ZChecker panel: Inventory";
ZCHECKER_PANELSUBMENU_INV_ITEMSAMNT   = "Number of elements";
ZCHECKER_PANELSUBMENU_INV_SORTBY      = "Sort output by";
ZCHECKER_PANELSUBMENU_INV_REVERSE     = "Ascending (reversed) output";
ZCHECKER_PANELINVOPT_SORT_UNSORTED    = "(Unsorted)";
ZCHECKER_PANELINVOPT_SORT_NAMES       = "Names";
ZCHECKER_PANELINVOPT_SORT_CURAMOUNT   = "Current amount";
ZCHECKER_PANELINVOPT_SORT_MAXAMOUNT   = "Max amount";

ZCHECKER_PANELSUBLABEL_STATES_PREFIX  = "";
ZCHECKER_PANELSUBLABEL_STATES_STATES  = "state(s)";
ZCHECKER_PANELSUBLABEL_STATES_UNLIMITED = "Unlimited";
ZCHECKER_PANELSUBLABEL_STATES_LOGGING = "logging enabled";
ZCHECKER_PANELSUBMENU_STATES_TITLE    = "ZChecker panel: States";
ZCHECKER_PANELSUBMENU_STATESDIV_GENERAL = "General";
ZCHECKER_PANELSUBMENU_STATES_AMNT     = "Amount";
ZCHECKER_PANELSUBMENU_STATES_CONLOG   = "Log tracing to console";
ZCHECKER_PANELSUBMENU_STATESNOTE_CONLOG = "Note: amount of 0 is an unlimited output";
ZCHECKER_PANELSUBMENU_STATESDIV_CUR   = "For current state";
ZCHECKER_PANELSUBMENU_STATES_TICSBAR  = "Tics left bar";
ZCHECKER_PANELSUBMENU_STATES_FLAGS    = "Flags";
ZCHECKER_PANELSUBMENU_STATES_EXTRAINFO = "Extra info";
ZCHECKER_PANELSUBMENU_STATESDIV_PSPRITE = "For ready weapon state/PSprite"; // Not used in the current version. >>>
ZCHECKER_PANELSUBMENU_STATES_OVERLAYS = "Active overlay(s)"; // <...>
ZCHECKER_PANELSUBMENU_STATES_SPECIALID = "Special overlay ID";
ZCHECKER_PANELSTATESOPT_UNLIMITED     = "Unlimited";
ZCHECKER_PANELSTATESOPT_PSPR_OFF      = "Disabled";
ZCHECKER_PANELSTATESOPT_PSPR_M        = "Main only";
ZCHECKER_PANELSTATESOPT_PSPR_MFLASH   = "Main + flash";
ZCHECKER_PANELSTATESOPT_PSPR_SPEC     = "Special only";
ZCHECKER_PANELSTATESOPT_PSPR_MSPEC    = "Main + special"; // <...>
ZCHECKER_PANELSTATESOPT_PSPR_ALL      = "All overlays"; // <<< Not used in the current version.

ZCHECKER_PANELSUBLABEL_GSEC_PREFIX    = "";
ZCHECKER_PANELSUBLABEL_GSEC_FCSEC     = "Separated";
ZCHECKER_PANELSUBLABEL_GSEC_CURSEC    = "United";
ZCHECKER_PANELSUBLABEL_GSEC_PREFIX2   = "Show ";
ZCHECKER_PANELSUBLABEL_GSEC_HEIGHTS   = "heights";
ZCHECKER_PANELSUBLABEL_GSEC_LIGHT     = "light";
ZCHECKER_PANELSUBLABEL_GSEC_TEXTURES  = "txtrs";
ZCHECKER_PANELSUBLABEL_GSEC_FLAGS     = "flags";
ZCHECKER_PANELSUBLABEL_GSEC_DAMAGE    = "damage";
ZCHECKER_PANELSUBLABEL_GSEC_PHYSICS   = "phys";
ZCHECKER_PANELSUBLABEL_GSEC_PORTALS   = "portal";
ZCHECKER_PANELSUBLABEL_GSEC_TERRAIN   = "terrain";
ZCHECKER_PANELSUBLABEL_GSEC_OTHER     = "other";
ZCHECKER_PANELSUBMENU_GSEC_TITLE      = "ZChecker panel: Sectors geometry";
ZCHECKER_PANELSUBMENU_GSEC_SEPARATE   = "Separated floor and ceiling";
ZCHECKER_PANELSUBMENU_GSEC_HEIGHTS    = "Heights";
ZCHECKER_PANELSUBMENU_GSEC_LIGHT      = "Light level";
ZCHECKER_PANELSUBMENU_GSEC_TEXTURES   = "Textures";
ZCHECKER_PANELSUBMENU_GSEC_FLAGS      = "Flags";
ZCHECKER_PANELSUBMENU_GSEC_DAMAGE     = "Damage (also for terrain)";
ZCHECKER_PANELSUBMENU_GSEC_PHYSICS    = "Interaction/Physics";
ZCHECKER_PANELSUBMENU_GSEC_PORTALS    = "Portals";
ZCHECKER_PANELSUBMENU_GSEC_TERRAIN    = "Floor terrain data";
ZCHECKER_PANELSUBMENU_GSECNOTE_WIP    = "(Not released yet):";
ZCHECKER_PANELSUBMENU_GSEC_OTHER      = "Other: water level, special, ...";
ZCHECKER_PANELGEOMSECOPT_HEIGHT_OFF   = "Disabled";
ZCHECKER_PANELGEOMSECOPT_HEIGHT_ZONLY = "Z coordinate";
ZCHECKER_PANELGEOMSECOPT_HEIGHT_ZDELTA = "Z coord + actor delta";

ZCHECKER_PANELGEOMLNOPT_TYPE_LOS      = "On line of sight"; // Not used in the current version. >>>
ZCHECKER_PANELGEOMLNOPT_TYPE_BLOCK    = "Blocking line"; // <...>
ZCHECKER_PANELGEOMLNOPT_TYPE_BOTH     = "Both (LOS & blocking)";
ZCHECKER_PANELGEOMLNOPT_SPEC_OFF      = "Disabled";
ZCHECKER_PANELGEOMLNOPT_SPEC_TAG      = "Action and tag";
ZCHECKER_PANELGEOMLNOPT_SPEC_ARGS     = "Action, args and tag"; // <...>
ZCHECKER_PANELGEOMLNOPT_SPEC_ALL      = "Everything"; // <<< Not used in the current version.

ZCHECKER_PANELSUBMENU_SNDDEFS_TITLE   = "ZChecker panel: Sound definitions";
ZCHECKER_PANELSUBMENU_SNDDEFS_RARE    = "Output rare sounds";


//  === Visual Settings control menu ===

ZCHECKER_VISUAL_TITLE                 = "ZChecker: HUD and visual settings";
ZCHECKER_VISUALDIV_POSITIONING        = "Panels positioning";
ZCHECKER_VISUAL_START_X               = "Panels start X, %";
ZCHECKER_VISUAL_START_X_10            = "Panels start X, x10%";
ZCHECKER_VISUAL_START_Y               = "Panels start Y, %";
ZCHECKER_VISUAL_START_Y_10            = "Panels start Y, x10%";
ZCHECKER_VISUAL_OFFSET_X              = "Next panels X offset, %";
ZCHECKER_VISUAL_PANELS_SCALE          = "Panels scale";
ZCHECKER_VISUAL_PANELS_Y_GAP          = "Panels interval Y, multiplier";
ZCHECKER_VISUALDIV_BACKGROUND         = "Panels background";
ZCHECKER_VISUAL_ENABLED               = "Enabled";
ZCHECKER_VISUAL_DIMCOLOR              = "Background color";
ZCHECKER_VISUAL_DIMALPHA              = "Background alpha";
ZCHECKER_VISUAL_DIMBORDERWIDTH        = "Border width";
ZCHECKER_VISUALDIV_EVERYTHINGMAP_INFO = "\"Everything\" map actor info";
ZCHECKER_VISUAL_INFOSTR_X             = "Actor info string X, %";
ZCHECKER_VISUAL_INFOSTR_X10           = "Actor info string X, x10%";
ZCHECKER_VISUAL_INFOSTR_Y             = "Actor info string Y, %";
ZCHECKER_VISUAL_INFOSTR_Y10           = "Actor info string Y, x10%";
ZCHECKER_VISUAL_INFOSTR_SCALE         = "Actor info string scale";
ZCHECKER_VISUALDIV_OTHER              = "Other";
ZCHECKER_VISUAL_FONTTYPES             = "General font";

//  === Control menu for the "Everything" map ==

ZCHECKER_EVMAPMENU_TITLE              = "ZChecker: \"Everything\" map settings";
ZCHECKER_EVMAPMENU_SPAWNOPTIONS       = "Spawning options";
ZCHECKER_EVMAPMENUDIV_GENERAL         = "- General -";
ZCHECKER_EVMAPMENU_SPAWNREPLACED      = "Replaced actors";
ZCHECKER_EVMAPMENU_SPAWNBUILTIN       = "Actors built-in to the engine";
ZCHECKER_EVMAPMENU_RESTRICT           = "Unsafe built-in actors replacement";
ZCHECKER_EVMAPMENUDIV_SPRITES         = "- By empty sprites -";
ZCHECKER_EVMAPMENU_MISSING            = "Actors with missing sprites";
ZCHECKER_EVMAPMENU_TNT1A0             = "Actors with the \'TNT1A0\' sprite";
ZCHECKER_EVMAPMENU_PLYC               = "Actors with corrupted sprite names";
ZCHECKER_EVMAPMENUDIV_CODEBASED       = "- Code-based -";
ZCHECKER_EVMAPMENU_MISSILES           = "+MISSILE actors";
ZCHECKER_EVMAPMENU_STEALTH            = "+STEALTH actors";
ZCHECKER_EVMAPMENU_INVISIBLE          = "+INVISIBLE actors";
ZCHECKER_EVMAPMENU_PLAYERCHUNK        = "Inherited from \'PlayerChunk\'";
ZCHECKER_EVMAPMENU_BOSSBRAIN          = "Inherited from \'BossBrain\'";
ZCHECKER_EVMAPMENUDIV_OTHER           = "Other";
ZCHECKER_EVMAPMENU_AUTONOTARGET       = "Auto-notarget";
ZCHECKER_EVMAPMENU_AUTOGOD            = "Auto-godmode";
ZCHECKER_EVMAPMENU_SPEC_CHEATS        = "Enable specified cheats automatically";
ZCHECKER_EVMAPMENU_ENTERING           = "when entering the \"Everything\" map.";
ZCHECKER_EVMAPMENU_LOGSPAWN           = "Log spawn information";
ZCHECKER_EVMAPMENU_LOGCREATED1        = "Log information to console about created (or";
ZCHECKER_EVMAPMENU_LOGCREATED2        = "skipped) actors on the \"Everything\" map.";
ZCHECKER_EVMAPMENU_FORCEUSE           = "Force use map scripts";
ZCHECKER_EVMAPMENU_ALLOWSPEC1         = "This option allows using special \"Everything\" map";
ZCHECKER_EVMAPMENU_ALLOWSPEC2         = "scripts for any map, skipping the conformity check.";
ZCHECKER_EVMAPMENU_ZCHANDLER_ERROR    = "\"\n\cxCannot locate ZChecker static event handler.\n\ciPossible reason: \cu\"\crEventHandler = ...\cu\"\n\ciin MAPINFO on GZDoom older than 4.8.0.\n\cx\"Everything\" map CCMDs cannot be used.";

ZCHECKER_EVMAPMENUDIV_EVCCMDS         = "Related CCMDs (closes menu)";
ZCHECKER_EVMAPMENUDIV_MAINCCMDS       = "- General CCMDs -";
ZCHECKER_EVMAPMENU_RECREATEACTORS     = "Recreate actors\cc: \"\cbzcevre\cc\"";
ZCHECKER_EVMAPMENU_CHANGEMAP1         = "To simple Everything map\cc: \"\cuzcev map\cc\"";
ZCHECKER_EVMAPMENU_CHANGEMAP2         = "To alternative Everything map\cc: \"\cuzcev map2\cc\"";
ZCHECKER_EVMAPMENU_CHANGEMAP1ASK      = "This command will warp you to the Everything map\nwithout saving current progress. \n\nAre you sure? [Y/N]";
ZCHECKER_EVMAPMENU_CHANGEMAP2ASK      = "This command will warp you to the\nEverything map (alternative version by StormCatcher.77)\nwithout saving current progress. \n\nAre you sure? [Y/N]";
ZCHECKER_EVMAPMENU_WARPSTART          = "Teleport to start\cc: \"\cmzcevg #\cqstart\cc\"";
ZCHECKER_EVMAPMENUDIV_WARPMONS        = "- Teleport to monsters -";
ZCHECKER_EVMAPMENU_WARPMONSTERS       = "Monsters, regular\cc: \"\cmzcevg #\cdmons\cc\"";
ZCHECKER_EVMAPMENU_WARPLMONS          = "Monsters, large\cc: \"\cmzcevg #\cdlmons\cc\"";
ZCHECKER_EVMAPMENU_WARPHMONS          = "Monsters, huge\cc: \"\cmzcevg #\cdhmons\cc\"";
ZCHECKER_EVMAPMENUDIV_WARPITEMS       = "- Teleport to items -";
ZCHECKER_EVMAPMENU_WARPWEAPS          = "Weapons\cc: \"\cmzcevg #\cdweaps\cc\"";
ZCHECKER_EVMAPMENU_WARPAMMO           = "Ammo\cc: \"\cmzcevg #\cdammo\cc\"";
ZCHECKER_EVMAPMENU_WARPHPARMOR        = "Health/armor items\cc: \"\cmzcevg #\cdhealth\cc\"";
ZCHECKER_EVMAPMENU_WARPPOWERUPS       = "Powerups\cc: \"\cmzcevg #\cdpowerups\cc\"";
ZCHECKER_EVMAPMENU_WARPKEYS           = "Keys\cc: \"\cmzcevg #\cdkeys\cc\"";
ZCHECKER_EVMAPMENU_WARPOTHITEMS       = "Other items\cc: \"\cmzcevg #\cdothitems\cc\"";
ZCHECKER_EVMAPMENUDIV_WARPDECOR       = "- Teleport to decorations and objects -";
ZCHECKER_EVMAPMENU_WARPDSOLID         = "Impassable, regular\cc: \"\cmzcevg #\cdsolid\cc\"";
ZCHECKER_EVMAPMENU_WARPDLSOLID        = "Impassable, large\cc: \"\cmzcevg #\cdsolidl\cc\"";
ZCHECKER_EVMAPMENU_WARPDETHER         = "Passable, regular\cc: \"\cmzcevg #\cdpass\cc\"";
ZCHECKER_EVMAPMENU_WARPDLETHER        = "Passable, large\cc: \"\cmzcevg #\cdpassl\cc\"";
ZCHECKER_EVMAPMENU_WARPDSHOOT         = "Shootable, regular\cc: \"\cmzcevg #\cdshoot\cc\"";
ZCHECKER_EVMAPMENU_WARPDLSHOOT        = "Shootable, large\cc: \"\cmzcevg #\cdshootl\cc\"";
ZCHECKER_EVMAPMENU_WARPDNOBLKMAP      = "NOBLOCKMAP-flagged\cc: \"\cmzcevg #\cdnoblockmap\cc\"";
ZCHECKER_EVMAPMENU_WARPDNOINTRCT      = "NOINTERACTION-flagged\cc: \"\cmzcevg #\cdnoint\cc\"";
ZCHECKER_EVMAPMENU_WARPDHUGE          = "Huge decorations\cc: \"\cmzcevg #\cddhuge\cc\"";
ZCHECKER_EVMAPMENUDIV_WARPOTHER       = "- Teleport to other actors -";
ZCHECKER_EVMAPMENU_WARPMISSILES       = "Projectiles\cc: \"\cmzcevg #\cdproj\cc\"";
ZCHECKER_EVMAPMENU_WARPPLAYERS        = "Player classes\cc: \"\cmzcevg #\cdplayers\cc\"";
ZCHECKER_EVMAPMENU_WARPOTHER          = "Special actors\cc: \"\cmzcevg #\cdspecial\cc\"";

//  === Console commands control menu ===

ZCHECKER_CCMDMENU_TITLE               = "ZChecker: call console command";
ZCHECKER_CCMDMENU_HELPNOTE1           = "[WIP] Some frequently used commands will be here.";
ZCHECKER_CCMDMENU_HELPNOTE2           = "All commands may be shown via the \"zchelp all\"";
ZCHECKER_CCMDMENU_HELPNOTE3           = "console command; also you may use \"zchelp <command>\".";
ZCHECKER_CCMDMENU_ZCHANDLER_ERROR     = "\cxCannot locate ZChecker static event handler.\n\ciPossible reason: \cu\"\crEventHandler = ...\cu\"\n\ciin MAPINFO on GZDoom older than 4.8.0.\n\cxConsole commands cannot be used.";
ZCHECKER_CCMDMENU_EXAMPLES            = "Command examples:";
ZCHECKER_CCMDMENU_ZCADD               = "\"zcadd\": Add linetarget to panel";
ZCHECKER_CCMDMENU_ZCADD_SELF          = "\"zcadd self\": Add self to panel";
ZCHECKER_CCMDMENU_ZCREM               = "\"zcrem\": Clear all panels";
ZCHECKER_CCMDMENU_ZCHELP              = "\"zchelp\": Print short help to console";


//  === An Everything" maps ==

ZCHECKER_EVMAP_INITERROR              = "Cannot run due to the map errors, terminating.";
ZCHECKER_EVMAP_RECREATEACTORS         = "Recreating/reloading map actors...";
ZCHECKER_EVMAP_RELOADSECTORS          = "Reloading general properties for all sectors...";
ZCHECKER_EVMAP_AUTOIDDQD              = "Auto-godmode enabled.";
ZCHECKER_EVMAP_AUTONOTARGET           = "Auto-notarget enabled.";
ZCHECKER_EVMAPSPAWN_SUCCESS           = "\cqsummoned class \"\cd%s\cq\"\c~ (sprite \"%s\").";
ZCHECKER_EVMAPSPAWN_SKIPBUILTIN       = "\chAll built-in classes has been skipped.";
ZCHECKER_EVMAPSPAWN_EMPTYSPRITESKIP   = "\c~class \"\cz%s\c~\" omitted because of empty sprite \"%s\".";
ZCHECKER_EVMAPSPAWN_MISSPRITESKIP     = "\c~class \"\cz%s\c~\" omitted because of \cpmissing sprite\c~ \"\cs%s\c~\".";
ZCHECKER_EVMAPSPAWN_CORRUPSPRITESKIP  = "\c~class \"\cz%s\c~\" omitted because of \crcorrupted sprite\c~ \"\cs%s\c~\" (tends to be \"%s\").";
ZCHECKER_EVMAPSPAWN_MISSILESSKIP      = "\c~class \"\cz%s\c~\" omitted because of the \cemissile nature\c~.";
ZCHECKER_EVMAPSPAWN_INVISSKIP         = "\c~class \"\cz%s\c~\" omitted because of \c-+STEALTH\c~/\c-+INVISIBLE\c~ flag set.";
ZCHECKER_EVMAPSPAWN_PLCHUNKSKIP       = "\c~class \"\cz%s\c~\" omitted due to inheritance from the \"PlayerChunk\".";
ZCHECKER_EVMAPSPAWN_BOSSBRAINSKIP     = "\c~class \"\cz%s\c~\" omitted due to inheritance from the \"BossBrain\".";
ZCHECKER_EVMAPSPAWN_REPLACEDSKIP      = "\c~class \"\cz%s\c~\" replaced and thus omitted.";
ZCHECKER_EVMAPSPAWN_REPLRESTRICTEDSKIP = "\c~replaced by \"\c-%s\c~\" class \"\c-%s\c~\" is unsafe\c~.";
ZCHECKER_EVMAPCATEGORY_PREFIX         = "\cuCategory \cj%s\cu. ";
ZCHECKER_EVMAPCATEGORY_NORMALSPAWN    = "Spawned %i actor(s) in total";
ZCHECKER_EVMAPCATEGORY_EMPTYSPAWN     = "No actors spawned";
ZCHECKER_EVMAPCATEGORY_PARTIALSPAWN   = "Spawned \ca%i/%i\cu actor(s) in total";
ZCHECKER_EVMAP_RESUMMON               = "\c~Spawned \c-%s\c~.";
ZCHECKER_EVMAP_INFOSTR_REPLACES       = "%s \cnreplaces\c- %s";



//  === Console commands ===

// General:

ZCHECKER_CCMD_WIP                     = "\c~[Work-in-progress command, may behave strangely or not work at all].";

//  "ZCConsoleCommand::GetPlaceTestee()" and "ZCConsoleCommand::LinetraceActor()"
ZCHECKER_GETACTOR_SKIPPEDSPECIAL      = "Skipped ZChecker class \"%s\".";
ZCHECKER_GETACTOR_LTNOACTORS          = "No available linetarget actors found.";
ZCHECKER_GETACTOR_EMPTYPOS            = "No actor in position %i.";
ZCHECKER_GETACTOR_WRONGPOS            = "\c!Wrong position %i\c- (must be in range [1..%i]).";
ZCHECKER_GETACTOR_UNKNOWNKEYWORD      = "\c!Unknown placeholder \"%s\" in position %i\c~. Possible values: \c-1..%i, s[elf], cam[era], lt\c~|\c-linetarget\c~.";

//  "ZCConsoleCommand::ParseSpecialActorName()"
ZCHECKER_PARSENAME_WRONGSELECT        = "Class selection index \"\c!%s\c-\" isn't a positive integer.";
ZCHECKER_PARSENAME_EMPTYKEYWORD       = "\c!Skipped\c- empty placeholder \"%s\". \c~You may use \"$null\" or \"$none\" to override this.";
ZCHECKER_PARSENAME_UNSETVAR           = "\c!Skipped\c- unset classname variable \"%s\".";
ZCHECKER_PARSENAME_NOCLASSCHARS       = "\c!No class identifier characters provided\c-.";
ZCHECKER_PARSENAME_WITHFILTER         = "\c~ with filter \cj%s\c~";
ZCHECKER_PARSENAME_NOTFOUND           = "Cannot find any suitable actor name candidates";
ZCHECKER_PARSENAME_FOUNDSOME          = "Found more than one suitable actor name candidate";
ZCHECKER_PARSENAME_SELECTBOUNDS       = "\c!Selected index \cn%i \c!is out of range\c- of the found candidates (1..%i).";
ZCHECKER_PARSENAME_IGNORESELECT       = "Ignoring selection \cn%i\c-, the class is already unambiguously defined";

//  "ZCConsoleCommand::RemoveWorldThinker()"
ZCHECKER_REMOVEPREVENT_LIVEPLAYER     = "\crTried to destroy a live player %i, skipped\c-. You may enable this using the \"Allow dangerous actions\" option.";
ZCHECKER_REMOVEWARNING_LIVEPLAYER     = "destroying live player";
ZCHECKER_REMOVEPREVENT_ZCINTERNAL     = "\crInternal ZChecker class \"\c-%s\cr\" in the destroy list, skipped\c-. You may enable this using the \"Allow dangerous actions\" option.";
ZCHECKER_REMOVEWARNING_ZCINTERNAL     = "destroying internal ZChecker class";

//  "ZCAddCommand::HandleDuplicateActorFields()"
ZCHECKER_ADD_DUPLICATELINK            = "\c~Found \c!duplicate link \c~for actor \c-%s\c~ in panel %i.";


//  "File ZCCommandsGeneral.zsc"

//  "zchelp":
ZCHECKER_ZCHELP_HELP_TITLE            = "zchelp [a[ll]|-a|--all|-v];zchelp <zccommand>";
ZCHECKER_ZCHELP_HELP_DESC             = "This help text. If <command> is provided, prints out a help text for the specific command (in most cases, with examples). Otherwise, if <all> output is enabled, displays the general complete help text.";
ZCHECKER_ZCHELP_CANNOTFIND            = "\czZChecker help: \cxcannot find ZChecker console command \c~\"\c-%s\c~\"\cx.";
ZCHECKER_ZCHELP_VERBOSETITLE          = "\cyZChecker \chv%s.\
  (c)\cj JSO_x \cha.k.a.\cj Morthimer McMare\ch;\
  (c)\cj LLDM-Doom-modding\ch team.\n\n";
ZCHECKER_ZCHELP_HEADERCOMMONCCMDS     = "\cjAvailable commands, commonly used\c-:";
ZCHECKER_ZCHELP_HEADERALLCCMDS        = "\cjAvailable commands, complete list\c-:";

//  "zcadd":
ZCHECKER_ZCADD_HELP_TITLE             = "zcadd [s[elf]|w[eapon]|cam[era]|force] [<panel>];zcaddself [<panel>];zcaddweap [<panel>];zcaddforce [<panel>];zcaddlistget [[[:]<classfilter>:]<numindex>] [<panel>]";
ZCHECKER_ZCADD_HELP_DESC              = "Add the linetarget/current player/current weapon/non-solid linetarget/random world actor into the panels list. <panel> is a panel number to set to; if omitted, the first empty slot will be used.";
ZCHECKER_ZCADD_ADDINSUFFPLACE         = "Cannot add target to the panels list, insufficient space. Try adding the target to list directly via \"zcadd 1\"..\"zcadd %i\".";
ZCHECKER_ZCADD_NOWEAPON               = "No weapon, cannot add.";
ZCHECKER_ZCADD_FORCENOTFOUND          = "Cannot find any suitable actors.";
ZCHECKER_ZCADD_CAMERAISPLAYER         = "\c~Player camera is linked to the player, adding player actor itself.";
ZCHECKER_ZCADD_SUCCESSCOMMON          = "Added actor %s";
ZCHECKER_ZCADD_SUCCESSPLAYER          = "Added a PlayerPawn actor %s";
ZCHECKER_ZCADD_SUCCESSWEAPON          = "Added a StateProvider actor %s";
ZCHECKER_ZCADD_SUCCESSFORCED          = "Added actor %s";
ZCHECKER_ZCADD_SUCCESSCAMERA          = "Added a player camera %s";
ZCHECKER_ZCADD_USINGPREVLINK          = "\c~Using previous link in panel \cj%i\c~ for actor \cu%s\c~.";

//  "zcrem":
ZCHECKER_ZCREM_HELP_TITLE             = "zcrem [<panel>]";
ZCHECKER_ZCREM_HELP_DESC              = "Remove testee from informational panel <panel>; removes the whole list if no argument provided.";
ZCHECKER_ZCREM_SUCCESS                = "Removed actor \"%s\" <%s> from position %i.";
ZCHECKER_ZCREM_SUCCESSTOTAL           = "All actors cleared from the infopanels.";
ZCHECKER_ZCREM_EMPTYPOS               = "Cannot remove, there's no actor in position %i.";


// File "ZCCommandsActorAlter.zsc":

//  "zcact":
ZCHECKER_ZCACT_HELP_TITLE             = "zcact [<pos>] <action>";
ZCHECKER_ZCACT_HELP_DESC              = "Do special complex action with actor in <pos> (or linetarget, if omitted). Possible <action>s: \"rev[ive]\"/\"res[urrect]\", \"k[ill]\", \"xk[ill]\"/\"mdk\", \"rem[ove]\"/\"rm\"/\"del[ete]\", \"stop\", \"[state]freeze\"/\"[state]frz\", \"[state]skip\", \"[tics]revert\".";
ZCHECKER_ZCACT_CANNOTREVIVE           = "Cannot revive actor %s";
ZCHECKER_ZCACT_REVIVED                = "Revived actor %s";
ZCHECKER_ZCACT_REVIVEVANISH           = "Actor %s revived, but vanished.";
ZCHECKER_ZCACT_REVIVEBLOCKED          = "Actor %s reviving \cablocked\c-.";
ZCHECKER_ZCACT_KILLED                 = "Killed actor %s.";
ZCHECKER_ZCACT_CANNOTKILL             = "Cannot kill actor %s";
ZCHECKER_ZCACT_XKILLED                = "Extremely killed actor %s.";
ZCHECKER_ZCACT_CANNOTXKILL            = "Cannot extremely kill actor %s";
ZCHECKER_ZCACT_DESTROYED              = "Destroyed actor %s.";
ZCHECKER_ZCACT_STOPPED                = "Stopped actor %s.";
ZCHECKER_ZCACT_STATEFREEZED           = "Delay for actor %s set to \"-1\" (actor temporally freezed).";
ZCHECKER_ZCACT_STATESKIPPED           = "Skipped state for actor %s.";
ZCHECKER_ZCACT_STATETICSRESET         = "Reset state delay for actor %s.";

//  "zcgive":
ZCHECKER_ZCGIVE_HELP_TITLE            = "zcgive [<pos>] <item> [<amount=1>]";
ZCHECKER_ZCGIVE_HELP_DESC             = "Give <amount> <item>s to the testee <pos> (or linetarget, if omitted)";
ZCHECKER_ZCGIVE_SUCCESS               = "Item \"%s\" was given to actor \"%s\".";
ZCHECKER_ZCGIVE_CANNOTRECEIVE         = "Actor %s cannot receive item.";
ZCHECKER_ZCGIVE_NOTINVCLASS           = "\"%s\" isn't an Inventory actor.";

//  "zctake":
ZCHECKER_ZCTAKE_HELP_TITLE            = "zctake [<pos>] <item> [<amount=1>]";
ZCHECKER_ZCTAKE_HELP_DESC             = "Take <amount> <item>s from the testee <pos> (or linetarget, if omitted)";
ZCHECKER_ZCTAKE_SUCCESS               = "Item \"%s\" is taken from actor \"%s\".";
ZCHECKER_ZCTAKE_CANNOTRECEIVE         = "Cannot take item from actor %s.";
ZCHECKER_ZCTAKE_NOTINVCLASS           = "\"%s\" isn't an Inventory actor.";

//  "zcsummon":
ZCHECKER_ZCSUMMON_HELP_TITLE          = "zcsummon <class> [<amount=1>] [<comma-separated list of extra properties>]";
ZCHECKER_ZCSUMMON_HELP_DESC           = "Summon <amount> of <class>es by rules of build-in eponymous command. Extended info (<extras>) may be provided as a comma-separated list without spaces. Possible parameters are:\
  BEHAVIOR: f[riend]|foe, aggr[essiveness]:<dflt55>, [no]infi[ght], notproj[ectile], dormant;\
  WORLD   : [rel]ang[le]:<angle>, [rel]pitch:<pitch>, zofs:<mappixels>, f[wd]ofs:<mappixels>, [float]speed:<speed>;\
  SPECIAL : panel|add[:<pos>], tid:<TID>, spec:<special>, a[rg]0:<arg0>,...,a[rg]4:<arg4>, hp|health:<hp>.";
ZCHECKER_ZCSUMMON_CLAMPINT            = "\c!%s (%i) isn't in range [%i; %i]. \c-Clamped to %i.";
ZCHECKER_ZCSUMMON_CLAMPFLOAT          = "\c!%s (%f) isn't in range [%.3f; %.3f]. \c-Clamped to %.3f.";
ZCHECKER_ZCSUMMON_WRONGPANEL          = "\c!Wrong panel number \"%s\".";
ZCHECKER_ZCSUMMON_WRONGARG            = "\c!Wrong argument number for parameter %s.";
ZCHECKER_ZCSUMMON_WRONGDIGIT          = "\c!Value \"%s\" \c-for parameter \"%s\" \c!isn't a digit\c-.";
ZCHECKER_ZCSUMMON_EMPTYVALUE          = "\c!Empty value for parameter \"%s\".";
ZCHECKER_ZCSUMMON_UNKNOWNPARAM        = "\c!Unknown parameter \"%s\"";
ZCHECKER_ZCSUMMON_UNKNOWNFLAG         = "\c!Unknown flag \"%s\".";
ZCHECKER_ZCSUMMON_LIMITPREVENT        = "Trying to summon more than 256 actors in once. \c~You may disable this limit using the \"Allow dangerous actions\" option.";
ZCHECKER_ZCSUMMON_LIMITWARNING        = "summoning more than 256 actors";
ZCHECKER_ZCSUMMON_SUCCESS             = "Summoned %i %s \c~of class \"\cd%s\c~\".";
ZCHECKER_ZCSUMMON_SUCCESS_1ACTOR      = "actor";
ZCHECKER_ZCSUMMON_SUCCESS_ACTORS      = "actors";
ZCHECKER_ZCSUMMON_ADDINSUFFPLACE      = "Cannot add actor to list, insufficient space. Try adding the target to the list directly via parameter \"panel:1\"..\"panel:%i\".";
ZCHECKER_ZCSUMMON_ADDONLYLAST         = "\c~Only last summoned actor added to the list.";
ZCHECKER_ZCSUMMON_CANNOTSUMMON        = "\caCannot summon actor class \cu\"\c-%s\cu\". It may be abstract or immediately destroyed in the BeginPlay() override.";
ZCHECKER_ZCSUMMON_NOTACTOR            = "\"%s\" isn't an Actor class.";

//  "zccopyclass"/"zccopysummon":
ZCHECKER_ZCCOPYPASTE_HELP_TITLE       = "zccopyclass;zccopysummon [<amount=1>] [<comma-separated list as in \"zcsummon\">]";
ZCHECKER_ZCCOPYPASTE_HELP_DESC        = "A paired command. \"zccopyclass\" saves a linetarget actor class into $savedclass classname variable; \"zccopysummon\" summons a $savedclass actor(s).";

//  "zcsetflag":
ZCHECKER_ZCSETFLAG_HELP_TITLE         = "zcsetflag [<pos>] <flag name> [<value: 0/f[alse]/reset or 1/t[rue]/set>[,nospec]];zcsetf [<pos>] <flag name> [<value>[,nospec]];zcsf [<pos>] <flag name> [<value>[,nospec]]";
ZCHECKER_ZCSETFLAG_HELP_DESC          = "Set/reset a <flag> for the testee in <pos> (or linetarget actor, if omitted). If no <value> is provided, toggles the <flag>. Note: because of asynchronous ZScript netevent and ACS machine execution, the result for most of the flags will be delayed by 1 tic.";
ZCHECKER_ZCSETFLAG_SUCCESS            = "Flag \"%s\" for actor %s is succesfully set to %i.";

//  "zcsetstate":
ZCHECKER_ZCSETSTATE_HELP_TITLE        = "zcsetstate [<pos>] <state label>;zcsets [<pos>] <state label>;zcsetst [<pos>] <state label>;zcst [<pos>] <state label>";
ZCHECKER_ZCSETSTATE_HELP_DESC         = "Set a state to <state label> for the testee in <pos> (or actor on line of sight if omitted). Note: because of asynchronous ZScript/ACS execution, in singleplayer the result for most of the flags will be delayed by 1 tic.";

//  "zcsetprop":
ZCHECKER_ZCSETP_HELP_TITLE            = "zcsetprop [<pos>] [add|rel[ative][:<pos>]|raw] <property>:<value>[,<property>:<value>,[...]];zcsetp [<pos>] [add|rel[:<pos>]] <property>:<value>[,...];zcsp [<pos>] [add|rel[:<pos>]] <property>:<value>[,...];zchate [<pos>] [<pos_newtarget>|null]";
ZCHECKER_ZCSETP_HELP_DESC             = "Set a <property> to <value> for the actor in position <pos> (or for the linetarget, if omitted). By default or with a \"raw\" parameter all properties will be simply overwritten; with \"add\" they will be added to the current values (if possible); and with \"rel[ative]][:<pos>]\" will be added relative to the specified actor's properties or to calling player if <pos> is omitted (also if it is possible). Recognizable properties are:\
  WORLD   : x <float>, y <float>, z <float>|floor|ceil|rawceil, velx|vely|velz <float>, angle|pitch|roll <float>;\
  INTERACT: health|hp <int>|s[pawn]|max, [float]speed <float>, radius <float>, height <float>, mass <int>, gravity <float>, rawhp <int>;\
  VISUAL  : scale[x|y] <float>, alpha <float>, renderstyle <style>;\
  POINTERS: target|tp <pos>|null, master|mp <pos>|null, tracer|trp|rp <pos>|null;\
  SPECIAL : arg0..arg4 <int>, special|action <int>, tid <val>|unique.";
ZCHECKER_ZCSETP_RELPLAYER             = "\c~Base actor for relative properties \c-is set to calling player\c~.";
ZCHECKER_ZCSETP_UNKNOWNMODE           = "\c!Unknown mode \c~\"\c-%s\c~\". Must be empty, \c-raw\c~, \c-add\c~ or \c-rel[:<ptr>]\c~.";
ZCHECKER_ZCSETP_NODELIMCHARS          = "\c!No delimiter character \c-(\":\" or \"=\") \c!provided \c-for property \"%s\".";
ZCHECKER_ZCSETP_WRONGARG              = "\c!Wrong argument number \c-in parameter \"%s\"";
ZCHECKER_ZCSETP_WRONGINTPROP          = "\c!Unknown \c-integer property \"%s\"";
ZCHECKER_ZCSETP_WRONGFLOATPROP        = "\c!Unknown \c-float-point property \"%s\"";
ZCHECKER_ZCSETP_WRONGKEYWORDZ         = "\c!Unknown placeholder \c-\"%s\" for the Z coordinate property. \c~Must be \c-<float>\c~, \c-f[loor] \c~, \c-c[eil]\c~ (ceiling height without actor's height) or \c-rawc[eil]|hc\c~ (ceiling height itself)";
ZCHECKER_ZCSETP_WRONGKEYWORDHP        = "\c!Unknown placeholder \c-\"%s\" for the health property. \c~Must be \c-<int>\c~, \c-max\c~ (~2.1 billion) or \c-s[pawn]\c~ (original spawn health)";
ZCHECKER_ZCSETP_WRONGKEYWORDRENDERSTYLE = "\c!Unknown placeholder \c-\"%s\" for the render style property. \c~Must be \c-<int>\c~ or one of the \c-style names\c~ (e.g., \"normal\").";
ZCHECKER_ZCSETP_EMPTYPROP             = "\c~Skipped empty property \"\c-%s\c~\".";
ZCHECKER_ZCSETP_UNKNOWNPROP           = "\c!Unknown property \c~\"\c-%s\c~:\c-%s\c~\".";
ZCHECKER_ZCSETP_NONRELATIVEPROP       = "\c~Value of property \c-%s\c~ has been copied without altering.";
ZCHECKER_ZCSETP_SUCCESS               = "Properties for actor \"%s\" succesfully changed."; // Currently not used.


// File "ZCCommandsMap.zsc":

//  "zcev (*)":
ZCHECKER_ZCEV_HELP_TITLE              = "zcev goto <class>|<category>|s[tart];zcev re[create|load];zcev resec[tors];zcev map[2]|level[2]";
ZCHECKER_ZCEV_HELP_DESC               = "Operate with the world on the Everything map. Exceptions are \"map\"/\"level\" commands, which warp player to the \"map everything_simple\" and \"map everything_sc77\".";
ZCHECKER_ZCEV_NOTEVMAP                = "Cannot use command on maps other than the Everything map.";

ZCHECKER_ZCEVGOTO_HELP_TITLE          = "zcev goto <class>|<category>|start;zcevg <class>|<category>|start";
ZCHECKER_ZCEVGOTO_HELP_DESC           = "While on the Everything map, go to the certain actor / specified category (abbreviations are also recognized) / to starting position";
ZCHECKER_ZCEVGOTO_TREATASPREFIX       = "\c~Treat \"%s\" as a full form of input category prefix \"\c-%s\c~\"\c-";
ZCHECKER_ZCEVGOTO_NOTCATEGORY         = "Unknown category or keyword \"%s\".";
ZCHECKER_ZCEVGOTO_EMPTYCATEGORY       = "Category or keyword not provided.";
ZCHECKER_ZCEVGOTO_NOTACTOR            = "\"%s\" is not an Actor class.";
ZCHECKER_ZCEVGOTO_SUCCESS             = "Found actor %s at %s.";
ZCHECKER_ZCEVGOTO_CATEGSUCCESS        = "Found category \c~\"\c-%s\c~\"\c- header at %s.";
ZCHECKER_ZCEVGOTO_CATEGNOTFOUND       = "Header for category \"%s\" does not exist on this map.";
ZCHECKER_ZCEVGOTO_NOTFOUND            = "Actor \"%s\" does not exist on this map.";

ZCHECKER_ZCEVRE_HELP_TITLE            = "zcev recreate|reload;zcevre";
ZCHECKER_ZCEVRE_HELP_DESC             = "Delete and recreate all actors on the Everything map, like on map start";

ZCHECKER_ZCEVRESECTOR_HELP_TITLE      = "zcev recreatesec[tors]|reloadsector[s];zcev [re]sec";
ZCHECKER_ZCEVRESECTOR_HELP_DESC       = "Reload general parameters for all sectors on the Everything map. May be useful if some actor change properties of its current sector.";

ZCHECKER_ZCEVMAPWARP_HELP_TITLE       = "zcev map|level;zcev map2|level2";
ZCHECKER_ZCEVMAPWARP_HELP_DESC        = "Warp to the \"Everything (simple)\" map when no digit provided at the end of the argument; otherwise warp to the \"Everything (alternative)\" map.";


// File "ZCCommandsMiscControl.zsc":

//  "zcthinkers":
ZCHECKER_ZCTHINKERS_HELP_TITLE        = "zcthinkers [l[ist]|t[ypes]];zcthinkers <type> l[ist] [[:]<classname>];zcthinkers <type> rm|rem[ove]|del[ete] [[:]<classfilter>:]<numindex>;zcthinkers <type> rm:all[:raw] <classname>;zcthinkers <type> rm:everything;zcthinkers actors add[:<panel>] [[:]<classfilter>:]<numindex>;zcaddlistget [[[:]<classfilter>:]<numindex>] [<panel>]";
ZCHECKER_ZCTHINKERS_HELP_DESC         = "Perform one of the simple operations on a set or a single Thinker object of the StatNum <type>. May list thinkers, remove thinkers from world by list index or by name, add random Actors to infopanels.";
ZCHECKER_ZCTHINKERS_BOUNDSSTATNUM     = "StatNum is out of limits. Must be in range [0; %i].";
ZCHECKER_ZCTHINKERS_WRONGSTATNUM      = "\c!Cannot recognize StatNum \c-\"%s\".";
ZCHECKER_ZCTHINKERS_WRONGSELECT       = "Object selection index \"\c!%s\c-\" isn't a positive integer.";
ZCHECKER_ZCTHINKERS_NOTTHCLASS        = "Cannot determine Thinker class name \"%s\".";
ZCHECKER_ZCTHINKERS_UNKNOWNACTION     = "\c!Unknown action \c-\"%s\".";
ZCHECKER_ZCTHINKERS_EMPTYLIST         = "\c~Thinkers list is empty, selection index is ignored.";
ZCHECKER_ZCTHINKERS_SELECTBOUNDS      = "Requested index is out-of-bounds (1..%i).";
ZCHECKER_ZCTHINKERSADD_INSUFFPLACE    = "Cannot add target to list, insufficient space. Try adding the actor to list directly via \"zcaddlistget <...> [1..%i]\".";
ZCHECKER_ZCTHINKERSADD_WRONGPANEL     = "\c!Wrong panel number \c-\"%s\".";
ZCHECKER_ZCTHINKERSADD_WRONGPANELRANGE = "Panel number must be in range [1..%i].";
ZCHECKER_ZCTHINKERSADD_SUCCESS        = "Added a random world actor %s.";
ZCHECKER_ZCTHINKERSADD_NOTACTOR       = "Thinker \"%s\" isn't an Actor.";
ZCHECKER_ZCTHINKERSADD_NOSELECTION    = "Actor index to add not specified.";
ZCHECKER_ZCTHINKERSRM_UNKNOWNFLAG     = "\c!Unknown flag \c-\"%s\".";
ZCHECKER_ZCTHINKERSRM_INCOMPATIBLEFLAGS = "\c!Incompatible flags\c- \"Remove by classname\" and \"Destroy everything\".";
ZCHECKER_ZCTHINKERSRM_ALLNOCLASS      = "Class to remove not specified.";
ZCHECKER_ZCTHINKERSRM_SUCCESSONE      = "Removed object \"%s\".";
ZCHECKER_ZCTHINKERSRM_SUCCESSALL      = "Removed %i objects of class \"%s\".";
ZCHECKER_ZCTHINKERSRM_SUCCESSALLRAW   = "Removed %i raw-named objects of class \"%s\".";
ZCHECKER_ZCTHINKERSRM_SUCCESSEVERYTHING = "Removed %i objects (all possible).";
ZCHECKER_ZCTHINKERSRM_NOSELECTION     = "Thinker to remove not specified.";
ZCHECKER_ZCTHINKERS_SECTIONACTORS     = "Actors";
ZCHECKER_ZCTHINKERS_SECTIONSTATIC     = "Static";
ZCHECKER_ZCTHINKERS_SECTIONSECTORS    = "Sectors";
ZCHECKER_ZCTHINKERS_SECTIONOTHER      = "Other thinkers";
ZCHECKER_ZCTHINKERS_HELPLISTPOSTFIX   = "Possible types (plural is optional): \n%s\nOr a digit for the non-standard StatNums (for user-defined: \cy%i\c-..\cy%i\c-).";
ZCHECKER_ZCTHINKERS_SECSTATNUMQUESTION = "\"Sector\" what? \"\cwSectorEffects\c-\" (same as \"\cwSectorMovers\c-\"), \"\cwSectorLights\c-\" or \"\cwSectorLightTransfers\c-\"?";
ZCHECKER_ZCTHINKERS_LISTFLAGNOSECTOR  = " (+NOSECTOR)";
ZCHECKER_ZCTHINKERS_LISTATPOS         = " at";
ZCHECKER_ZCTHINKERS_LISTINVOWNER      = ", inv.owner is ";
ZCHECKER_ZCTHINKERS_LISTSECTORNUM     = " in sector %i";
ZCHECKER_ZCTHINKERS_LISTTOTAL         = "\c~Total \c-%i\c~ Thinkers of the StatNum type %i\c-.";
ZCHECKER_ZCTHINKERS_LISTTOTALFILTEREXACT = "\c~Total \c-%i\c~ objects of class \"\cw%s\c~\" of the StatNum type %i\c-.";
ZCHECKER_ZCTHINKERS_LISTTOTALFILTERINHERITANCE = "\c~Total \c-%i\c~ objects inherited from class \"\cw%s\c~\" of the StatNum type %i\c-.";

//  "zcpanel" (without "zcpanel save|store|load" because of unfinished/unclear subcommand UI):
ZCHECKER_ZCPANELCTL_HELP_TITLE        = "zcpanel <panel> m[ove] <newpos>;zcpanel <panel> c[opy] <newpos>;zcpanel <panel> save|store|load <aliasname>;zcpanel (info [<panel>]|<panel> info)";
ZCHECKER_ZCPANELCTL_HELP_DESC         = "Perform action with information panels: moving, saving and loading panel links to the actors. Also may show <info>rmation about inheritance if <panel> is provided, or about actors stashed aliases otherwise. Note that the CCMD syntax may be changed in the near future to extend its functionality.";
ZCHECKER_ZCPANEL_NOACTORINPOS         = "There's no actor in position %i.";
ZCHECKER_ZCPANELINFO_ZCCLASSINFO      = "\c~\"zcclassinfo %s\"";
ZCHECKER_ZCPANELSAVE_ALIASEXISTS      = "Alias \"%s\" already exists and is linked to the actor %s.";
ZCHECKER_ZCPANELSAVE_RELINKINGALIAS   = "Relinking the \"%s\" alias (its previous actor was destroyed).";
ZCHECKER_ZCPANELSAVE_NOPANEL          = "No actor linked to the panel %s.";
ZCHECKER_ZCPANELSAVE_SUCCESS          = "\c~Saved actor \c-%s\c~ as alias \"\c-%s\c~\".";
ZCHECKER_ZCPANELLOAD_ACTORDESTROYED   = "Cannot load, actor with alias \"%s\" is destroyed.";
ZCHECKER_ZCPANELLOAD_WRONGALIAS       = "Alias \"%s\" does not exist.";
ZCHECKER_ZCPANELLOAD_SUCCESS          = "\c~Loaded actor \c-%s\c~ as alias \"\c-%s\c~\".";
ZCHECKER_ZCPANELINFO_NOALIASES        = "\c~No actor aliases have been created.";
ZCHECKER_ZCPANELINFO_LISTHEADER       = "\cyActors aliases \c-(total %i): ";
ZCHECKER_ZCPANELINFO_ALIASLINKED      = "  \"c~\"\c-%s\c~\" linked to the \c-%s\c~ with world position %s.";
ZCHECKER_ZCPANELINFO_ALIASGONE        = "  \"c~\"\c-%s\c~\" is unlinked";

// "zcclassinfo":
ZCHECKER_ZCCLASSINFO_HELP_TITLE       = "zcclassinfo <classname>";
ZCHECKER_ZCCLASSINFO_HELP_DESC        = "Print information about inheritance and replacement chain for Actors for the specified class.";
ZCHECKER_ZCCLASSINFO_NOCLASS          = "Class \"%s\" does not exist or not accessible via ZScript.";
ZCHECKER_ZCCLASSINFO_HEADER           = "\c~Class \"\c-%s\c~\" (pointer <%s>):";
ZCHECKER_ZCCLASSINFO_INHERITANCE      = "  \c~Inherited from \c-%s";
ZCHECKER_ZCCLASSINFO_REPLACEMENTCHAIN = "\c~Final replacements chain:";
ZCHECKER_ZCCLASSINFO_NOREPLACEMENTCHAIN = "\c~Actor isn't in the replacements chain.";
ZCHECKER_ZCCLASSINFO_REPLACEMENTCHAINSEPARATOR = " \cv->\c~ ";

//  "zcvarsctl":
ZCHECKER_ZCVARSCTL_HELP_TITLE         = "zcvarsctl set|new <$varname> <string value or placeholder>;zcvarsctl del[ete]|rm|rem[ove] <$varname>|all;zcvarsctl l[ist]|i[nfo]";
ZCHECKER_ZCVARSCTL_HELP_DESC          = "Perform control on classname ZChecker variables; identifiers must be started with \"$\".\n  Possible placeholders for the <string value> (first symbol must be \"$\"): \"$self\" (caller itself), \"$lt\"|\"$linetarget\" (caller's linetarget), \"$target\" (caller's target field), \"$master\" (its master), \"$tracer\" (its tracer).";
ZCHECKER_ZCVARSCTL_SETSUCCESS         = "Variable \"\cn%s\c-\" is \cdset\c- to \"%s\".";
ZCHECKER_ZCVARSCTL_LISTHEADER         = "\cyClassname variables \c~(total \c-%i\c~): ";

//  "zcinterface"/"zcif":
ZCHECKER_ZCIF_HELP_TITLE              = "zcif strequal <name1>|<$variable1> <name2>|<$variable2>;zcif dangerccmds|ev[map|erything];zcif panel <pos>;zcif panelinherit <pos> <class>|<$variable>;zcif panelequal <pos1> <pos2>;zcif validplacepos <string>;zcif validpos <string>;zcinterface panelfind <name>;zcinterface panelfindfree";
ZCHECKER_ZCIF_HELP_DESC               = "Provide a conditional operator external interface for the user-defined aliases and other similar stuff. On return sets an integer console variable \"%s\". A \"Development/API\" log level must be enabled to track the command results.";
ZCHECKER_ZCIF_TRACEPREFIX             = "\csExternal interface\c~. \c-";



// File "ZCTooltipClasses.zsc":

// General tooltips:

ZCHECKER_TOOLTIP_ACTORMASKS_TIPS      = "For almost all commands that take actor name as argument (\"`Czcsummon`x\", \"`Czcgive`x\", \"`Czctake`x\", \"`Czcev goto`x\", ...) you may use a simple regex search:\
\t'`2*`2' for any number of any characters, including amount of zero; `dand`x\
\t'`2-`2' for any number of characters greater than 0.\
If more than one actor class candidate is found, only `2numbered list`x will be printed. A value may be selected from it by using `2:N`x or `2,N`x.\
Note that a class inheritance filter is applied for some commands.\
Also, you may substitute values from `1ZChecker classname variables`1 `d(must begin with \"`2$`d\")`x like:\
\t'`1$1`1', '`1$2`1', '`1$3`1' for the classname in the specified panel. They will be stored until the next class overwrites them;\
\t'`1$last`1' for the last class added to any panel;\
\tAny other `1$zchecker_variable`1 defined internally or via \"`Czcvarsctl`x\".";
ZCHECKER_TOOLTIP_ACTORMASKS_EXAMPLES  = "\"`Czcsummon z`2-`Cman 4`x\" creates four Zombiemen;\
\"`Czcsummon sta`2*`Cff`x\" will print a list with elements \"Staff\" and \"Staff`dPu`xff\";\
\"`Czcsummon sta`2-`Cff`x\" summons a \"StaffPuff\";\
\"`Czcsummon sta`2*`Cff`2:1`x\" also summons a \"StaffPuff\" `d(by specifying a selection)`x;\
\"`Czcsummon $2 15`x\" summons fifteen actors of the class in the second panel;\
\"`Czcgive 1 `2*`Ccard`x\" will print a list of all Inventory classes ending with a \"card\" `d(while trying to give item to the actor in the first panel)`x;\
\"`Czctake 1 z`2-`Cman`x\" will not take anything from the actor in the first panel: \"Zombieman\" is not an Inventory class.\
You can find more specific examples in the help pages of all of the commands mentioned.";


ZCHECKER_TOOLTIP_CCMDRULES_HEADER     = "About general console commands rules";
ZCHECKER_TOOLTIP_CCMDRULES_TIPS       = "Most of the ZChecker console commands which works with only one actor have the same first argument: it's a pointer to (position of) the source actor. The most notable exceptions are commands of the \"`Czcadd`C\" family, which have special arguments handling.\
Argument `g<pos>`g can take the following values and keywords:\
\t`~\"`C1`~\"`x..`~\"`C3`~\" (up to the max amount of the infopanels).`x Refers to previously saved actors in the informational panels;\
\t`~\"`Clt`~\"`x or `~\"`Clinetarget`~\".`x Takes the first tangible actor from the player's line of sight;\
\t`~\"`Cs`~\"`x or `~\"`Cself`~\".`x Specifies a caller player itself;\
\t`~\"`Ccam`~\"`x or `~\"`Ccamera`~\".`x Specifies a current player's camera.\
By default (if this argument not provided) a `Clinetarget`C will be used.";
ZCHECKER_TOOLTIP_CCMDRULES_EXAMPLES   = "\"`Czcgive lt clip 4`x\" gives 4 clips to the `1l`2ine`1t`2arget`2;\
\"`Czcgive clip 4`x\" does same as the CCMD above `~(default argument value is `2linetarget`~)`x;\
\"`Czcgive 1 clip 4`x\" gives 4 clips to the actor in the `11`xst informational panel;\
\"`Czcgive self clip 4`x\" `~or`x \"`Czcgive s clip 4`x\" gives 4 clips to `1s`2elf`x `~(to the caller player)`~;\
\"`Czcsetflag 1 noblockmap`C\" toggles the flag for the actor in the `11`xst informational panel;\
\"`Czcsetflag cam noblockmap`C\" toggles the flag of the caller player camera actor.\
You can find more specific examples in the help pages of almost all of the commands supporting this format.";


ZCHECKER_TOOLTIP_EVERYTHINGMAP_HEADER = "About \"Everything\" maps";
ZCHECKER_TOOLTIP_EVERYTHINGMAP_TEXT   = "A map named \"`2Everything`2\" is an universal actors card-index.\
Right now there are two maps:\
\"`2Everything_simple`2\", a lightweight but fully functional variant; `~and`x\
\"`2Everything_SC77`2\" by StormCatcher.77. Note that it may be out of date in the beta and nightly versions of ZChecker.\
\t`yWarning: some modifications block regular specific actor spawning without special mod- or level-specified adjustments `d(might, in fact, be on purpose)`y. `xThe consequences can vary, from spamming console messages to crashing the engine. If you found this, it's best that you contact the conflicting mod's author. Or the LLDM Team, but in most cases we will redirect you to them as well.";
ZCHECKER_TOOLTIP_EVERYTHINGMAP_EXAMPLES = "\"`Cmap everything_simple`C\" changes the level to the Everything map (simple version);\
\"`Czcev map`x\" does pretty much the same.\
This commands are also available in the \\"Everything\\" map settings menu.";


// Console commands tooltips:
ZCHECKER_TOOLTIP_ZCHELP_EXAMPLES      = "Simple \"`Czchelp`x\" prints out a help text with only the commonly used console commands (CCMDs);\
\"`Czchelp all`x\" prints out a full help text including all of the available console commands;\
\"`Czchelp -a`x\" same as CCMD above `~(for the *nix OS terminal users like me)`~;\
\"`Czchelp zcadd`x\" outputs a help text and examples for the console command \"`Czcadd`C\";\
\"`Czchelp add`x\" same as the help command above `~(\"zc\" prefix is optional)`~;\
\"`Czcadd help`x\" is an alternative form for the two previous commands;\
\"`Czchelp summon`x\" outputs a help text and examples for the CCMD \"`Czcsummon`C\";\
\"`Czcsummon help`x\" does the same as the CCMD above.";


ZCHECKER_TOOLTIP_ZCADD_TEXT           = "`yNote`x: actors in panels will not be saved after level reloading. `~I might rewrite this system later...`x";
ZCHECKER_TOOLTIP_ZCADD_TIPS           = "Objects listed via \"`Czcaddlistget`x\" are just designated to the actors set (to the `2StatNum 100`x, actually). Some modifications may not use this rule.";
ZCHECKER_TOOLTIP_ZCADD_EXAMPLES       = "\"`Czcadd 3`x\" adds the linetarget actor to the third panel;\
\"`Czcadd weap`x\"`d/`x\"`Czcaddweap`x\" adds the currently selected weapon to the first empty panel (if them exists);\
\"`Czcadd self 1`x\"`d/`x\"`Czcaddself 1`x\" adds the player actor to the first panel;\
\"`Czcaddlistget`x\" prints out a list with all actors on the level;\
\"`Czcaddlistget 13 2`x\" adds the 13th element from the list to the second information panel.";


ZCHECKER_TOOLTIP_ZCGIVE_EXAMPLES      = "\"`Czcgive shell 3`x\" gives 3 shells to the linetarget;\
\"`Czcgive s clip 15`x\" gives 15 clips to `Gs`Yelf`x `d(to the calling player)`x;\
\"`Czcgive 1 clip`x\" gives 1 clip to the actor in the `g1st`x panel;\
\"`Czcgive 1 `2*`Ccard`x\" shows a list of all Inventory classes ending with \"card\" `d(while trying to give item to the actor in the first panel`x);\
\"`Czcgive s `2*`Ccard`2:1 4`x\" gives `Gs`Yelf`x 4 items of the first element from the list, in this case a \"BlueCard\".";


ZCHECKER_TOOLTIP_ZCTAKE_EXAMPLES      = "\"`Czctake shell 3`x\" takes 3 shells from the linetarget;\
\"`Czctake s clip 15`x\" takes 15 clips from `Gs`Yelf`x `d(from the calling player)`x;\
\"`Czctake 1 clip`x\" takes 1 clip from the actor in the `g1st`x panel;\
\"`Czctake 1 `2*`Ccard`x\" shows a list of all Inventory classes ending with \"card\" `d(while trying to take item from the actor in the first panel)`x;\
\"`Czctake s `2*`Ccard`2:1 4`x\" takes from `Gs`Yelf`x four items of the first element from the list, in this case a \"BlueCard\".";


ZCHECKER_TOOLTIP_ZCACT_TIPS           = "Not all actors may be killed or resurrected. If this happens, a message will be printed.\
In CCMDs with the \"`2state`2\" and \"`2tics`2\" prefixes they can be used in place of each other with the same result (like \"`Czcact ticsskip`C\").\
Resurrection of the dead player is not supported, use the built-in \"`Cresurrect`C\" command instead.";
ZCHECKER_TOOLTIP_ZCACT_EXAMPLES       = "\"`Czcact rm`C\" deletes the linetarget actor from memory (like the built-in \"`Cremove`C\" CCMD, but with only one actor);\
\"`Czcact kill`C\" kills the linetarget;\
\"`Czcact 1 res`C\" tries to revive/resurrect the actor in the first infopanel;\
\"`Czcact s xkill`C\" kills the calling player (`Gs`Yelf`x), like the built-in \"`Cmdk`C\" or \"`Ckill`C\" when used on self.";


ZCHECKER_TOOLTIP_ZCSUMMON_EXAMPLES    = "\"`Czcsummon clip`C\" creates a Clip actor;\
\"`Czcsummon r`2-`Claun`2-`x\" creates a R`~ocket`xLaun`~cher`x;\
\"`Czcsummon z`2*`Cman 4`x\" creates four Zombiemen;\
\"`Czcsummon $2 15`x\" summons fifteen actors of the class in the second panel;\
\"`Czcsummon `2*`Ccard`x\" will print a list of all classes ending with \"card\";\
\"`Czcsummon armo`2-`Cr`x\" summons an Armorer `~(a merchant from Strife)`x;\
\"`Czcsummon armo`2*`Cr`2:2`x\" also summons an Armorer `d(by selection from \"`xArmor`d\" and \"`xArmo`dre`xr`d\")`x;\
\"`Czcsummon z`2*`Cman 3 f`x\" or \"`Czcsummon z`2*`Cman 3 friendly`x\" summons three `1friendly`x Zombiemen;\
\"`Czcsummon z`2*`Cman friendly`d,`Cadd:3`x\" summons `1friendly`x Zombieman and adds it to the `g3`xrd `gpanel position`x;\
\"`Czcsummon shot`2*:1`C noinfight`d,`Crelang:180`d,`Ctid:4`d,`Chp:99999`x\" summons one ShotgunGuy facing away from the player, which will not infight others, has a TID of 4 and a very large health value.";


ZCHECKER_TOOLTIP_ZCSETPROP_EXAMPLES   = "\"`Czcsetprop hp:255`C\" `~or`x \"`Czcsetprop health:255`C\" sets health of the linetarget to `g255`x;\
\"`Czcsetp s hp:255`C\" sets health of the calling player (for `Gs`Yelf`x) to `g255`x;\
\
\"`Czcsetp 1 add x:10`C\" moves the actor in the `G1`xst infopanel 10 mappixels by X axis;\
\"`Czcsetp 3 add x:0.5`~,`Cy:0.333`C\" moves the actor in the `G3`xrd infopanel diagonally, by X and Y axis;\
\"`Czcsetp 1 add alpha:-0.2`C\" reduces the opaqueness of the actor in the `G1`xst panel. `YNote, that actor must have a suitable RenderStyle`x;\
\
\"`Czcsetp 1 relative:1 alpha:-0.2`C\" same as the command on previous line;\
\"`Czcsetp 1 rel:s hp:0`C\" sets the health of the actor in the `G1`xst infopanel to the value of the calling player's health `~(as sum of `xplayer.health`~ and `x0`~)`x;\
\"`Czcsetp 1 rel hp:0`C\" same as the command above: \"`Yrel`x\" without the argument treated as \"`Yrel`~:`Gself`x\";\
\"`Czcsetp 2 master:self,scalex:0.75,scaley:2`C\" sets the `Gmaster pointer `xto the calling player and `Gscale `xseparately for the `GX and Y`x for the actor in `G2`xnd panel;\
\
\"`Czcsetp hp:spawn`C\" `~or`x \"`Czcsetprop hp:s`C\" resets the linetarget's health to the spawn value;\
\"`Czcsetp z:ceil`C\" moves the linetarget to the ceiling;\
\"`Czchate`C\" makes the linetarget actor hate the calling player `~(alias to the \"`Czcsetprop target:self`~\")`x;\
\"`Czchate 2 none`C\" `~or`x \"`Czchate 2 null`C\" clears the current target for the actor in `G2`xnd panel `~(alias to the \"`Czcsetprop 2 target:null`~\")`x.";


ZCHECKER_TOOLTIP_ZCSETSTATE_EXAMPLES  = "\"`Czcsetstate missile`C\" sets the linetarget's state to \"`2Missile:`2\" (if specified state label exists in this actor);\
\"`Czcsetst missile`C\", \"`Czcsets missile`C\" or \"`Czcst missile`C\" same as the CCMD above;\
\"`Czcsetst 1 death`C\" sets the state of the actor in `y1`2st`2 infopanel to \"`2Death:`2\";\
\"`Czcsetst s melee`C\" sets the state of the calling player it`ys`xelf to \"`2Melee:`2\".";


ZCHECKER_TOOLTIP_ZCSETFLAG_TEXT       = "You can use the following aliases as a target value:\
\t`g1`x, `gt`x, `gtrue`d or `gset`x: to set the flag;\
\t`g0`x, `gf`x, `gfalse`d or `greset`x: to clear the flag.\
Note that only a few frequently used flags change immediately (without a one tic delay). These are:\
\t`2Physics`x: SOLID, SHOOTABLE, NONSHOOTABLE, NOGRAVITY, NOINTERACTION, NOBLOCKMAP, NOSECTOR;\
\t`2Behaviour`x: FRIENDLY, FLOAT, NOTARGET, FORCEINFIGHTING, NOINFIGHTING;\
\t`2Defences`x: BUDDHA, NODAMAGE, DORMANT, INVULNERABLE; `dand`x\
\t`2Other`x: BRIGHT.\
You may disable their special handling by providing the \"nospec\", \"raw\" or \"acs\" keyword as the last argument (comma- or colon-separated if you don't want to toggle a flag).";
ZCHECKER_TOOLTIP_ZCSETFLAG_EXAMPLES   = "\"`Czcsetflag friendly`x\", \"`Czcsetf friendly`x\" or \"`Czcsf friendly`x\" toggles the `2+FRIENDLY`x flag for the linetarget;\
\"`Czcsetf 1 solid t`x\" or \"`Czcsetf 1 solid 1`x\" sets the `2+SOLID`x flag to \"true\" for the actor in the first infopanel;\
\"`Czcsetf s touchy`x\" sets the `2+TOUCHY`x flag to `1s`2elf`x, making player able to die at the slightest touch. Note that this flag isn't in the quick access;\
\"`Czcsetf solid raw`x\" toggles the flag with a one-delay tic, forcibly using an ACS machine;\
\"`Czcsetf solid 1,nospec`x\", \"`Czcsetf solid acs:1`x\" sets the specified flag to \"true\", also forcibly using an ACS machine.";


ZCHECKER_TOOLTIP_ZCEV_TIPS            = "Multicolored markers near to every spawned class are interactive informational actors:\
\tBy default ZChecker commands used on them will be redirect to the linked actors. Behaviour may be changed with the \"Disable ZC classes special handling\" setting.\
\tYou can press `2+USE`2 on them to recreate dead or disappeared actor they are linked with.\
\t\cd[Green color]\c- indicates that linked actor is alive, \ci[yellow]\c- imforms that it is dead. \cg[Red color]\c- is used for the vanished actors.\
\tInfoactors has different height offsets, which refers to the initial spawn flags of actors they are linked with. `1Highest position`1 (has the highest priority) is for the `1+SPAWNCEILING`1 flag set for the linked actor, `2middle position`2 informs about the `2+NOGRAVITY`2 flag set, and a lowest has no such flags.\
\
Help text of the `Czcevg`C CCMD (\"`Czchelp zcevg`C\") has a `glist of all categories`g that are presented on the map.";
ZCHECKER_TOOLTIP_ZCEVGOTO_TEXT        = "In general, you may warp to section headers by their `2approximate shortened names`2 (always exactly one word). On collision with actor class name, the last one has the higher priority, so the command will try to teleported you to this actor. To override this and jump to the category anyway, use the sharp character `~(\"`1#`~\")`~ at the beginning of the name.\
All of the categories on the Everything maps. The examples in brackets are not an exhaustive list:\
\t`AMonsters`A: `2Monsters`2 `~(\"`~m`~\", \"`~mons\"`~ etc)`~, `2Large monsters`2 `~(\"`~lm`~\", \"`~ml`~\", \"`~largem`~\" etc)`~ and `2Huge monsters`2 `~(\"`~hm`~\" etc)`~;\
\t`AItems`A   : `2Weapons`2 `~(\"`~iw`~\", \"`~weaps`~\" etc)`~, `2Ammo`2 `~(\"`~ia`~\" etc)`~, `2Health & armor`2 `~(\"`~ih`~\" etc)`~, `2Powerups`2, `2Keys`2 and `2Other items`2;\
\t`AObjects`A : `2Impassible/solid`2 `~(\"`~impass`~\", \"`~ds`~\" etc)`~, `2Large solid`2 `~(\"`~dli`~\" etc)`~, `2Shootable`2, `2Large shootable`2;\
\t`ADecor`A   : `2Passable/ethereal`2 `~(\"`~ether`~\", \"`~dp`~\" etc)`~, `2Large passable`2, `2+NOBLOCKMAP`2 `~(\"`~nobl`~\" etc)`~, `2+NOINTERACTION`2;\
\t`AHuge obj`A: `2Huge decorations`2 `~(\"`~hd`~\" etc)`~;\
\t`AMissiles`A: `2Projectiles`2 `~(\"`~missiles`~\", \"`~proj`~\" etc)`~;\
\t`AOther`A   : `2Player classes`2 `~(\"`~pl`~\" etc)`~, `2Special`2 `~(\"`~other`~\", \"`~special`~\" etc)`~.\
You also may just use the `1Everything maps menu`1 to warp to any caterogy.";
ZCHECKER_TOOLTIP_ZCEVGOTO_EXAMPLES    = "\"`Czcev goto doomimp`C\", \"`Czcev g doomimp`C\" or \"`Czcevg doomimp`C\" teleports player to the specified actor (of course, `2DoomImp`2 in this case).\
\"`Czcevg shotgun`C\" teleports player next to the `2Shotgun`2 item;\
\"`Czcevg z*man`C\" teleports player next to the spawned `2Z`~ombie`2man`x actor;\
\"`Czcevg *armor`C\" prints a list of all actors with this postfix;\
\"`Czcevg *armor:4`C\" teleports player next to the `2BlueArmor`2;\
\"`Czcevg $last`C\" teleports player next to the last actor class added to infopanels;\
\"`Czcevg #monsters`C\" or \"`Czcevg #m`C\" warps player to the header of the category \"Monsters\";\
\"`Czcevg mons`C\" does the same if the actor class \"`2mons`2\" not defined, else teleports to it;\
\"`Czcevg #ammo`C\" warps player to the header of the category \"Ammo\". Without the sharp character, teleports player next to the Ammo actor itself (if it exists on the map).";


ZCHECKER_TOOLTIP_ZCTHINKERS_TIPS      = "Use the \"`Czcthinkers <type> rm`x\" commands `yonly if you know what you're doing`x; they can absolutely break levels and the whole game, up to the engine crash.\
You may provide a direct StatNum value instead of its string alias.\
First symbol in the \"`g[[`y:`g]<classfilter>:]`x\" might be \"`y:`x\" or \"`y#`x\". It stands for the inheritance check, not only the exact class (e.g. \"`g#demon`g\" will check Demons and Spectres).\
All StatNums are nominal: some modification may use non-standard distribution on sets.\
\"`Czcaddlistget`x\" is just a convenience alias which uses current the CCMD in question.\
Internal thinkers may be controlled by name if the argument \"rm:raw\" or its analog is provided. But they may be freely specified in default \"rm\" by their index number in list.\
Possible \"rm\" command flags: \"`g:all`x\"/\"`g:class`x\" (remove all Thinkers of this class); \"`g:raw`x\"/\"`g:internal`x\" (only with `g:all`x/`g:class`x, switches to raw classname parsing); and \"`g:everything`x\" (incompatible with others, destroys all Thinkers of the specified StatNum).";
ZCHECKER_TOOLTIP_ZCTHINKERS_EXAMPLES  = "\"`Czcthinkers l`x\"/\"`Czclistthinkers`x\" prints out a help list with all recognizable StatNum types aliases;\
\"`Czcthinkers a l`x\"/\"`Czclistthinkers actors`x\" lists all of the Thinkers designated to the actors set (`~STAT_DEFAULT`~);\
\"`Czcthinkers 100 l`x\" same as the command above: the `2actors`x alias actually converts to the value `y100`x;\
\"`Czcthinkers a l stimpack`x\" lists all of the Stimpacks on the level;\
\"`Czcthinkers a rm:all z*man`x\" removes all of the Zombiemen from the level `d(same action as in \"`Cremove zombieman`d\");\
\"`Czcthinkers static rm 1`x\" removes the 1st element in the set of the static thinkers (`~STAT_STATIC`~);\
\"`Czcthinkers a add`g:2`C 17`x\" adds the 17th actor from the list to the second information panel;\
\"`Czcthinkers a add #powerupgiver:4`x\" adds a 4th actor that satisfies the inheritance filter from \"PowerupGiver\";\
\"`Czcthinkers sl rm`2:all:raw`C glow`x\" removes all Thinkers named \"glow\", regardless of their internal or not origin, in the set of the sector lights (`~STAT_LIGHT`~).";


ZCHECKER_TOOLTIP_ZCPANELCTL_TEXT      = "`yNote`x: right now the alias system is inconvenient, so I will not recommend using it. On the other hand, it is fully functional.";
ZCHECKER_TOOLTIP_ZCPANELCTL_EXAMPLES  = "\"`Czcpanel 1 m 3`x\" moves the actor from the 1st panel to the 3rd panel;\
\"`Czcpanel info 2`x\", \"`Czcpanel 2 info`x\" or \"`Czcinfo 2`x\" shows some info about the specified (2nd) actor.";


ZCHECKER_TOOLTIP_ZCINTERFACE_TEXT     = "`yThis command is mostly useful for automation via the `x\"`Calias`x\"`y command`x and may be useless in other cases.";
ZCHECKER_TOOLTIP_ZCINTERFACE_TIPS     = "Command \"`Czcif`x\" is actually an abbreviation of \"`Czcinterface`x\" and not independent.\
This command returns its integer result to the console variable \"`g%s`x\". You may check it via the built-in \"`Ctest`x\" command, see section \"`HExamples`x\" below.\
Note, the assigning of that command's result will be delayed by 1 world tic to prevent desynchronizations in multiplayer. Built-in command \"`Cwait`x\" might be helpful. `yWarning: different engine versions processes this command differently!`y You may notice that a \"`Cwait`x\" CCMD will work also in console, menus and a even while the game is paused.";
ZCHECKER_TOOLTIP_ZCINTERFACE_EXAMPLES = "This alias will `yonly`x summon one specified actor (`g%%1`g) and add it to the first infopanel `yif this panel is not yet linked`x:\
`Calias zcsa1 `x\"`2zcif panel 1; wait 1; zcvarsctl set $tmp %1; test == $mcm_zchecker_var_interface 0 \\\"zcsummon $tmp 1 add:1\\\"; zcvarsctl rm $tmp`x\";\
\
The next alias will check if the last actor added to the panel is a DoomImp `~(via classname saved in the variable `1$last`~)`x:\
`Calias testforimp3 `x\"`2zcinterface strequal $last doomimp; wait 1; test == $mcm_zchecker_var_interface 1 \\\"echo Imp.\\\" \\\"echo Not an Imp.\\\"`x\".\
\
This alias will indefinitely check if the `1self`x pointer equals the `1self.player.camera`x pointer:\
`Calias isselfcamera `x\"`2zcif panelsequal self camera`~; `2wait 1`~; `2test == $mcm_zchecker_var_interface 0 \\\"echo Player camera view was changed from default.\\\"`~; `2wait 1`~; `2isselfcamera`x\".";


