//
// Tab size for this file: 4.
//
// "ZCGlobal.Log()" and all of its derivatives overrides next colors placeholders:
//	'\c-' is a "LLCOLOR_MAIN" 	 (default user messages color, usually gray);
//	'\c!' is a "LLCOLOR_WARNING" (yellow);
//	'\c~' is a "LLCOLOR_DARK"	 (darkgray).
//


[enu default]


// === General and core ===

// Commons:
ZCHECKER_GREETINGS_SUCCESS 		= "ZChecker v%s initialized successfully. Total %i console commands, %i info panels.";
ZCHECKER_GREETINGS_WARNINGS 	= "ZChecker v%s initialized \c!with warnings\c-. Total %i console commands, %i info panels.";

ZCHECKER_CCMDSHELP_USAGE		= "Usage";
ZCHECKER_CCMDSHELP_TIPS			= "Tips";
ZCHECKER_CCMDSHELP_EXAMPLES		= "Examples";
ZCHECKER_CCMDS_DANGERALLOWEDWARN= "Warning";
ZCHECKER_LOG_EMERGENCY_PREFIX 	= "[ZChecker emergency]";

// Network events intercepting:
ZCHECKER_NETEVENTINTC_NETEVENT	= "Netevent";
ZCHECKER_NETEVENTINTC_MANUAL	= "Manual";
ZCHECKER_NETEVENTINTC_SYSTEM	= "System";
ZCHECKER_NETEVENTINTC_TIMEAT	= "at";
ZCHECKER_NETEVENTINTC_FROMPLAYER= "from player #";



// === Menus ===
//     [WIP]

ZCHECKER_MENU_SUBMENU_DFLTLABEL	= "Submenu. ";
ZCHECKER_MENU_SUBMENU_DFLTMORE	= "[...more]";

ZCHECKER_MAINMENU_TITLE			= "ZChecker control";
ZCHECKER_OPTIONSMENU_NOHANDLER	= "\cxError\ci: ZChecker cannot be initialized.\n\ciSee more info in options menu above.";

ZCHECKER_OPTIONSMENU_CANNOT_LOCATE = "\cf---- ===== \cxERROR \cf===== ----\n\cxCannot locate ZChecker static event handler;\n\cxZChecker is not able to be launched properly\ci.\n\n\ciPossible reason: usage of the \cu\"\crEventHandlers = ...\cu\"\n\cu(\cinot \cu\"\cqAddEventHandlers = ...\cu\") \ciin some \ccMAPINFO\ci lump\n\cifor the engine versions before GZDoom 4.8.0.";
ZCHECKER_MAINMENU_DIV_GENERAL	= "General categories";
ZCHECKER_MAINMENU_INFOPANELS	= "Informational panels control";
ZCHECKER_MAINMENU_CCMDS			= "Call console command [WIP]";
ZCHECKER_MAINMENU_EVMAP			= "\"Everything\" map settings";
ZCHECKER_MAINMENU_VISUAL		= "HUD & visual settings";
ZCHECKER_MAINMENU_OPENINFOPANELS= "Open infopanels menu key";
ZCHECKER_MAINMENU_OPENCCMDS		= "Open CCMD call menu key";
ZCHECKER_MAINMENU_OPENEVMAP		= "Open \"Everything\" map settings key";
ZCHECKER_MAINMENU_OPENVISUAL	= "Open visual settings menu key";

ZCHECKER_MAINMENU_DIV_OTHER		= "Other settings";
ZCHECKER_MAINMENU_NETEVENTS		= "Netevents info intercepting";
ZCHECKER_MAINMENU_NETEVENTS_TIP	= "Tries to catch a network events information.";
ZCHECKER_MAINMENU_ALLOW_DANGEROUS	= "Allow dangerous actions";
ZCHECKER_MAINMENU_ALLOW_CRASH	= "Allow operations that are known to crash the game.";
ZCHECKER_MAINMENU_TWICE_BEHAVIOUR	= "Adding actor twice behaviour";
ZCHECKER_MAINMENU_ZCADD_BEHAVIOUR	= "Behaviour when using \"zcadd\" on actor which is";
ZCHECKER_MAINMENU_ALREADY_LIST	= "already in the informational panels list.";
ZCHECKER_MAINMENU_NO_ZC_HANDLING= "No ZC-classes special handling";
ZCHECKER_MAINMENU_DO_NOT_ALTER	= "Do not alter handling for the ZChecker";
ZCHECKER_MAINMENU_SPECIAL		= "special actors and classes.";
ZCHECKER_MAINMENU_OPEN_MENU_KEY	= "Open this controls menu key";
ZCHECKER_MAINMENU_LOG_LEVEL		= "Log level";
ZCHECKER_MAINMENU_UPDATE_5_TICS	= "will be updated after up to five world tics.";

ZCHECKER_MAINMENUOPT_LOGLEVEL1	= "1. General";
ZCHECKER_MAINMENUOPT_LOGLEVEL2	= "2. Detailed (default)";
ZCHECKER_MAINMENUOPT_LOGLEVEL3	= "3. Debug mode";

ZCHECKER_MAINMENUOPT_FONTS_SMALL	= "Built-in smallfont";
ZCHECKER_MAINMENUOPT_FONTS_SHORT	= "Mono smallfont, short space";
ZCHECKER_MAINMENUOPT_FONTS_FULL		= "Mono smallfont, full space";
ZCHECKER_MAINMENUOPT_FONTS_CONFONT	= "Built-in confont";

ZCHECKER_MAINMENUOPT_NETEVENS_DISABLED	= "Disabled";
ZCHECKER_MAINMENUOPT_NETEVENS_NA		= "Names and args";
ZCHECKER_MAINMENUOPT_NETEVENS_NAM		= "Names, args and maptime";
ZCHECKER_MAINMENUOPT_NETEVENS_FULL		= "Full information";

ZCHECKER_MAINMENUOPT_TWICE_SMOVE	= "Silently move";
ZCHECKER_MAINMENUOPT_TWICE_SCOPY	= "Silently copy";
ZCHECKER_MAINMENUOPT_TWICE_MOVEWARN	= "Move and warn (default)";
ZCHECKER_MAINMENUOPT_TWICE_COPYWARN	= "Copy and warn";

// === Control menu panels ===

ZCHECKER_PANELS_TITLE	= "ZChecker panels";

// === Control menu Visual Settings ===

ZCHECKER_VISUAL_TITLE		= "ZChecker: HUD and visual settings";
ZCHECKER_VISUAL_POSITIONING	= "Panels positioning";
ZCHECKER_VISUAL_START_X		= "Panels start X, %";
ZCHECKER_VISUAL_START_X_10	= "Panels start X, x10%";
ZCHECKER_VISUAL_START_Y		= "Panels start Y, %";
ZCHECKER_VISUAL_START_Y_10	= "Panels start Y, x10%";
ZCHECKER_VISUAL_OFFSET_X	= "Next panels X offset, %";
ZCHECKER_VISUAL_PANELS_SCALE	= "Panels scale";
ZCHECKER_VISUAL_PANELS_Y_GAP	= "Panels interval Y, multiplier";
ZCHECKER_VISUAL_BACKGROUND	= "Panels background";
ZCHECKER_VISUAL_ENABLED		= "Enabled";
ZCHECKER_VISUAL_DIMCOLOR	= "Background color";
ZCHECKER_VISUAL_DIMALPHA	= "Background alpha";
ZCHECKER_VISUAL_DIMBORDERWIDTH	= "Border width";
ZCHECKER_VISUAL_EVERYTHINGMAP_INFO	= "\"Everything\" map actor info";
ZCHECKER_VISUAL_INFOSTR_X	= "Actor info string X, %";
ZCHECKER_VISUAL_INFOSTR_X10	= "Actor info string X, x10%";
ZCHECKER_VISUAL_INFOSTR_Y	= "Actor info string Y, %";
ZCHECKER_VISUAL_INFOSTR_Y10	= "Actor info string Y, x10%";
ZCHECKER_VISUAL_INFOSTR_SCALE	= "Actor info string scale";
ZCHECKER_VISUAL_OTHER		= "Other";
ZCHECKER_VISUAL_FONTTYPES	= "General font";

// === Control menu "Everything" map ===

ZCHECKER_EVMAPMENU_TITLE		= "ZChecker: \"Everything\" map settings";
ZCHECKER_EVMAPMENU_SPAWNOPTIONS	= "Spawning options";
ZCHECKER_EVMAPMENU_GENERAL		= "- General -";
ZCHECKER_EVMAPMENU_SPAWNREPLACED= "Replaced actors";
ZCHECKER_EVMAPMENU_RESTRICT		= "Replacements of restricted actors";
ZCHECKER_EVMAPMENU_EMPTYSPRITES	= "- By empty sprites -";
ZCHECKER_EVMAPMENU_MISSING		= "Actors with missing sprites";
ZCHECKER_EVMAPMENU_TNT1A0		= "Actors with sprite \"TNT1A0\"";
ZCHECKER_EVMAPMENU_PLYC			= "Actors with sprite \"PLYC*\"";
ZCHECKER_EVMAPMENU_CODEBASED	= "- Code-based -";
ZCHECKER_EVMAPMENU_STEALTH		= "+STEALTH actors";
ZCHECKER_EVMAPMENU_INVISIBLE	= "+INVISIBLE actors";
ZCHECKER_EVMAPMENU_PLAYERCHUNK	= "Inherited from \"PlayerChunk\"";
ZCHECKER_EVMAPMENU_OTHER		= "Other";
ZCHECKER_EVMAPMENU_AUTONOTARGET	= "Auto-notarget";
ZCHECKER_EVMAPMENU_AUTOGOD		= "Auto-godmode";
ZCHECKER_EVMAPMENU_SPEC_CHEATS	= "Enable specified cheats automatically";
ZCHECKER_EVMAPMENU_ENTERING		= "when entering an \"Everything\" map.";
ZCHECKER_EVMAPMENU_LOGSPAWN		= "Log spawn information";
ZCHECKER_EVMAPMENU_LOGCREATED1	= "Log information to console about created (or";
ZCHECKER_EVMAPMENU_LOGCREATED2	= "skipped) actors on an \"Everything\" map.";
ZCHECKER_EVMAPMENU_FORCEUSE		= "Force use map scripts";

ZCHECKER_EVMAPMENU_ALLOWSPEC1	= "This option allows using a special \"Everything\" map";
ZCHECKER_EVMAPMENU_ALLOWSPEC2	= "scripts for any map, skipping the conformity check.";
ZCHECKER_EVMAPMENU_CANNOT_LOCATE= "\n\cxCannot locate ZChecker static event handler.\n\ciPossible reason: \cu\"\crEventHandler = ...\cu\"\n\ciin MAPINFO on GZDoom older than 4.8.0.\n\cx\"Everything\" map CCMDs cannot be used.";
ZCHECKER_EVMAPMENU_RELATEDCCMD	= "Related CCMDs (closes menu)";
ZCHECKER_EVMAPMENU_RECREATEACTORS = "Recreate actors: \"zcevre\"";
ZCHECKER_EVMAPMENU_TELEPORTSTART= "Teleport to start: \"zcevg start\"";

// === Control menu CallCCMD ===

ZCHECKER_CCMDMENU_TITLE = "ZChecker: call console command";
ZCHECKER_CCMDMENU_WIP = "[WIP] Some frequently used commands will be here.";
ZCHECKER_CCMDMENU_MABESHOW1 = "All commands may be shown via \"zchelp all\" in";
ZCHECKER_CCMDMENU_MABESHOW2 = "the console; also you may use a \"zchelp <command>\".";
ZCHECKER_CCMDMENU_CANNOT_LOCATE = "\cxCannot locate ZChecker static event handler.\n\ciPossible reason: \cu\"\crEventHandler = ...\cu\"\n\ciin MAPINFO on GZDoom older than 4.8.0.\n\cxConsole commands cannot be used.";
ZCHECKER_CCMDMENU_EXAMPLES = "Command examples:";
ZCHECKER_CCMDMENU_ZCADD = "\"zcadd\": Add linetarget to panel";
ZCHECKER_CCMDMENU_ZCADD_SELF = "\"zcadd self\": Add self to panel";
ZCHECKER_CCMDMENU_ZCREM = "\"zcrem\": Clear all panels";

// === An "Everything" maps ===

ZCHECKER_EVMAP_INITERROR			= "%s::RecreateEverything(). Cannot run due to the map errors, terminating.";
ZCHECKER_EVMAP_TOTALRECREATE		= "Recreating/reloading map...";
ZCHECKER_EVMAP_AUTOIDDQD			= "Auto-godmode enabled.";
ZCHECKER_EVMAP_AUTONOTARGET			= "Auto-notarget enabled.";
ZCHECKER_EVMAPSPAWN_SUCCESS			= "\cqsummoned class \"\cd%s\cq\"\c~ (sprite \"%s\").";
ZCHECKER_EVMAPSPAWN_EMPTYSPRITESKIP	= "class \"%s\" omitted because of empty sprite \"%s\".";
ZCHECKER_EVMAPSPAWN_MISSPRITESKIP	= "class \"%s\" omitted because of empty sprite \"%s\" (was %s).";
ZCHECKER_EVMAPSPAWN_INVISSKIP		= "class \"%s\" omitted because of +STEALTH/+INVISIBLE flag set.";
ZCHECKER_EVMAPSPAWN_PLCHUNKSKIP		= "class \"%s\" omitted due to inheritance from the \"PlayerChunk\".";
ZCHECKER_EVMAPSPAWN_REPLACEDSKIP	= "class \"%s\" replaced and thus omitted.";
ZCHECKER_EVMAPSPAWN_REPLRESTRICTEDSKIP = "replaced by \"%s\" class \"%s\" is restricted.";
ZCHECKER_EVMAP_RESUMMON				= "\c~Spawned \c-%s\c~.";
ZCHECKER_EVMAP_INFOSTR_REPLACES		= "%s \cnreplaces\c- %s";



// === Console commands ===
//          [WIP]

// General:

ZCHECKER_CCMD_WIP				= "\c~[Work-in-progress command, may behave strangely or not work at all].";

// "ZCConsoleCommand::GetPlaceTestee()" and "ZCConsoleCommand::LinetraceActor()".
ZCHECKER_GETACTOR_LTSKIPACTOR	= "Skipped special linetarget class \"%s\".";
ZCHECKER_GETACTOR_LTNOACTORS	= "No available linetarget actors found.";
ZCHECKER_GETACTOR_EMPTYPOS		= "No actor in position %i.";
ZCHECKER_GETACTOR_WRONGPOS		= "\c!Wrong position %i\c- (must be in range [1..%i]).";
ZCHECKER_GETACTOR_UNKNOWNKEYWORD= "\c!Unknown placeholder \"%s\" in position %i\c~. Possible values: \c-1..%i, s[elf], cam[era], lt\c~|\c-linetarget\c~.";

// "ZCConsoleCommand::ParseSpecialActorName()".
ZCHECKER_PARSENAME_WRONGSELECT	= "\c!Selection \"%s\" isn't a positive integer.";
ZCHECKER_PARSENAME_EMPTYKEYWORD	= "\c!Skipped\c- empty placeholder \"%s\". You may use \"%%null\" or \"%%none\" to override this.";
ZCHECKER_PARSENAME_UNSETVAR		= "\c!Skipped\c- unset internal variable \"%s\".";
ZCHECKER_PARSENAME_NOCLASSCHARS	= "\c!Not provided any class identifier characters.";
ZCHECKER_PARSENAME_WITHFILTER 	= "\c~ with filter \cj%s\c~";
ZCHECKER_PARSENAME_NOTFOUND	 	= "Cannot find any suitable actor name candidates";
ZCHECKER_PARSENAME_FOUNDSOME 	= "Found more than one suitable actor name candidate";
ZCHECKER_PARSENAME_SELECTBOUNDS	= "\c!Selected index \cn%i \c!is out of range\c- of the found candidates.";
ZCHECKER_PARSENAME_IGNORESELECT = "\c!Ignoring numerical selection %i\c-";

// "ZCConsoleCommand::RemoveWorldThinker()".
ZCHECKER_REMOVEPREVENT_LIVEPLAYER= "\crIt's better not to destroy a live player %i\c-. \c!Skipped\c-.";
ZCHECKER_REMOVEWARNING_LIVEPLAYER= "destroying live player";
ZCHECKER_REMOVEPREVENT_ZCINTERNAL= "\crInternal ZChecker class \"\c-%s\cr\" in the destroy list. \c!Skipped\c-.";
ZCHECKER_REMOVEWARNING_ZCINTERNAL= "destroying internal ZChecker class";

// "ZCAddCommand::HandleDuplicateActorFields()".
ZCHECKER_ADD_DUPLICATELINK		= "\c~Found \c!duplicate link \c~for actor \c-%s\c~ in panel %i.";


// File "ZCCommandsGeneral.zsc":

// "zchelp":
ZCHECKER_ZCHELP_CANNOTFIND			= "\czZChecker help: \cxcannot find ZChecker console command \c~\"\c-%s\c~\"\cx.";
ZCHECKER_ZCHELP_VERBOSETITLE		= "\cyZChecker \chv%s.\
  (c)\cj JSO_x \cha.k.a.\cj Morthimer McMare\ch;\
  (c)\cj LLDM-Doom-modding\ch team.\n\n";
ZCHECKER_ZCHELP_HEADERCOMMONCCMDS	= "\cjAvailable commands, common used\c-:";
ZCHECKER_ZCHELP_HEADERALLCCMDS		= "\cjAvailable commands, complete list\c-:";

// "zcadd":
ZCHECKER_ZCADD_ADDINSUFFPLACE		= "Cannot add target to list, insufficient place. Try set target to list directly via \"zcadd 1\"..\"zcadd %i\".";
ZCHECKER_ZCADD_NOWEAPON				= "No weapon, cannot add.";
ZCHECKER_ZCADD_FORCENOTFOUND		= "Cannot find any suitable actors.";
ZCHECKER_ZCADD_SUCCESSCOMMON		= "Added actor %s";
ZCHECKER_ZCADD_SUCCESSPLAYER		= "Added a PlayerPawn actor %s";
ZCHECKER_ZCADD_SUCCESSWEAPON		= "Added a StateProvider actor %s";
ZCHECKER_ZCADD_SUCCESSFORCED		= "Added an arbitrary actor %s";
ZCHECKER_ZCADD_USINGPREVLINK		= "\c~Using previous link in panel \cj%i\c~ for actor \cu%s\c~.";

// "zcrem"/"zcclear":
ZCHECKER_ZCREM_SUCCESS				= "Removed actor \"%s\" <%s> from position %i.";
ZCHECKER_ZCREM_SUCCESSTOTAL			= "All actors cleared from the infopanels.";
ZCHECKER_ZCREM_EMPTYPOS				= "Cannot remove, there's no actor in position %i.";


// File "ZCCommandsActorAlter.zsc":

// "zcact":
ZCHECKER_ZCACT_CANNOTREVIVE		= "Cannot revive actor %s";
ZCHECKER_ZCACT_REVIVED			= "Revived actor %s";
ZCHECKER_ZCACT_REVIVEVANISH		= "Actor %s revived, but vanished.";
ZCHECKER_ZCACT_REVIVEBLOCKED	= "Actor %s reviving \cablocked\c-.";
ZCHECKER_ZCACT_KILLED 			= "Killed actor %s.";
ZCHECKER_ZCACT_CANNOTKILL		= "Cannot kill actor %s";
ZCHECKER_ZCACT_XKILLED 			= "Extremely killed actor %s.";
ZCHECKER_ZCACT_CANNOTXKILL		= "Cannot extremely kill actor %s";
ZCHECKER_ZCACT_DESTROYED		= "Destroyed actor %s.";

// "zcgive":
ZCHECKER_ZCGIVE_SUCCESS			= "Item \"%s\" is given to the actor \"%s\".";
ZCHECKER_ZCGIVE_CANNOTRECEIVE	= "Actor %s cannot receive item.";
ZCHECKER_ZCGIVE_NOTINVCLASS		= "\"%s\" isn't an Inventory actor.";

// "zctake":
ZCHECKER_ZCTAKE_SUCCESS			= "Item \"%s\" is taken from the actor \"%s\".";
ZCHECKER_ZCTAKE_CANNOTRECEIVE	= "Cannot take item from actor %s.";
ZCHECKER_ZCTAKE_NOTINVCLASS		= "\"%s\" isn't an Inventory actor.";

// "zcsummon":
ZCHECKER_ZCSUMMON_CLAMPINT		= "\c!%s (%i) isn't in range [%i; %i]. \c-Clamped to %i.";
ZCHECKER_ZCSUMMON_CLAMPFLOAT	= "\c!%s (%f) isn't in range [%.3f; %.3f]. \c-Clamped to %.3f.";
ZCHECKER_ZCSUMMON_WRONGPANEL	= "\c!Wrong panel number \"%s\".";
ZCHECKER_ZCSUMMON_WRONGARG		= "\c!Wrong argument number for parameter %s.";
ZCHECKER_ZCSUMMON_WRONGDIGIT	= "\c!Value \"%s\" \c-for parameter \"%s\" \c!isn't a digit.";
ZCHECKER_ZCSUMMON_EMPTYVALUE	= "\c!Empty value for parameter \"%s\".";
ZCHECKER_ZCSUMMON_UNKNOWNPARAM	= "\c!Unknown parameter \"%s\"";
ZCHECKER_ZCSUMMON_UNKNOWNFLAG	= "\c!Unknown flag \"%s\".";
ZCHECKER_ZCSUMMON_LIMITPREVENT	= "Trying to summon more than 200 actors in once. \c~You may disable this limit switching the \"Allow dangerous actions\" option.";
ZCHECKER_ZCSUMMON_LIMITWARNING	= "summoning more than 200 actors";
ZCHECKER_ZCSUMMON_SUCCESS		= "Summoned %i %s \c~of class \"\cd%s\c~\".";
ZCHECKER_ZCSUMMON_ADDINSUFFPLACE= "Cannot add actor to list, insufficient place. Try set target to list directly via parameter \"panel:1\"..\"panel:%i\".";
ZCHECKER_ZCSUMMON_ADDONLYLAST	= "\c~Only last summoned actor added to the list.";
ZCHECKER_ZCSUMMON_CANNOTSUMMON	= "\caCannot summon actor class \cu\"\c-%s\cu\". It may be abstract or immediately destroyed in the BeginPlay() override.";
ZCHECKER_ZCSUMMON_NOTACTOR		= "\"%s\" isn't an Actor class.";

// "zcsetflag":
ZCHECKER_ZCSETFLAG_SUCCESS		= "Flag \"%s\" for actor %s is succesfully set to %i.";

// "zcsetprop":
ZCHECKER_ZCSETP_RELPLAYER		= "\c~Base actor for relative properties \c-is set to caller player\c~.";
ZCHECKER_ZCSETP_UNKNOWNMODE		= "\c!Unknown mode \c~\"\c-%s\c~\". Must be empty, \c-raw\c~, \c-add\c~ or \c-rel[:<ptr>]\c~.";
ZCHECKER_ZCSETP_NODELIMCHARS	= "\c!No delimiter character \c-(\":\" or \"=\") \c!provided \c-for property \"%s\".";
ZCHECKER_ZCSETP_WRONGARG		= "\c!Wrong argument number in parameter \"%s\"";
ZCHECKER_ZCSETP_WRONGINTPROP	= "\c!Unknown integer property \"%s\"";
ZCHECKER_ZCSETP_WRONGFLOATPROP	= "\c!Unknown float-point property \"%s\"";
ZCHECKER_ZCSETP_WRONGKEYWORDZ	= "\c!Unknown placeholder \"\c-%s\c!\" for the Z coordinate property. \c~Must be \c-<float>\c~, \c-f[loor] \c~, \c-c[eil]\c~ or \c-rawc[eil]|hc\c~";
ZCHECKER_ZCSETP_WRONGKEYWORDHP	= "\c!Unknown placeholder \"\c-%s\c!\" for the health property. \c~Must be \c-<int>\c~, \c-max\c~ or \c-s[pawn]\c~";
ZCHECKER_ZCSETP_EMPTYPROP		= "\c~Skipped empty property \"\c-%s\c~\".";
ZCHECKER_ZCSETP_UNKNOWNPROP		= "\c!Unknown property \c~\"\c-%s\c~:\c-%s\c~\".";
ZCHECKER_ZCSETP_SUCCESS			= "Properties for actor \"%s\" succesfully changed.";


// File "ZCCommandsMap.zsc":

// "zcev (*)":
ZCHECKER_ZCEV_NOTEVMAP			= "Cannot use command not on Everything map.";
ZCHECKER_ZCEVGOTO_NOTACTOR		= "\"%s\" is not an Actor class.";
ZCHECKER_ZCEVGOTO_SUCCESS		= "Found actor %s at %s.";
ZCHECKER_ZCEVGOTO_NOTFOUND		= "Actor \"%s\" does not exist on this map.";


// File "ZCCommandsMiscControl.zsc":

// "zcthinkers":
ZCHECKER_ZCTHINKERS_WRONGSTATNUM	= "StatNum is out of limits. Must be in range [0; %i].";
ZCHECKER_ZCTHINKERS_WRONGSELECT		= "Selection index must be a positive integer.";
ZCHECKER_ZCTHINKERS_NOTTHCLASS		= "\c!Cannot determine \c-Thinker class name \"%s\".";
ZCHECKER_ZCTHINKERS_WRONGPANEL		= "\c!Wrong panel number \c-\"%s\".";
ZCHECKER_ZCTHINKERS_WRONGPANELRANGE	= "Panel number \c!must be in range \c-[1..%i].";
ZCHECKER_ZCTHINKERS_UNKNOWNACTION	= "\c!Unknown action\c-\"%s\".";
ZCHECKER_ZCTHINKERSADD_SELECTBOUNDS	= "Requested index \c!is out-of-bounds\c-.";
ZCHECKER_ZCTHINKERSADD_INSUFFPLACE	= "Cannot add target to list, insufficient place. Try set actor to list directly via \"zcaddlistget <...> [1..%i]\".";
ZCHECKER_ZCTHINKERSADD_SUCCESS		= "Added a world actor %s.";
ZCHECKER_ZCTHINKERSADD_NOTACTOR		= "Thinker \"%s\" isn't an Actor.";
ZCHECKER_ZCTHINKERSADD_NOSELECTION	= "Actor index to add \c!not specified\c-.";
ZCHECKER_ZCTHINKERSRM_SELECTBOUNDS	= "Selection index must be a positive integer.";
ZCHECKER_ZCTHINKERSRM_SUCCESS		= "Removed %i thinkers of type \"%s\".";
ZCHECKER_ZCTHINKERSRM_SUCCESSRAW	= "Removed %i thinkers of \charbitrary\c- type \"%s\".";
ZCHECKER_ZCTHINKERSRM_NOSELECTION	= "Thinker to remove \c!not specified \c-either by index or by classname.";
ZCHECKER_ZCTHINKERS_SECTIONACTORS	= "Actors";
ZCHECKER_ZCTHINKERS_SECTIONSTATIC	= "Static";
ZCHECKER_ZCTHINKERS_SECTIONSECTORS	= "Sectors";
ZCHECKER_ZCTHINKERS_SECTIONOTHER	= "Other thinkers";
ZCHECKER_ZCTHINKERS_HELPLISTPOSTFIX	= "Possible types (plural is optional): \n%s\nOr a digit for the non-standard StatNums (for user-defined: \cy%i\c-..\cy%i\c-).";
ZCHECKER_ZCTHINKERS_LISTFLAGNOSECTOR= "(+NOSECTOR)";
ZCHECKER_ZCTHINKERS_LISTATPOS		= "at";
ZCHECKER_ZCTHINKERS_LISTINVOWNER	= "inv.owner is";
ZCHECKER_ZCTHINKERS_LISTTOTAL		= "Total %i thinkers of enum type %i.";

// "zcpanel" (without "zcpanel save|store|load" because of unfinished/unclear subcommand UI):
ZCHECKER_ZCPANEL_NOACTORINPOS		= "There's no actor in position %i.";
ZCHECKER_ZCPANELINFO_HEADER			= "\c~Actor in position \c-%i \c~is \c-%s\c~ <%s>";
ZCHECKER_ZCPANELINFO_INHERITANCE	= "  \c~Inherited from \c-%s\c~ <%s>";

// "zcvarsctl":
ZCHECKER_ZCVARSCTL_SETSUCCESS		= "Internal variable \"\cn%s\c-\" is \cdset\c- to \"%s\".";
ZCHECKER_ZCVARSCTL_LISTHEADER		= "\cyInternal variables \c~(total \c-%i\c~): ";
